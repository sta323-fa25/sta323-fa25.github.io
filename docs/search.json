[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "statistical computing",
    "section": "",
    "text": "Teaching team & office hours\n\n\n\n\nContact\nTime\nLocation\nSection\n\n\n\n\nDr.¬†Alexander Fisher\nalexander.fisher@duke.edu\nWe: 1:30pm-3:30pm\nOld Chem 207\nLecture\n\n\nDevin Johnson\ndevin.johnson@duke.edu\nMo: 10:00am-12:00pm\nOld Chem 203B\nLab 01\n\n\nTong Lin\ntong.lin@duke.edu\nTh: 9:00am-11:00am\nOld Chem 203B\nLab 02\n\n\n\n\n\nLecture and lab\n\n\n\nLecture\nWe/Fr 12:00 - 1:15pm\nSocial Sciences 136\n\n\nLab 01\nTu 12:00pm - 1:15pm\nOld Chemistry 003\n\n\nLab 02\nTu 1:45pm - 3:00pm\nOld Chemistry 003"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "schedule",
    "section": "",
    "text": "Week\nDate\nTopic\nNotes\nLab\nExam\nProject\n\n\n\n\n0\nFri Jan 13\nwelcome\nüíª\n\n\n\n\n\n1\nTue Jan 17\ngit\nüíª\nlab 0\n\n\n\n\n\nWed Jan 18\ncontrol flow, loops and functions\nüíª\n\n\n\n\n\n\nFri Jan 20\nNAs, lists, NULL and attributes\nüíª\n\n\n\n\n\n2\nTue Jan 24\nif it‚Äôs a function, fix it\n\nlab 1\n\n\n\n\n\nWed Jan 25\nobject oriented programming\nüíª\n\n\n\n\n\n\nFri Jan 27\ntidy data and dplyr\nüíª\n\n\n\n\n\n3\nTue Jan 31\ncomputational masonry\n\nlab 2\n\n\n\n\n\nWed Feb 01\nsubsetting\nüíª\n\n\n\n\n\n\nFri Feb 03\nggplot2\nüíª\n\n\n\n\n\n4\nTue Feb 07\ndream of plots\n\nlab 3\n\n\n\n\n\nWed Feb 08\nfunctional programming and purrr\nüíª\n\n\n\n\n\n\nFri Feb 10\nregular expressions\nüíª\n\n\n\n\n\n5\nTue Feb 14\nwrangling the written word\n\nlab 4\n\n\n\n\n\nWed Feb 15\ncatch-up\n\n\n\n\n\n\n\nFri Feb 17\nreview / questions / exam\n\n\nexam 1 release\n\n\n\n6\nTue Feb 21\nno lab: exam 1\n\n\nexam 1 due\n\n\n\n\nWed Feb 22\ncomplexity and parallelization\nüíª\n\n\n\n\n\n\nFri Feb 24\nintro to optimization\nüíª\n\n\n\n\n\n7\nTue Feb 28\nwhere‚Äôs zero?\n\nlab 5\n\n\n\n\n\nWed Mar 01\nNewton-Raphson\nüíª\n\n\n\n\n\n\nFri Mar 03\nNewton-Raphson examples\n\n\n\n\n\n\n8\nTue Mar 07\ncontinue lab\n\n\n\n\n\n\n\nWed Mar 08\nMM principles\nüíª\n\n\n\n\n\n\nFri Mar 10\nMM example\nüíª\n\n\n\n\n\n9\nTue Mar 14\nNO CLASS: Spring break\n\n\n\n\n\n\n\nWed Mar 15\nNO CLASS: Spring break\n\n\n\n\n\n\n\nFri Mar 17\nNO CLASS: Spring break\n\n\n\n\n\n\n10\nTue Mar 21\nascend the likelihood\n\nlab 6\n\n\n\n\n\nWed Mar 22\nEM algorithm\nüíª\n\n\n\n\n\n\nFri Mar 24\nMonte Carlo Integration\n\n\n\n\n\n\n11\nTue Mar 28\ncontinue lab\n\n\n\n\n\n\n\nWed Mar 29\nImportance sampling\n\n\n\n\n\n\n\nFri Mar 31\nreview / questions / exam\n\n\nexam 2 release\n\n\n\n12\nTue Apr 04\nno lab: exam 2\n\n\nexam 2 due\n\n\n\n\nWed Apr 05\nshiny I\n\n\n\n\n\n\n\nFri Apr 07\nshiny II\n\n\n\n\n\n\n13\nTue Apr 11\n\n\n\n\n\n\n\n\nWed Apr 12\nproject tips\n\n\n\n\n\n\n\nFri Apr 14\ncovariance\n\n\n\n\n\n\n14\nTue Apr 18\nproject peer-review\n\n\n\n\n\n\n\nWed Apr 19\nAPIs\n\n\n\n\n\n\n\nFri Apr 21\nSQL\n\n\n\n\n\n\n15\nTue Apr 25\nproject presentations\n\n\n\n\n\n\n\nWed Apr 26"
  },
  {
    "objectID": "links.html",
    "href": "links.html",
    "title": "links",
    "section": "",
    "text": "RStudio containers\n\nCommunication\n\ncourse slack\n\nCollaboration\n\ncourse GitHub organization\n\nTextbooks\n\nAdvanced R (2nd ed.) - Wickham - Chapman and Hall/CRC, 2019 (978-0815384571)\nR for Data Science - Grolemund, Wickham - O‚ÄôReilly, 2016 (978-1491910399)"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "syllabus",
    "section": "",
    "text": "course website:\n\n\n\n\n\n\nContact\nTime\nLocation\nSection\n\n\n\n\nDr.¬†Alexander Fisher\nalexander.fisher@duke.edu\nWe: 1:30pm-3:30pm\nOld Chem 207\nLecture\n\n\nDevin Johnson\ndevin.johnson@duke.edu\nMo: 10:00am-12:00pm\nOld Chem 203B\nLab 01\n\n\nTong Lin\ntong.lin@duke.edu\nTh: 9:00am-11:00am\nOld Chem 203B\nLab 02\n\n\n\n\n\n\n\n\n\nLecture\nWe/Fr 12:00 - 1:15pm\nSocial Sciences 136\n\n\nLab 01\nTu 12:00pm - 1:15pm\nOld Chemistry 003\n\n\nLab 02\nTu 1:45pm - 3:00pm\nOld Chemistry 003\n\n\n\n\n\n\nThere are no required textbooks for this course, the following textbooks are recommended for supplementary and reference purposes.\n\nAdvanced R (2nd ed.) - Wickham - Chapman and Hall/CRC, 2019 (978-0815384571)\nR for Data Science - Grolemund, Wickham - O‚ÄôReilly, 2016 (978-1491910399)"
  },
  {
    "objectID": "syllabus.html#additional-resources",
    "href": "syllabus.html#additional-resources",
    "title": "syllabus",
    "section": "Additional resources",
    "text": "Additional resources\nStudent mental health and wellness are of primary importance at Duke, and the university offers resources to support students in managing daily stress and self-care. Duke offers several resources for students to seek assistance on coursework and to nurture daily habits that support overall well-being, some of which are listed below\n\nThe Academic Resource Center: (919) 684-5917, theARC@duke.edu, or arc.duke.edu. The Academic Resource Center (the ARC) offers services to support students academically during their undergraduate careers at Duke. The ARC can provide support with time management, academic skills and strategies, course-specific tutoring, and more. ARC services are available free to any Duke undergraduate student, studying any discipline.\nDuWell: (919) 681-8421, provides Moments of Mindfulness (stress management and resilience building) and meditation programming (Koru workshop) to assist students in developing a daily emotional well-being practice. To see schedules for programs please see https://studentaffairs.duke.edu/duwell. All are welcome and no experience necessary.\n\nIf your mental health concerns and/or stressful events negatively affect your daily emotional state, academic performance, or ability to participate in your daily activities, many resources are available to help you through difficult times. Duke encourages all students to access these resources.\n\nDukeReach. Provides comprehensive outreach services to identify and support students in managing all aspects of well-being. If you have concerns about a student‚Äôs behavior or health visit the website for resources and assistance: https://students.duke.edu/wellness/dukereach/\nCounseling and Psychological Services (CAPS). CAPS services include individual and group counseling services, psychiatric services, and workshops. To initiate services, walk-in/call-in 9-4 M,W,Th,F and 9-6 Tuesdays. CAPS also provides referral to off- campus resources for specialized care.\n\n660-1000 or https://students.duke.edu/wellness/caps/\n\nTimelyCare (formerly known as Blue Devils Care). An online platform that is a convenient, confidential, and free way for Duke students to receive 24/7 mental health support through TalkNow and scheduled counseling. bluedevilscare.duke.edu"
  },
  {
    "objectID": "labs/lab1.html",
    "href": "labs/lab1.html",
    "title": "Lab 1: if it‚Äôs a function, fix it",
    "section": "",
    "text": "By the end of the lab, you will‚Ä¶"
  },
  {
    "objectID": "labs/lab1.html#log-in-to-rstudio",
    "href": "labs/lab1.html#log-in-to-rstudio",
    "title": "Lab 1: Hello R; hi git",
    "section": "Log in to RStudio",
    "text": "Log in to RStudio\n\nGo to https://cmgr.oit.duke.edu/containers and login with your Duke NetID and Password.\nClick STA198-199 to log into the Docker container. You should now see the RStudio environment.\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you haven‚Äôt yet done so, you will need to reserve a container for STA323 first."
  },
  {
    "objectID": "labs/lab1.html#set-up-your-ssh-key",
    "href": "labs/lab1.html#set-up-your-ssh-key",
    "title": "Lab 1: Hello R; hi git",
    "section": "Set up your SSH key",
    "text": "Set up your SSH key\nYou will authenticate GitHub using SSH. Below are an outline of the authentication steps; you are encouraged to follow along as your TA demonstrates the steps.\n\n\n\n\n\n\nNote\n\n\n\nYou only need to do this authentication process one time on a single system.\n\n\n\nType credentials::ssh_setup_github() into your console.\nR will ask ‚ÄúNo SSH key found. Generate one now?‚Äù You should click 1 for yes.\nYou will generate a key. It will begin with ‚Äússh-rsa‚Ä¶.‚Äù R will then ask ‚ÄúWould you like to open a browser now?‚Äù You should click 1 for yes.\nYou may be asked to provide your GitHub username and password to log into GitHub. After entering this information, you should paste the key in and give it a name. You might name it in a way that indicates where the key will be used, e.g., sta199).\n\nYou can find more detailed instructions here if you‚Äôre interested."
  },
  {
    "objectID": "labs/lab1.html#configure-git",
    "href": "labs/lab1.html#configure-git",
    "title": "Lab 1: Hello R; hi git",
    "section": "Configure Git",
    "text": "Configure Git\nThere is one more thing we need to do before getting started on the assignment. Specifically, we need to configure your git so that RStudio can communicate with GitHub. This requires two pieces of information: your name and email address.\nTo do so, you will use the use_git_config() function from the usethis package. (And we also need to install a package called gert just for this step.)\nType the following lines of code in the console in RStudio filling in your name and the email address associated with your GitHub account.\n\ndevtools::install_github(\"r-lib/gert\")\n\nDownloading GitHub repo r-lib/gert@HEAD\n\n\n\n* checking for file ‚Äò/private/var/folders/36/9fvw0zp94f7382yggl_jvx5w0000gn/T/RtmpTHnYj6/remotes41fc39fb9922/r-lib-gert-a1ccebd/DESCRIPTION‚Äô ... OK\n* preparing ‚Äògert‚Äô:\n* checking DESCRIPTION meta-information ... OK\n* cleaning src\n* running ‚Äòcleanup‚Äô\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building ‚Äògert_1.9.2.tar.gz‚Äô\n\n\nWarning in i.p(...): installation of package '/var/folders/\n36/9fvw0zp94f7382yggl_jvx5w0000gn/T//RtmpTHnYj6/file41fc479e6066/\ngert_1.9.2.tar.gz' had non-zero exit status\n\nusethis::use_git_config(\n  user.name = \"Your name\", \n  user.email = \"Email associated with your GitHub account\"\n  )\n\nFor example, mine would be\n\ndevtools::install_github(\"r-lib/gert\")\n\nDownloading GitHub repo r-lib/gert@HEAD\n\n\n\n* checking for file ‚Äò/private/var/folders/36/9fvw0zp94f7382yggl_jvx5w0000gn/T/RtmpTHnYj6/remotes41fc8c916c2/r-lib-gert-a1ccebd/DESCRIPTION‚Äô ... OK\n* preparing ‚Äògert‚Äô:\n* checking DESCRIPTION meta-information ... OK\n* cleaning src\n* running ‚Äòcleanup‚Äô\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building ‚Äògert_1.9.2.tar.gz‚Äô\n\n\nWarning in i.p(...): installation of package '/var/folders/\n36/9fvw0zp94f7382yggl_jvx5w0000gn/T//RtmpTHnYj6/file41fc49f51f0f/\ngert_1.9.2.tar.gz' had non-zero exit status\n\nusethis::use_git_config(\n  user.name = \"Alexander Fisher\", \n  user.email = \"alexander.fisher@duke.edu\"\n  )\n\nYou are now ready interact with GitHub via RStudio!"
  },
  {
    "objectID": "labs/lab1.html#clone-the-repo-start-new-rstudio-project",
    "href": "labs/lab1.html#clone-the-repo-start-new-rstudio-project",
    "title": "Lab 1: Hello R; hi git",
    "section": "Clone the repo & start new RStudio project",
    "text": "Clone the repo & start new RStudio project\n\nGo to the course organization at github.com/sta199-sp23-1 organization on GitHub. Click on the repo with the prefix lab-0. It contains the starter documents you need to complete the lab.\nClick on the green CODE button, select Use SSH (this might already be selected by default, and if it is, you‚Äôll see the text Clone with SSH). Click on the clipboard icon to copy the repo URL.\nIn RStudio, go to File ‚ûõ New Project ‚ûõVersion Control ‚ûõ Git.\nCopy and paste the URL of your assignment repo into the dialog box Repository URL. Again, please make sure to have SSH highlighted under Clone when you copy the address.\nClick Create Project, and the files from your GitHub repo will be displayed in the Files pane in RStudio.\nClick lab-0-datasaurus.qmd to open the template Quarto file. This is where you will write up your code and narrative for the lab."
  },
  {
    "objectID": "labs/lab1.html#r-and-r-studio",
    "href": "labs/lab1.html#r-and-r-studio",
    "title": "Lab 1: Hello R; hi git",
    "section": "R and R Studio",
    "text": "R and R Studio\nBelow are the components of the RStudio IDE.\n\nBelow are the components of a Quarto (.qmd) file."
  },
  {
    "objectID": "labs/lab1.html#yaml",
    "href": "labs/lab1.html#yaml",
    "title": "Lab 1: Hello R; hi git",
    "section": "YAML",
    "text": "YAML\nThe top portion of your R Markdown file (between the three dashed lines) is called YAML. It stands for ‚ÄúYAML Ain‚Äôt Markup Language‚Äù. It is a human friendly data serialization standard for all programming languages. All you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.\n\n\n\n\n\n\nImportant\n\n\n\nOpen the Quarto (.qmd) file in your project, change the author name to your name, and render the document. Examine the rendered document."
  },
  {
    "objectID": "labs/lab1.html#committing-changes",
    "href": "labs/lab1.html#committing-changes",
    "title": "Lab 1: Hello R; hi git",
    "section": "Committing changes",
    "text": "Committing changes\nNow, go to the Git pane in your RStudio instance. This will be in the top right hand corner in a separate tab.\nIf you have made changes to your Quarto (.qmd) file, you should see it listed here. Click on it to select it in this list and then click on Diff. This shows you the difference between the last committed state of the document and its current state including changes. You should see deletions in red and additions in green.\nIf you‚Äôre happy with these changes, we‚Äôll prepare the changes to be pushed to your remote repository. First, stage your changes by checking the appropriate box on the files you want to prepare. Next, write a meaningful commit message (for instance, ‚Äúupdated author name‚Äù) in the Commit message box. Finally, click Commit. Note that every commit needs to have a commit message associated with it.\nYou don‚Äôt have to commit after every change, as this would get quite tedious. You should commit states that are meaningful to you for inspection, comparison, or restoration.\nIn the first few assignments we will tell you exactly when to commit and in some cases, what commit message to use. As the semester progresses we will let you make these decisions.\nNow let‚Äôs make sure all the changes went to GitHub. Go to your GitHub repo and refresh the page. You should see your commit message next to the updated files. If you see this, all your changes are on GitHub and you‚Äôre good to go!"
  },
  {
    "objectID": "labs/lab1.html#push-changes",
    "href": "labs/lab1.html#push-changes",
    "title": "Lab 1: Hello R; hi git",
    "section": "Push changes",
    "text": "Push changes\nNow that you have made an update and committed this change, it‚Äôs time to push these changes to your repo on GitHub.\nIn order to push your changes to GitHub, you must have staged your commit to be pushed. click on Push."
  },
  {
    "objectID": "labs/lab0.html",
    "href": "labs/lab0.html",
    "title": "Lab 0: Hello R; hi git.",
    "section": "",
    "text": "This lab will introduce you to the course computing workflow. The main goal is to get you setup with git in GitHub, link GitHub with RStudio and play around with a few basics.\nBy the end of the lab, you will‚Ä¶"
  },
  {
    "objectID": "labs/lab0.html#log-in-to-rstudio",
    "href": "labs/lab0.html#log-in-to-rstudio",
    "title": "Lab 0: Hello R; hi git.",
    "section": "Log in to RStudio",
    "text": "Log in to RStudio\n\nGo to https://cmgr.oit.duke.edu/containers and login with your Duke NetID and Password.\nClick STA323 to log into the Docker container. You should now see the RStudio environment.\n\n\n\n\n\n\n\nWarning\n\n\n\nIf you haven‚Äôt yet done so, you will need to reserve a container for STA323 first."
  },
  {
    "objectID": "labs/lab0.html#set-up-your-ssh-key",
    "href": "labs/lab0.html#set-up-your-ssh-key",
    "title": "Lab 0: Hello R; hi git.",
    "section": "Set up your SSH key",
    "text": "Set up your SSH key\nYou will authenticate GitHub using SSH. Below are an outline of the authentication steps; you are encouraged to follow along as your TA demonstrates the steps.\n\n\n\n\n\n\nNote\n\n\n\nYou only need to do this authentication process one time on a single system.\n\n\n\nType credentials::ssh_setup_github() into your console.\nR will ask ‚ÄúNo SSH key found. Generate one now?‚Äù You should click 1 for yes.\nYou will generate a key. It will begin with ‚Äússh-rsa‚Ä¶.‚Äù R will then ask ‚ÄúWould you like to open a browser now?‚Äù You should click 1 for yes.\nYou may be asked to provide your GitHub username and password to log into GitHub. After entering this information, you should paste the key in and give it a name. You might name it in a way that indicates where the key will be used, e.g., sta323).\n\nYou can find more detailed instructions here if you‚Äôre interested."
  },
  {
    "objectID": "labs/lab0.html#configure-git",
    "href": "labs/lab0.html#configure-git",
    "title": "Lab 0: Hello R; hi git.",
    "section": "Configure Git",
    "text": "Configure Git\nThere is one more thing we need to do before getting started on the assignment. Specifically, we need to configure your git so that RStudio can communicate with GitHub. This requires two pieces of information: your name and email address.\nTo do so, you will use the use_git_config() function from the usethis package. (And we also need to install a package called gert just for this step.)\nType the following lines of code in the console in RStudio filling in your name and the email address associated with your GitHub account.\n\ndevtools::install_github(\"r-lib/gert\")\n\nusethis::use_git_config(\n  user.name = \"Your name\", \n  user.email = \"Email associated with your GitHub account\"\n  )\n\nFor example, mine would be\n\ndevtools::install_github(\"r-lib/gert\")\n\nusethis::use_git_config(\n  user.name = \"Alexander Fisher\", \n  user.email = \"alexander.fisher@duke.edu\"\n  )\n\nYou are now ready interact with GitHub via RStudio!"
  },
  {
    "objectID": "labs/lab0.html#clone-the-repo-start-new-rstudio-project",
    "href": "labs/lab0.html#clone-the-repo-start-new-rstudio-project",
    "title": "Lab 0: Hello R; hi git.",
    "section": "Clone the repo & start new RStudio project",
    "text": "Clone the repo & start new RStudio project\n\nGo to the course organization at github.com/sta323-sp23 organization on GitHub. Click on the repo with the prefix lab-0. It contains the starter documents you need to complete the lab.\nClick on the green CODE button, select Use SSH (this might already be selected by default, and if it is, you‚Äôll see the text Clone with SSH). Click on the clipboard icon to copy the repo URL.\nIn RStudio, go to Project in the upper-right. Click New Project -> Version Control -> Git and paste the SSH URL under ‚ÄúRepository URL‚Äù. Select Create Project.\nThe R Project will open by default. In the future, you can open the project manually by clicking in the upper right, Open Project, and navigate to lab-0.Rproj from the drop-down menu.\nClick lab-0.qmd to open the template Quarto file. This is where you will write up your code and narrative for the lab."
  },
  {
    "objectID": "labs/lab0.html#r-and-r-studio",
    "href": "labs/lab0.html#r-and-r-studio",
    "title": "Lab 0: Hello R; hi git.",
    "section": "R and R Studio",
    "text": "R and R Studio\nBelow are the components of the RStudio IDE.\n\nBelow are the components of a Quarto (.qmd) file."
  },
  {
    "objectID": "labs/lab0.html#yaml",
    "href": "labs/lab0.html#yaml",
    "title": "Lab 0: Hello R; hi git.",
    "section": "YAML",
    "text": "YAML\nThe top portion of your R Markdown file (between the three dashed lines) is called YAML. It stands for ‚ÄúYAML Ain‚Äôt Markup Language‚Äù. It is a human friendly data serialization standard for all programming languages. All you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.\n\n\n\n\n\n\nImportant\n\n\n\nOpen the Quarto (.qmd) file in your project, change the author name to your name, and render the document. Examine the rendered document."
  },
  {
    "objectID": "labs/lab0.html#committing-changes",
    "href": "labs/lab0.html#committing-changes",
    "title": "Lab 0: Hello R; hi git.",
    "section": "Committing changes",
    "text": "Committing changes\n\nIn the Terminal pane of RStudio, type pwd to ‚Äúprint working directory‚Äù, i.e.¬†show where in the filesystem you are. You should see something like /home/guest/lab-0-username. Next type ls to list files in the directory. You should see something similar:\n\nlab-0.Rproj  README.md lab-0.qmd\n\nType git status and press enter. You should see which files have been edited (highlighted in red). lab-0.qmd should be in red since you updated the YAML.\nType git add lab-0.qmd. This stages the file to be committed. In the future you can add several files to the same commit by repeating this step. You can type git status again to see the staged file (in green). Next type git commit -m \"updating YAML\". This will commit the file with the message between quotes.\nFinally git push to push the changes to the remote repository.\nNow let‚Äôs make sure all the changes went to GitHub. Go to your GitHub repo and refresh the page. You should see your commit message next to the updated files. If you see this, all your changes are on GitHub and you‚Äôre good to go!"
  },
  {
    "objectID": "labs/lab0.html#push-changes",
    "href": "labs/lab0.html#push-changes",
    "title": "Lab 0: Hello R; hi git.",
    "section": "Push changes",
    "text": "Push changes\nNow that you have made an update and committed this change, it‚Äôs time to push these changes to your repo on GitHub.\nIn order to push your changes to GitHub, you must have staged your commit to be pushed. click on Push."
  },
  {
    "objectID": "labs/lab0.html#exercises",
    "href": "labs/lab0.html#exercises",
    "title": "Lab 0: Hello R; hi git.",
    "section": "Exercises",
    "text": "Exercises\nFor all exercises, you should respond in the space provided in the template lab-0.qmd and show all your work. This lab-0 just has a few warm-up exercises to introduce you to some computing phenomena and general ideas.\n\nFloating point algebra.\n\nDo floating point numbers obey the rules of algebra? For example, one of the rules of algebra is additive association. (x + y) + z == x + (y + z). Check if this is true in R using \\(x = 0.1\\), \\(y = 0.1\\) and \\(z = 1\\). Explain what you find.\n\nAdditional examples of floating point pecularity are provided below.\n\n# example 1\n0.2 == 0.6 / 3\n# example 2\npoint3 <- c(0.3, 0.4 - 0.1, 0.5 - 0.2, 0.6 - 0.3, 0.7 - 0.4)\npoint3\npoint3 == 0.3\n\nTo work around these issues, you could use all.equal() for checking the equality of two double quantities in R. What does all.equal() do?\n\n# example 1, all.equal()\nall.equal(0.2, 0.6 / 3)\n# example 2, all.equal()\npoint3 <- c(0.3, 0.4 - 0.1, 0.5 - 0.2, 0.6 - 0.3, 0.7 - 0.4)\npoint3\nall.equal(point3, rep(.3, length(point3)))\n\n\nInefficient math.\n\nYou‚Äôve collected 10 million observations in a vector called x and you summarize the mean of your observations:\n\n\nset.seed(2)\nn = 10000000\nx = rnorm(n, 1, 10)\nxbar = mean(x)\n\nA new observation comes in new_x = 15.0.\n\nnew_x = 15\nupdated_x = c(x, new_x)\n\nAlthough it won‚Äôt change much, you want to recompute the mean with this new data point. You could recompute the mean by re-running mean() on updated_x or you could observe that:\n\\[\n\\bar{x}_{n+1} = \\frac{1}{n+1}(n \\cdot\\bar{x}_n + x_{n+1})\n\\]\nCompare the time each method takes by surrounding each method with system.time({}).\n\n# method 1\nmean(updated_x)\n\n\n#method 2\n## program the equation above here and then time it with system.time({})\n\n\nInefficient code.\n\nTo quantify the inefficiency of a poorly written for loop, time both the code blocks below. Experiment with different values of n.¬†What do you observe?\n\n\n# method 1\nn <- 10\nx <- 1\nfor (i in seq_len(n)) {\n  x <- c(x, sqrt(x[i] * i))\n}\n\n\n# method 2\nn <- 10\nx <- rep(1, n + 1)\nfor (i in seq_len(n)) {\n  x[i + 1] <- sqrt(x[i] * i)\n}\n\n\nVector norms.\n\nIf \\(x\\) and \\(y\\) are scalar numbers, \\(x<y\\) makes sense. How do you compare the size of two different vectors \\(x\\) and \\(y\\)? A very typical way is the vector norm. The p-norm of vector \\(x\\) of length \\(n\\) is:\n\\[\n||x||_p = \\left( \\sum_{i=1}^n |x_i |^p \\right)^{1/p}\n\\]\nfor \\(p = 1, 2, ...\\). For example, if \\(p = 2\\) we have the Euclidean norm, also known as the \\(l_2\\) (read ‚ÄúL-2‚Äù) norm.\n\nVerify that the Euclidean norm of \\(x = \\left( 1, 2.5, -6.3 \\right)\\) is 6.851277 in R. You can compute the \\(l_1\\) and \\(l_2\\) norms in R using norm(x, type = \"1\") and norm(x, type = \"2\") respectively. Read the documentation, ?norm() and you will see you need to make sure the argument x is a matrix.\nCompare \\(||x||_2\\) and \\(||y||_2\\) where \\(y = \\left(0.8, 2.4, -6.4 \\right)\\).\nCompare \\(||x||_1\\) and \\(||y||_1\\), where again \\(x\\) and \\(y\\) are the vectors given above. Which is larger?"
  },
  {
    "objectID": "slides/01-welcome.html#meet-the-professor",
    "href": "slides/01-welcome.html#meet-the-professor",
    "title": "Welcome to STA 323",
    "section": "Meet the professor",
    "text": "Meet the professor\n\n\n\n\n\n\nAlexander Fisher\nalexander.fisher@duke.edu\nOffice hours: Wednesday 1:30-3:30pm in Old Chem 207\nA little bit about my research‚Ä¶"
  },
  {
    "objectID": "slides/01-welcome.html#why-data-science",
    "href": "slides/01-welcome.html#why-data-science",
    "title": "Welcome to STA 323",
    "section": "Why data science?",
    "text": "Why data science?\nData science turns data into knowledge.\n\nExamples"
  },
  {
    "objectID": "slides/01-welcome.html#course-overview",
    "href": "slides/01-welcome.html#course-overview",
    "title": "Welcome to STA 323",
    "section": "Course overview",
    "text": "Course overview"
  },
  {
    "objectID": "slides/01-welcome.html#learning-objectives",
    "href": "slides/01-welcome.html#learning-objectives",
    "title": "Welcome to STA 323",
    "section": "Learning objectives",
    "text": "Learning objectives\nBy the end of this course you will be able to‚Ä¶\n\nwrite efficient R code to (1) wrangle, explore and analyze data, (2) program algorithms to make inference under a variety of data generative models\nconduct independent data analysis and subsequently write and present results effectively"
  },
  {
    "objectID": "slides/01-welcome.html#assessments",
    "href": "slides/01-welcome.html#assessments",
    "title": "Welcome to STA 323",
    "section": "Assessments",
    "text": "Assessments\n\n\n\nAssignment\nDescription\n\n\n\n\nLabs (45%)\nBiweekly lab assignments.\n\n\nExams (35%)\nTwo take-home open-notes exams.\n\n\nFinal Project (15%)\nWritten report and presentation.\n\n\nQuizzes (5%)\nIn-class pop quizzes."
  },
  {
    "objectID": "slides/01-welcome.html#community",
    "href": "slides/01-welcome.html#community",
    "title": "Welcome to STA 323",
    "section": "Community",
    "text": "Community\nUphold the Duke Community Standard:\n\nI will not lie, cheat, or steal in my academic endeavors;\nI will conduct myself honorably in all my endeavors; and\nI will act if the Standard is compromised.\n\nAny violations in academic honesty standards as outlined in the Duke Community Standard and those specific to this course will automatically result in a 0 for the assignment and will be reported to the Office of Student Conduct for further action.\nLearning environment\n\nCreate a learning environment that is welcoming, inclusive, and accessible to everyone.\nRespect and honor each other.\n\nTeam work policy\nThe final project and several labs will be completed in teams. All group members are expected to participate equally. Commit history may be used to give individual team members different grades. Your grade may differ from the rest of your group."
  },
  {
    "objectID": "slides/01-welcome.html#late-policy",
    "href": "slides/01-welcome.html#late-policy",
    "title": "Welcome to STA 323",
    "section": "Late policy",
    "text": "Late policy\n\nHomeworks and labs can be turned in within 48 hours of the deadline for grade penalty (5% off per day).\nExams and the final project cannot be turned in late and can only be excused under exceptional circumstances.\nThe Duke policy for illness requires a short-term illness report or a letter from the Dean; except in emergencies, all other absenteeism must be approved in advance (e.g., an athlete who must miss class may be excused by prior arrangement for specific days). For emergencies, email notification is needed at the first reasonable time.\nLast minute coding/rendering issues will not be granted extensions."
  },
  {
    "objectID": "slides/01-welcome.html#course-toolkit",
    "href": "slides/01-welcome.html#course-toolkit",
    "title": "Welcome to STA 323",
    "section": "Course toolkit",
    "text": "Course toolkit\n\n\n\nResource\nDescription\n\n\n\n\ncourse website\ncourse notes, deadlines, assignments, office hours, syllabus\n\n\nSakai\nclass recordings, solutions and announcements\n\n\ncourse organization\nassignments, collaboration\n\n\nslack\nprimary communication\n\n\nRStudio containers*\nonline coding platform\n\n\n\nYou are welcome to install R and RStudio locally on your computer. If working locally you should make sure that your environment meets the following requirements:\n\nlatest R version\nlatest RStudio\nworking git installation\nability to create ssh keys (for GitHub authentication)\nAll R packages updated to their latest version from CRAN"
  },
  {
    "objectID": "slides/01-welcome.html#communication-and-missing-class",
    "href": "slides/01-welcome.html#communication-and-missing-class",
    "title": "Welcome to STA 323",
    "section": "Communication and missing class",
    "text": "Communication and missing class\nIf you have questions about homework/lab exercises, debugging, or any question about course materials\n\ncome to office hours\npost to a public channel in slack.\n\n\n\n\n\n\n\n\nWarning\n\n\nThe teaching team will not debug via email.\n\n\n\n\n\nWhen you miss a class:\n\nwatch the recorded lecture on Sakai\ncome to office hours or post in a public channel of slack if you have questions"
  },
  {
    "objectID": "slides/01-welcome.html#jump-in",
    "href": "slides/01-welcome.html#jump-in",
    "title": "Welcome to STA 323",
    "section": "Jump in",
    "text": "Jump in\n\nCheck your email / Sakai announcements for slack invite.\nPost on slack\nCreate a GitHub account\nTake this survey\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/01-welcome.html#what-is-statistical-computing",
    "href": "slides/01-welcome.html#what-is-statistical-computing",
    "title": "Welcome to STA 323",
    "section": "What is statistical computing?",
    "text": "What is statistical computing?\nBroadly, it‚Äôs turning data into knowledge using the computer.\n\nExamples of things we‚Äôll do in this course:\n\nScrape data off the web\nInteract with databases\nExtract useful parts of massive datasets in the blink of an eye using regular expressions\nOptimize code in R\nModel data with complicated likelihood functions and then write algorithms to maximize the likelihood\nBuild shiny web apps"
  },
  {
    "objectID": "slides/01-welcome.html#beginnings",
    "href": "slides/01-welcome.html#beginnings",
    "title": "Welcome to STA 323",
    "section": "Beginnings",
    "text": "Beginnings\n\nCheck your email / Sakai announcements for slack invite.\nPost on slack\nCreate a GitHub account (unless you already have one) on https://github.com/\n\none day you might want to show off your work, so choose a username you will be proud to show to a future employer.\n\nTell me your username by taking this survey. This is essential to receive credit on future assignments\n\n\n\n\n04:00"
  },
  {
    "objectID": "slides/01-welcome.html#sharing-reusing-code",
    "href": "slides/01-welcome.html#sharing-reusing-code",
    "title": "Welcome to STA 323",
    "section": "Sharing / reusing code",
    "text": "Sharing / reusing code\n\nUnless explicitly stated otherwise, this course‚Äôs policy is that you may make use of any online resources (e.g.¬†Google, existing StackOverflow answers, etc.) but you must explicitly cite where you obtained any code you directly use or use as inspiration in your solution(s).\nAny recycled code that is discovered and is not explicitly cited will be treated as plagiarism, regardless of source.\nNarrative (non-code solutions) should always be entirely your own.\n\nLate policy\n\nHomeworks and labs can be turned in within 48 hours of the deadline for grade penalty (5% off per day).\nExams and the final project cannot be turned in late and can only be excused under exceptional circumstances.\nThe Duke policy for illness requires a short-term illness report or a letter from the Dean; except in emergencies, all other absenteeism must be approved in advance (e.g., an athlete who must miss class may be excused by prior arrangement for specific days). For emergencies, email notification is needed at the first reasonable time.\nLast minute coding/rendering issues will not be granted extensions."
  },
  {
    "objectID": "slides/01-welcome.html#section",
    "href": "slides/01-welcome.html#section",
    "title": "Welcome to STA 323",
    "section": "",
    "text": "{fig.align = ‚Äúcenter‚Äù}"
  },
  {
    "objectID": "slides/01-welcome.html#vectors",
    "href": "slides/01-welcome.html#vectors",
    "title": "Welcome to STA 323",
    "section": "Vectors",
    "text": "Vectors\nThe fundamental building block of data in R is a vector (collections of related values, objects, other data structures, etc).\nR has two types of vectors:\n\natomic vectors\n\nhomogeneous collections of the same type (e.g.¬†all logical values, all numbers, or all character strings).\n\ngeneric vectors\n\nheterogeneous collections of any type of R object, even other lists (meaning they can have a hierarchical/tree-like structure).\n\n\nI will use the term component or element when referring to a value inside a vector."
  },
  {
    "objectID": "slides/01-welcome.html#vector-relationships",
    "href": "slides/01-welcome.html#vector-relationships",
    "title": "Welcome to STA 323",
    "section": "Vector relationships",
    "text": "Vector relationships\n\nSource: https://r4ds.had.co.nz/vectors.html"
  },
  {
    "objectID": "slides/01-welcome.html#atomic-vectors",
    "href": "slides/01-welcome.html#atomic-vectors",
    "title": "Welcome to STA 323",
    "section": "Atomic vectors",
    "text": "Atomic vectors\nR has six atomic vector types:\nlogical, integer, double, character, complex, raw\nIn this course we will mostly work with the first four. You will rarely work with the last two types - complex and raw.\n\n\nx <- c(T, F, TRUE, FALSE)\ntypeof(x)\n\n[1] \"logical\"\n\n\n\ny <- c(\"a\", \"few\", \"more\", \"slides\")\ntypeof(y)\n\n[1] \"character\"\n\n\n\n\n\n\n\n\nNote\n\n\nc() is a function that combines arguments to form a vector. It‚Äôs a quick way to make small vectors for testing and experimentation. Later, we‚Äôll see better ways to create vectors."
  },
  {
    "objectID": "slides/01-welcome.html#coercion-hierarchy",
    "href": "slides/01-welcome.html#coercion-hierarchy",
    "title": "Welcome to STA 323",
    "section": "Coercion hierarchy",
    "text": "Coercion hierarchy\nIf you try to combine components of different types into a single atomic vector, R will try to coerce all elements so they can be represented as the simplest type. The ordering is logical < integer < double < character, where logical is considered the ‚Äúsimplest‚Äù.\n\nx <- c(T, 5, F, 0, 1)\ny <- c(\"a\", 1, T)\nz <- c(3.0, 4L, 0L)\n\n\n\n\nx\n\n[1] 1 5 0 0 1\n\ny\n\n[1] \"a\"    \"1\"    \"TRUE\"\n\nz\n\n[1] 3 4 0\n\n\n\n\ntypeof(x)\n\n[1] \"double\"\n\ntypeof(y)\n\n[1] \"character\"\n\ntypeof(z)\n\n[1] \"double\""
  },
  {
    "objectID": "slides/01-welcome.html#logical-operations",
    "href": "slides/01-welcome.html#logical-operations",
    "title": "Welcome to STA 323",
    "section": "Logical operations",
    "text": "Logical operations\nBoolean operations\n\n\n\nOperator\nDefinition\nVectorized?\n\n\n\n\nx | y\nor\nyes\n\n\nx & y\nand\nyes\n\n\n!x\nnot\nyes\n\n\nx || y\nor\nno\n\n\nx && y\nand\nno\n\n\nxor(x,y)\nexclusive or\nyes\n\n\n\nComparison operations\n\n\n\nOperator\nDefinition\nVectorized?\n\n\n\n\nx < y\nless than\nyes\n\n\nx <= y\nless than or equal to\nyes\n\n\nx != y\nnot equal to\nyes\n\n\nx == y\nequal to\nyes\n\n\nx %in% y\nis x contained in y\nyes (over x)"
  },
  {
    "objectID": "slides/01-welcome.html#length-coercion-vector-recycling",
    "href": "slides/01-welcome.html#length-coercion-vector-recycling",
    "title": "Welcome to STA 323",
    "section": "Length coercion (vector recycling)",
    "text": "Length coercion (vector recycling)\nThe shorter of two atomic vectors in an operation is recycled until it is the same length as the longer atomic vector.\n\nx <- c(2, 4, 6)\ny <- c(1, 1, 1, 2, 2)\n\n\nx > y\n\n[1]  TRUE  TRUE  TRUE FALSE  TRUE\n\n\n\nx == y\n\n[1] FALSE FALSE FALSE  TRUE FALSE\n\n\n\n10 / x\n\n[1] 5.000000 2.500000 1.666667"
  },
  {
    "objectID": "slides/01-welcome.html#exercise",
    "href": "slides/01-welcome.html#exercise",
    "title": "Welcome to STA 323",
    "section": "Exercise",
    "text": "Exercise\nWhat do each of the following return? Run the code to check your answer.\n\na = c(1,4)\nb = c(1,2,3,5)\na + b\n\n\nx = c(1,2)\ny = c(5,10,15,20)\nz = c(2,4)\n(x * y) / z\n\n\nx = c(1, TRUE, 0)\ntypeof(x)\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/01-welcome.html#exercises",
    "href": "slides/01-welcome.html#exercises",
    "title": "Welcome to STA 323",
    "section": "Exercises",
    "text": "Exercises\nWhat do each of the following return? Run the code to check your answer.\nExercise 1.\n\na = c(1,4)\nb = c(1,2,3,5)\na + b\n\nExercise 2.\n\nx = c(1,2)\ny = c(5,10,15,20)\nz = c(2,4)\n(x * y) / z\n\nExercise 3.\n\nx = c(1, TRUE, 0)\ntypeof(x)\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "labs/lab0.html#submitting-your-lab",
    "href": "labs/lab0.html#submitting-your-lab",
    "title": "Lab 0: Hello R; hi git.",
    "section": "Submitting your lab",
    "text": "Submitting your lab\nFor future lab assignments (this one isn‚Äôt graded), you will submit your lab assignment by simply committing and pushing your completed lab-x.qmd to your GitHub repo. Your most recent commit 48 hours after the assignment deadline will be graded, and any applicable late penalty will be applied (see the syllabus)."
  },
  {
    "objectID": "slides/lab0-welcome.html#introductions",
    "href": "slides/lab0-welcome.html#introductions",
    "title": "Welcome to Lab",
    "section": "Introductions",
    "text": "Introductions\n\n\n\n\nMeet the TA!\nIntroduce yourself (icebreaker)\nFollow along these slides on the course website (under slides): sta323-sp23.github.io\nBookmark this! It‚Äôs the course website."
  },
  {
    "objectID": "slides/lab0-welcome.html#what-to-expect-in-labs",
    "href": "slides/lab0-welcome.html#what-to-expect-in-labs",
    "title": "Welcome to Lab",
    "section": "What to expect in labs",
    "text": "What to expect in labs\n\nIntroduce lab assignment (5-10 minutes, longer today)\nWork on the lab assignment (you can find it on the course website). You will work with others but your submission must be your own for the first few labs.\nTypically you won‚Äôt finish labs in-class and they will be due 1 week after they are released."
  },
  {
    "objectID": "slides/lab0-welcome.html#tips",
    "href": "slides/lab0-welcome.html#tips",
    "title": "Welcome to Lab",
    "section": "Tips",
    "text": "Tips\n\nRead all instructions on the lab.\nOne work strategy is to get through portions that you think will be most challenging (which initially might be the coding component) during lab when we can help you on the spot and leave the narrative writing until later.\nMake use of office hours. Before you need help!"
  },
  {
    "objectID": "slides/lab0-welcome.html#beginnings",
    "href": "slides/lab0-welcome.html#beginnings",
    "title": "Welcome to Lab",
    "section": "Beginnings",
    "text": "Beginnings\n\nIf you correctly followed the instructions from lecture then you should be a member of the course organization and have a repo lab-0-username in the course organization.\nIf you missed the first lecture, take the survey from the first lecture, found here and tell me your GitHub username so I can invite you to the organization and manually create a repo for you."
  },
  {
    "objectID": "slides/lab0-welcome.html#demo-setting-up",
    "href": "slides/lab0-welcome.html#demo-setting-up",
    "title": "Welcome to Lab",
    "section": "Demo: setting up",
    "text": "Demo: setting up\nNow that your lab repo is created, let‚Äôs setup git to work within RStudio.\nTo begin, open\n\nthe lab instructions here and\nthe RStudio containers here\nyour repo (that contains your starting files for the lab) here\n\nFollow the instructions in the lab as I demo.\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "labs/lab0.html#style-guidelines",
    "href": "labs/lab0.html#style-guidelines",
    "title": "Lab 0: Hello R; hi git.",
    "section": "Style guidelines",
    "text": "Style guidelines\nAll assignments in this course must employ proper coding style, as outlined below:\n\nAll code should obey the 80 character limit per line (i.e.¬†no code should run off the page when rendering or require scrolling). To enable a vertical line in the RStudio IDE that helps guide this, go to Tools > Global Options > Code > Display > Show margin > 80. This will enable a vertical line in your .qmd files that shows you where the 80 character cutoff is for code chunks. Instructions may vary slightly for local installs of RStudio.\nAll commas should be followed by a space.\nAll binary operators should be surrounded by space. For example x + y is appropriate. x+y is not.\nAll pipes %>% or |> as well as ggplot layers + should be followed by a new line.\nYou should be consistent with stylistic choices, e.g.¬†only use 1 of = vs <- and %>% vs |>\nYour name should be at the top (in the YAML) of each document under ‚Äúauthor:‚Äù\nAll code chunks should be named (with names that don‚Äôt have spaces, e.g.¬†ex-1, ex-2 etc.)\nFile names in your GitHub repo such as lab-0.qmd must not be changed and left as provided.\n\nIf you have any questions about style, please ask a member of the teaching team."
  },
  {
    "objectID": "slides/lec02.html#if-and-ifelse",
    "href": "slides/lec02.html#if-and-ifelse",
    "title": "Control flow, loops, and functions",
    "section": "if and ifelse",
    "text": "if and ifelse\n\nif (test) {\n  do stuff\n}\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec02.html#if",
    "href": "slides/lec02.html#if",
    "title": "Control flow, loops, and functions",
    "section": "if",
    "text": "if\n\nif (condition) {\n  do stuff # when condition is TRUE\n}\n\nExamples\n\nx = c(1,2,3)\nif (2 %in% x) {\n  print(\"2 is in x!\")\n}\n\n[1] \"2 is in x!\"\n\n\n\nif (5 %in% x) \n  print(\"5 is in x!\")\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec02.html#if-statements",
    "href": "slides/lec02.html#if-statements",
    "title": "Control flow, loops, and functions",
    "section": "if statements",
    "text": "if statements\n\nif (condition) {\n  do stuff # when condition is TRUE\n}\n\nExamples\n\nx = c(1,2,3)\nif (2 %in% x) {\n  print(\"2 is in x!\")\n}\n\n[1] \"2 is in x!\"\n\n\n\nif (-6) {\n  print(\"Other types are coerced to logical if possible.\")\n}\n\n[1] \"Other types are coerced to logical if possible.\"\n\n\n\nif (5 %in% x) \n  print(\"5 is in x!\")\n\n\nif the statement is FALSE, {the code} does not execute"
  },
  {
    "objectID": "slides/lec02.html#if-is-not-vectorized",
    "href": "slides/lec02.html#if-is-not-vectorized",
    "title": "Control flow, loops, and functions",
    "section": "if is not vectorized",
    "text": "if is not vectorized\nWhile many operators and functions in R are vectorized,\n\nx = c(1,2,3)\n\n\nexp(x)\n\n[1]  2.718282  7.389056 20.085537\n\nlog(x)\n\n[1] 0.0000000 0.6931472 1.0986123\n\nx + 2\n\n[1] 3 4 5\n\n\n\nif statements are not\n\n\n\nif (x == 1) {\n  print(\"x is 1!\")\n}\n\nWarning in if (x == 1) {: the condition has length > 1 and only the first\nelement will be used\n\n\n[1] \"x is 1!\""
  },
  {
    "objectID": "slides/lec02.html#collapsing-logical-vectors",
    "href": "slides/lec02.html#collapsing-logical-vectors",
    "title": "Control flow, loops, and functions",
    "section": "Collapsing logical vectors",
    "text": "Collapsing logical vectors\n\nx = c(1, 2, 3)\nx > 0\n\n[1] TRUE TRUE TRUE\n\n\nany() and all() can help us collapse this to a single argument (like ‚Äúor‚Äù/‚Äúand‚Äù logic)\n\nany(x > 0)\n\n[1] TRUE\n\nall(x > 0)\n\n[1] TRUE\n\n\n\n\nif (any(x > 0)) {\n  print(\"At least one element of x is greater than 0.\")\n}\n\n[1] \"At least one element of x is greater than 0.\""
  },
  {
    "objectID": "slides/lec02.html#else-if-else-and-ifelse",
    "href": "slides/lec02.html#else-if-else-and-ifelse",
    "title": "Control flow, loops, and functions",
    "section": "else if, else and ifelse",
    "text": "else if, else and ifelse\n\n\n\nx = 3\nif (x < 0) {\n  \"x is negative\"\n} else if (x > 0) {\n  \"x is positive\"\n} else {\n  \"x is zero\"\n}\n\n[1] \"x is positive\"\n\n\n\n\nx = 0\nif (x < 0) {\n  \"x is negative\"\n} else if (x > 0) {\n  \"x is positive\"\n} else {\n  \"x is zero\"\n}\n\n[1] \"x is zero\"\n\n\n\n\nx = -1\nifelse(x > 0,\n       \"positive\",\n       \"not positive\")\n\n[1] \"not positive\""
  },
  {
    "objectID": "slides/lec02.html#stop-and-stopifnot",
    "href": "slides/lec02.html#stop-and-stopifnot",
    "title": "Control flow, loops, and functions",
    "section": "stop and stopifnot",
    "text": "stop and stopifnot\nWe often need to validate user input and function arguments. If our validation fails, we want to report the error and stop execution.\n\nok = FALSE\n\n\nif (!ok)\n  stop(\"Things are not ok.\")\n\nError in eval(expr, envir, enclos): Things are not ok.\n\n\n\nstopifnot(ok)\n\nError: ok is not TRUE\n\n\n\n\n\n\n\n\nNote\n\n\nAn error (like the one generated by stop) will prevent a quarto document from rendering unless #| error: true is set for that code chunk"
  },
  {
    "objectID": "slides/lec02.html#placing-checkpoints",
    "href": "slides/lec02.html#placing-checkpoints",
    "title": "Control flow, loops, and functions",
    "section": "Placing checkpoints",
    "text": "Placing checkpoints\nAlways place checkpoints upstream (find errors as quickly as possible).\n\n\nBad checkpoint placement\n\nif (condition_one) {\n  ##\n  ## Do stuff\n  ##\n} else if (condition_two) {\n  ##\n  ## Do other stuff\n  ##\n} else if (condition_error) {\n  stop(\"Condition error occured\")\n}\n\n\nGood checkpoint placement\n\n# Do stuff better\nif (condition_error) {\n  stop(\"Condition error occured\")\n}\nif (condition_one) {\n  ##\n  ## Do stuff\n  ##\n} else if (condition_two) {\n  ##\n  ## Do other stuff\n  ##\n}"
  },
  {
    "objectID": "slides/lec02.html#exercise-1",
    "href": "slides/lec02.html#exercise-1",
    "title": "Control flow, loops, and functions",
    "section": "Exercise 1",
    "text": "Exercise 1\nConsider two vectors, x and y, each of length one. Write a set of conditionals that satisfy the following.\n\nIf x is positive and y is negative or y is positive and x is negative, print ‚Äúknits‚Äù.\nIf x divided by y is positive, print ‚Äústink‚Äù.\nStop execution if x or y are zero.\n\nTest your code with various x and y values. Where did you place the stop execution code?"
  },
  {
    "objectID": "slides/lec02.html#loop-types",
    "href": "slides/lec02.html#loop-types",
    "title": "Control flow, loops, and functions",
    "section": "Loop types",
    "text": "Loop types\nR supports three types of loops: for, while, and repeat.\n\nfor (item in vector) {\n##\n## Iterate this code\n##\n}\n\n\nwhile (we_have_a_true_condition) {\n##\n## Iterate this code\n##\n}\n\n\nrepeat {\n##\n## Iterate this code\n##\n}"
  },
  {
    "objectID": "slides/lec02.html#for-loops",
    "href": "slides/lec02.html#for-loops",
    "title": "Control flow, loops, and functions",
    "section": "for loops",
    "text": "for loops\nfor loops are used to iterate over items in a vector. They have the following basic form:\n\nfor (item in vector) perform_action\n\n\nfor (nakama in c(\"Luffy\", \"Nami\", \"Zoro\")) {\n  print(nakama)\n}\n\n[1] \"Luffy\"\n[1] \"Nami\"\n[1] \"Zoro\"\n\n\n\nfor (i in 1:4) {\n  log(i)\n}\n\n\nAutomatic printing is turned off in loops."
  },
  {
    "objectID": "slides/lec02.html#while-loops",
    "href": "slides/lec02.html#while-loops",
    "title": "Control flow, loops, and functions",
    "section": "while loops",
    "text": "while loops\nwhile loops interate until a condition is false\n\nsquares = rep(0, 5)\nsquares\n\n[1] 0 0 0 0 0\n\n\n\ni = 1\nwhile (i < 6) {\n  squares[i] = i^2\n  i = i + 1\n}\nsquares\n\n[1]  1  4  9 16 25"
  },
  {
    "objectID": "slides/lec02.html#repeat-loops",
    "href": "slides/lec02.html#repeat-loops",
    "title": "Control flow, loops, and functions",
    "section": "repeat loops",
    "text": "repeat loops\nrepeat loops repeatedly iterate code until a break is reached.\n\ni = 1\nsquares = rep(0, 5)\nrepeat {\nsquares[i] = i ^ 2\ni = i + 1\nif (i > 5) {break}\n}\nsquares\n\n[1]  1  4  9 16 25"
  },
  {
    "objectID": "slides/lec02.html#loop-keywords-next-and-break",
    "href": "slides/lec02.html#loop-keywords-next-and-break",
    "title": "Control flow, loops, and functions",
    "section": "loop keywords: next and break",
    "text": "loop keywords: next and break\n\nnext exits the current iteration and advances the looping index\nbreak exits the loop\nboth break andnext apply only to the innermost of nested loops.\n\n\nfor (i in 1:10) {\n  if (i %% 2 == 0) {next}\n  print(paste(\"Number\", i, \"is odd.\"))\n  if (i %% 7 == 0) {break}\n  }\n\n[1] \"Number 1 is odd.\"\n[1] \"Number 3 is odd.\"\n[1] \"Number 5 is odd.\"\n[1] \"Number 7 is odd.\""
  },
  {
    "objectID": "slides/lec02.html#auxiliary-loop-functions",
    "href": "slides/lec02.html#auxiliary-loop-functions",
    "title": "Control flow, loops, and functions",
    "section": "Auxiliary loop functions",
    "text": "Auxiliary loop functions\nYou may want to loop over indices of an object as opposed to the object‚Äôs values. To do this, consider using one of length(), seq(), seq_along(), and seq_len().\n\n\n\nseq_along(x) is preferred to 1:length(x) e.g.\nx = list()\nlength(x)\n\n[1] 0\n\n1:length(x)\n\n[1] 1 0\n\nseq_along(x)\n\ninteger(0)\n\n\n\n\nMany ways to generate sequences‚Ä¶\n\n1:5\n\n[1] 1 2 3 4 5\n\nseq(1:5)\n\n[1] 1 2 3 4 5\n\nseq_len(5)\n\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "slides/lec02.html#exercise-2",
    "href": "slides/lec02.html#exercise-2",
    "title": "Control flow, loops, and functions",
    "section": "Exercise 2",
    "text": "Exercise 2\nConsider the vector x below.\n\nx = c(3, 4, 12, 19, 23, 49, 100, 63, 70)\n\nWrite R code that prints the perfect squares in x.\nExercise 3\nConsider z = c(-1, .5, 0, .5, 1). Write R code that prints the smallest non-negative integer k satisfying the inequality\n\\[\n|cos(k)‚àíz|<0.001\n\\]\nfor each component of z."
  },
  {
    "objectID": "slides/lec02.html#exercise-3",
    "href": "slides/lec02.html#exercise-3",
    "title": "Control flow, loops, and functions",
    "section": "Exercise 3",
    "text": "Exercise 3\nConsider z = c(-1, .5, 0, .5, 1). Write R code that prints the smallest non-negative integer k satisfying the inequality\n\\[\n|cos(k)‚àíz|<0.001\n\\]\nfor each component of z."
  },
  {
    "objectID": "slides/lec02.html#exercises",
    "href": "slides/lec02.html#exercises",
    "title": "Control flow, loops, and functions",
    "section": "Exercises",
    "text": "Exercises\nExercise 2\nConsider the vector x below.\n\nx = c(3, 4, 12, 19, 23, 49, 100, 63, 70)\n\nWrite R code that prints the perfect squares in x.\nExercise 3\nConsider z = c(-1, .5, 0, .5, 1). Write R code that prints the smallest non-negative integer k satisfying the inequality\n\\[\n|cos(k)‚àíz|<0.001\n\\]\nfor each component of z."
  },
  {
    "objectID": "slides/lec02.html#function-composition",
    "href": "slides/lec02.html#function-composition",
    "title": "Control flow, loops, and functions",
    "section": "Function composition",
    "text": "Function composition\nA function is comprised of arguments (formals), and code (body).\n\nquadraticRoots = function(a, b, c) {\n  x1 = (-b + sqrt((b^2) - (4*a*c))) / (2*a)\n  x2 = (-b - sqrt((b^2) - (4*a*c))) / (2*a)\n  return(c(x1, x2))\n}\n\nquadraticRoots(1, -2, -3)\n\n[1]  3 -1\n\n\n\nformals(quadraticRoots)\n\n$a\n\n\n$b\n\n\n$c\n\nbody(quadraticRoots)\n\n{\n    x1 = (-b + sqrt((b^2) - (4 * a * c)))/(2 * a)\n    x2 = (-b - sqrt((b^2) - (4 * a * c)))/(2 * a)\n    return(c(x1, x2))\n}"
  },
  {
    "objectID": "slides/lec02.html#returns",
    "href": "slides/lec02.html#returns",
    "title": "Control flow, loops, and functions",
    "section": "Returns",
    "text": "Returns\nThere are two approaches to returning values from functions in R - explicit and implicit returns.\nExplicit - using one or more return function calls\n\nf = function(x) {\n  return(x * x)\n}\nf(2)\n\n[1] 4\n\n\n\nImplicit - return value of the last expression is returned.\n\ng = function(x) {\n  x * x\n}\ng(3)\n\n[1] 9"
  },
  {
    "objectID": "slides/lec02.html#invisible-returns",
    "href": "slides/lec02.html#invisible-returns",
    "title": "Control flow, loops, and functions",
    "section": "Invisible returns",
    "text": "Invisible returns\nMany functions in R make use of an invisible return value\n\nvisible\n\n\nf = function(x) {\n  print(x)\n}\ny = f(1)\n\n[1] 1\n\ny\n\n[1] 1\n\n\n\n\ninvisible\n\n\ng = function(x) {\n  invisible(x)\n}\ng(2)\nz = g(2)\nz\n\n[1] 2"
  },
  {
    "objectID": "slides/lec02.html#invisible-returns-1",
    "href": "slides/lec02.html#invisible-returns-1",
    "title": "Control flow, loops, and functions",
    "section": "Invisible returns",
    "text": "Invisible returns\nMany functions in R make use of an invisible return value\n\nvisible\n\n\nf = function(x) {\n  print(x)\n}\ny = f(1)\n\n[1] 1\n\ny\n\n[1] 1\n\n\n\ninvisible\n\n\ng = function(x) {\n  invisible(x)\n}\ng(2)\nz = g(2)\nz\n\n[1] 2\n\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec02.html#arguments",
    "href": "slides/lec02.html#arguments",
    "title": "Control flow, loops, and functions",
    "section": "Arguments",
    "text": "Arguments\nWhen defining a function we explicitly define names for the arguments, which become variables within the scope of the function.\nWhen calling a function we can use these names to pass arguments in an alternative order.\n\nf = function(x, y, z = 1) { # z defaults to 1\n  paste0(\"x=\", x, \" y=\", y, \" z=\", z)\n}\n\n\n\n\nf(1, 2, 3)\n\n[1] \"x=1 y=2 z=3\"\n\nf(z = 1, x = 2, y = 3)\n\n[1] \"x=2 y=3 z=1\"\n\nf(y = 2, 1, 3)\n\n[1] \"x=1 y=2 z=3\"\n\n\n\n\nf(1)\n\nError in paste0(\"x=\", x, \" y=\", y, \" z=\", z): argument \"y\" is missing, with no default\n\nf(1, 2)\n\n[1] \"x=1 y=2 z=1\"\n\nf(1, 2, 3, 4)\n\nError in f(1, 2, 3, 4): unused argument (4)\n\nf(1 , 2, m = 3)\n\nError in f(1, 2, m = 3): unused argument (m = 3)"
  },
  {
    "objectID": "slides/lec02.html#scope",
    "href": "slides/lec02.html#scope",
    "title": "Control flow, loops, and functions",
    "section": "Scope",
    "text": "Scope\nR has generous scoping rules, if it can‚Äôt find a variable in the current scope (e.g.¬†a function‚Äôs body) it will look for it in the next higher scope, and so on.\n\ny = 1\nf = function(x) {\n  x + y\n}\nf(3)\n\n[1] 4\n\n\n\n\ny = 1\ng = function(x) {\n  y = 2\n  x + y\n}\ng(3)\n\n[1] 5\n\n\n\n\nAdditionally, variables defined within a scope only persist for the duration of that scope, and do not overwrite variables at a higher scopes"
  },
  {
    "objectID": "slides/lec02.html#lazy-evaluation",
    "href": "slides/lec02.html#lazy-evaluation",
    "title": "Control flow, loops, and functions",
    "section": "Lazy evaluation",
    "text": "Lazy evaluation\nArguments to R functions are not evaluated until needed.\n\nf = function(a, b, x) {\n  print(a)\n  print(b ^ 2)\n  0 * x\n}\nf(5, 6)\n\n[1] 5\n[1] 36\n\n\nError in f(5, 6): argument \"x\" is missing, with no default"
  },
  {
    "objectID": "slides/lec02.html#function-forms",
    "href": "slides/lec02.html#function-forms",
    "title": "Control flow, loops, and functions",
    "section": "Function forms",
    "text": "Function forms\n\n\n\n\n\n\n\n\nForm\nDescription\nExample(s)\n\n\n\n\nPrefix\nname comes before arguments\nlog(x, base = exp(1))\n\n\nInfix\nname between arguments\n+, %>%, %/%\n\n\nReplacement\nreplace values by assignment\nnames(x) <- c(\"a\", \"b\")\n\n\nSpecial\nall others not defined above\n[[, for, break, ("
  },
  {
    "objectID": "slides/lec02.html#help",
    "href": "slides/lec02.html#help",
    "title": "Control flow, loops, and functions",
    "section": "Help",
    "text": "Help\nTo get help on any function, type ?fcn_name in your console, where fcn_name is the function‚Äôs name. For infix, replacement, and special functions you will need to surround the function with backticks.\n\n?mean\n?`for`\n?`+`\n\nFor functions not in the base package, you can generally see their implementation by entering the function name without parentheses (or using the body function).\n\nlm |>\n  head()\n\n                                                                         \n1 function (formula, data, subset, weights, na.action, method = \"qr\",    \n2     model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE, \n3     contrasts = NULL, offset, ...)                                     \n4 {                                                                      \n5     ret.x <- x                                                         \n6     ret.y <- y"
  },
  {
    "objectID": "slides/lec02.html#function-best-practices",
    "href": "slides/lec02.html#function-best-practices",
    "title": "Control flow, loops, and functions",
    "section": "Function best practices",
    "text": "Function best practices\n\nWrite a function when you have copied code more than twice.\nTry to use a verb for your function‚Äôs name.\nKeep argument names short but descriptive.\nAdd code comments to explain the ‚Äúwhy‚Äù of your code.\nLink a family of functions with a common prefix: pnorm(), pbinom(), ppois().\nKeep data arguments first, then other required arguments, then followed by default arguments. The ‚Ä¶ argument can be placed last."
  },
  {
    "objectID": "slides/lec02.html#a-summary-of-r",
    "href": "slides/lec02.html#a-summary-of-r",
    "title": "Control flow, loops, and functions",
    "section": "A summary of R",
    "text": "A summary of R\n\nTo understand computations in R, two slogans are helpful:\nEverything that exists is an object.\nEverything that happens is a function call.\n‚Äî John Chambers\n\nJohn McKinley Chambers is the creator of the S programming language, and core member of the R programming language project. The R programming is often called a successor to the S programming language.\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec03.html#missing-values",
    "href": "slides/lec03.html#missing-values",
    "title": "NAs, lists, NULL and attributes",
    "section": "Missing values",
    "text": "Missing values\nR uses NA to represent missing values in its data structures.NA is a logical type. What may not be obvious is that NA may be treated as a different type thanks to coercion.\n\n\n\ntypeof(NA)\n\n[1] \"logical\"\n\n\n\ntypeof(NA + 1)\n\n[1] \"double\"\n\n\n\ntypeof(NA + 1L)\n\n[1] \"integer\"\n\n\n\ntypeof(c(NA, \"\"))\n\n[1] \"character\"\n\n\n\n\n\ntypeof(NA_character_)\n\n[1] \"character\"\n\n\n\ntypeof(NA_real_)\n\n[1] \"double\"\n\n\n\ntypeof(NA_integer_)\n\n[1] \"integer\"\n\n\n\ntypeof(NA_complex_)\n\n[1] \"complex\""
  },
  {
    "objectID": "slides/lec03.html#na-stickiness",
    "href": "slides/lec03.html#na-stickiness",
    "title": "NAs, lists, NULL and attributes",
    "section": "NA stickiness",
    "text": "NA stickiness\nBecause NAs represent missing values it makes sense that any calculation using them should also be missing.\n\n\n\n1 + NA\n\n[1] NA\n\n\n\n1 / NA\n\n[1] NA\n\n\n\nNA * 5\n\n[1] NA\n\n\n\n\nsqrt(NA)\n\n[1] NA\n\n\n\n3 ^ NA\n\n[1] NA\n\n\n\nsum(c(1, 2, 3, NA))\n\n[1] NA\n\n\n\n\n\nSummarizing functions (e.g.¬†sum(), mean(), sd(), etc.) will often have a na.rm argument which will allow you to drop missing values.\n\nmean(c(1, 2, NA), na.rm = TRUE)\n\n[1] 1.5\n\n\n\nsum(c(1, 2, NA), na.rm = TRUE)\n\n[1] 3"
  },
  {
    "objectID": "slides/lec03.html#nas-are-not-always-sticky",
    "href": "slides/lec03.html#nas-are-not-always-sticky",
    "title": "NAs, lists, NULL and attributes",
    "section": "NAs are not always sticky",
    "text": "NAs are not always sticky\nA useful mental model for NAs is to consider them as a unknown value that could take any of the possible values for that type.\nFor numbers or characters this isn‚Äôt very helpful, but for a logical value we know that the value must either be TRUE or FALSE and we can use that when deciding what value to return.\nIf the value of NA affects the logical outcome, it is indeterminate and the operation will return NA. If the value of NA does not affect the logical outcome, the operation will return the outcome.\n\nCodeOutput\n\n\n\nTRUE & NA\n\n\nFALSE & NA\n\n\nTRUE | NA\n\n\nFALSE | NA\n\n\n\n\n\n[1] NA\n\n\n[1] FALSE\n\n\n[1] TRUE\n\n\n[1] NA"
  },
  {
    "objectID": "slides/lec03.html#test",
    "href": "slides/lec03.html#test",
    "title": "NAs, lists, atrributes and S3",
    "section": "Test",
    "text": "Test\n\nCodeOutput\n\n\n\nTRUE & NA\n\n\n\n\n\n[1] NA\n\n\n\n\n\n\nCodeOutput\n\n\n\nFALSE & NA\n\n\n\n\n\n[1] FALSE"
  },
  {
    "objectID": "slides/lec03.html#problem",
    "href": "slides/lec03.html#problem",
    "title": "NAs, lists, atrributes and S3",
    "section": "Problem",
    "text": "Problem\nHere here here."
  },
  {
    "objectID": "slides/lec03.html#solution",
    "href": "slides/lec03.html#solution",
    "title": "NAs, lists, atrributes and S3",
    "section": "Solution",
    "text": "Solution\nThere there there."
  },
  {
    "objectID": "slides/lec03.html#testing-for-na",
    "href": "slides/lec03.html#testing-for-na",
    "title": "NAs, lists, NULL and attributes",
    "section": "Testing for NA",
    "text": "Testing for NA\nBecause NA could take any value, the result of, for example, 2 != NA or 1 == NA is inconclusive and returns NA.\nExamples\n\n2 != NA\n\n[1] NA\n\n\n\n1 == NA\n\n[1] NA\n\n\n\nWho‚Äôs to say two missing values are equal?\n\nNA == NA\n\n[1] NA\n\n\n\n\nWe should instead:\n\n!is.na(2)\n\n[1] TRUE\n\n\n\nis.na(NA)\n\n[1] TRUE"
  },
  {
    "objectID": "slides/lec03.html#examples",
    "href": "slides/lec03.html#examples",
    "title": "NAs, lists, atrributes and S3",
    "section": "Examples",
    "text": "Examples\n\n2 != NA\n\n[1] NA\n\n\n\n1 == NA\n\n[1] NA\n\n\n\nWho‚Äôs to say two missing values are equal?\n\nNA == NA\n\n[1] NA\n\n\n\n\nIn these cases we should instead\n\n!is.na(2)\n\n[1] TRUE\n\n\n\nis.na(1)\n\n[1] FALSE\n\n\n\nis.na(NA)\n\n[1] TRUE"
  },
  {
    "objectID": "slides/lec03.html#other-special-values-double",
    "href": "slides/lec03.html#other-special-values-double",
    "title": "NAs, lists, NULL and attributes",
    "section": "Other Special values (double)",
    "text": "Other Special values (double)\nThese are defined as part of the IEEE floating point standard (not unique to R)\n\nNaN - Not a number\nInf - Positive infinity\n-Inf - Negative infinity\n\n\n\n\npi / 0\n\n[1] Inf\n\n\n\n0 / 0\n\n[1] NaN\n\n\n\n1 /0 + 1/0\n\n[1] Inf\n\n\n\n\n1/0 - 1/0\n\n[1] NaN\n\n\n\nNaN / NA\n\n[1] NaN\n\n\n\nInf - Inf\n\n[1] NaN\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nIEEE (Institute of Electrical and Electronics Engineers) develops global standards for a broad range of industries including floating-point arithmetic. Read more about the IEEE 754 (the standard for floating-point arithmetic) here"
  },
  {
    "objectID": "slides/lec03.html#exercises",
    "href": "slides/lec03.html#exercises",
    "title": "NAs, lists, attributes and S3",
    "section": "Exercises",
    "text": "Exercises"
  },
  {
    "objectID": "slides/lec03.html#testing-for-inf-and-nan",
    "href": "slides/lec03.html#testing-for-inf-and-nan",
    "title": "NAs, lists, NULL and attributes",
    "section": "Testing for Inf and NaN",
    "text": "Testing for Inf and NaN\n\n\n\nis.finite(Inf)\n\n[1] FALSE\n\n\n\nis.infinite(-Inf)\n\n[1] TRUE\n\n\n\nis.nan(Inf)\n\n[1] FALSE\n\n\n\nInf > 1\n\n[1] TRUE\n\n\n\n-Inf > 1\n\n[1] FALSE\n\n\n\n\nis.finite(NaN)\n\n[1] FALSE\n\n\n\nis.infinite(NaN)\n\n[1] FALSE\n\n\n\nis.nan(NaN)\n\n[1] TRUE\n\n\n\nis.finite(NA)\n\n[1] FALSE\n\n\n\nis.nan(NA)\n\n[1] FALSE"
  },
  {
    "objectID": "slides/lec03.html#forced-coercion",
    "href": "slides/lec03.html#forced-coercion",
    "title": "NAs, lists, NULL and attributes",
    "section": "Forced coercion",
    "text": "Forced coercion\n\n\nYou can coerce one type to another with as.()\n\nis.integer(2.0)\n\n[1] FALSE\n\n\n\nas.integer(\"2.0\")\n\n[1] 2\n\n\n\nis.integer(as.integer(2.0))\n\n[1] TRUE\n\n\n\nis.integer(Inf)\n\n[1] FALSE\n\n\n\n\nInf and NaN are doubles, however their coercion behavior is not the same as for other doubles.\n\nis.double(Inf)\n\n[1] TRUE\n\nis.double(NaN)\n\n[1] TRUE\n\n\n\nis.integer(as.integer(Inf))\n\nWarning: NAs introduced by coercion to integer range\n\n\n[1] TRUE\n\n\n\nis.integer(as.integer(NaN))\n\n[1] TRUE"
  },
  {
    "objectID": "quizzes/quiz01.html",
    "href": "quizzes/quiz01.html",
    "title": "Quiz 1",
    "section": "",
    "text": "Exercise 1\nIs x a list or an atomic vector?\n\nx = c(1L, 1)\n\n\n\nExercise 2\nThe output below is the result of printing object y to the screen. Is y a list or an atomic vector?\n\n\n[[1]]\n[1] 3\n\n[[2]]\nfunction(x) {\n  return(x ^ 2)\n}\n\n\n\n\nExercise 3\nWhat is the output of the following code chunk:\n\nTRUE | NA\n\n\n\nExercise 4\nWhat‚Äôs a generic?"
  },
  {
    "objectID": "slides/lec03.html#section",
    "href": "slides/lec03.html#section",
    "title": "NAs, lists, attributes and S3",
    "section": "",
    "text": "Two types of vectors in R. Atomic vectors (elements are all the same type) and generic vectors, aka lists (heterogeneous collection of elements). For example, a list can contain atomic vectors, functions, other lists, etc.\n\nlist(\"A\", c(TRUE,FALSE), (1:4)/2, list(TRUE, 1), function(x) x^2)\n\n[[1]]\n[1] \"A\"\n\n[[2]]\n[1]  TRUE FALSE\n\n[[3]]\n[1] 0.5 1.0 1.5 2.0\n\n[[4]]\n[[4]][[1]]\n[1] TRUE\n\n[[4]][[2]]\n[1] 1\n\n\n[[5]]\nfunction(x) x^2"
  },
  {
    "objectID": "slides/lec03.html#generic-vectors-lists",
    "href": "slides/lec03.html#generic-vectors-lists",
    "title": "NAs, lists, NULL and attributes",
    "section": "Generic vectors (lists)",
    "text": "Generic vectors (lists)\nTwo types of vectors in R. Atomic vectors (elements are all the same type) and generic vectors, aka lists (heterogeneous collection of elements). For example, a list can contain atomic vectors, functions, other lists, etc.\n\nlist(\"A\", (1:4)/2, list(TRUE, 1), function(x) x^2)\n\n[[1]]\n[1] \"A\"\n\n[[2]]\n[1] 0.5 1.0 1.5 2.0\n\n[[3]]\n[[3]][[1]]\n[1] TRUE\n\n[[3]][[2]]\n[1] 1\n\n\n[[4]]\nfunction(x) x^2"
  },
  {
    "objectID": "slides/lec03.html#list-structure",
    "href": "slides/lec03.html#list-structure",
    "title": "NAs, lists, NULL and attributes",
    "section": "List structure",
    "text": "List structure\nWe can view the contents of a list and a brief description of the contents compactly with the structure function str()\n\nstr(list(\"A\", (1:4)/2, list(TRUE, 1), function(x) x^2))\n\nList of 4\n $ : chr \"A\"\n $ : num [1:4] 0.5 1 1.5 2\n $ :List of 2\n  ..$ : logi TRUE\n  ..$ : num 1\n $ :function (x)  \n  ..- attr(*, \"srcref\")= 'srcref' int [1:8] 1 39 1 53 39 53 1 1\n  .. ..- attr(*, \"srcfile\")=Classes 'srcfilecopy', 'srcfile' <environment: 0x7fd5caeb0d58> \n\n\n\nstr(1:100)\n\n int [1:100] 1 2 3 4 5 6 7 8 9 10 ...\n\n\n\nstr(list(c(1,2), c(TRUE, FALSE)))\n\nList of 2\n $ : num [1:2] 1 2\n $ : logi [1:2] TRUE FALSE"
  },
  {
    "objectID": "slides/lec03.html#recursive-lists",
    "href": "slides/lec03.html#recursive-lists",
    "title": "NAs, lists, NULL and attributes",
    "section": "Recursive lists",
    "text": "Recursive lists\n\nstr(list(list(list(list())))) # recursive list\n\nList of 1\n $ :List of 1\n  ..$ :List of 1\n  .. ..$ : list()\n\n\n\nstr(list(1, list(2), list(3, 2))) # recursive list\n\nList of 3\n $ : num 1\n $ :List of 1\n  ..$ : num 2\n $ :List of 2\n  ..$ : num 3\n  ..$ : num 2\n\n\nBecause of this, lists become the most natural way of representing tree-like structures within R"
  },
  {
    "objectID": "slides/lec03.html#list-coercion",
    "href": "slides/lec03.html#list-coercion",
    "title": "NAs, lists, NULL and attributes",
    "section": "List coercion",
    "text": "List coercion\nBy default a vector will be coerced to a list (as a list is more general) if needed\n\nstr( c(1, list(4, list(6, 7))) )\n\nList of 3\n $ : num 1\n $ : num 4\n $ :List of 2\n  ..$ : num 6\n  ..$ : num 7\n\n\nWe can coerce a list into an atomic vector using unlist - the usual type coercion rules then apply to determine the final type.\n\nunlist(list(1:3, list(4:5, 6)))\n\n[1] 1 2 3 4 5 6\n\n\n\nunlist( list(1, list(2, list(3, \"Hello\"))) )\n\n[1] \"1\"     \"2\"     \"3\"     \"Hello\"\n\n\nas.integer and similar functions can be used, but only if the list is flat (i.e.¬†no lists inside your base list)"
  },
  {
    "objectID": "slides/lec03.html#exercise-1",
    "href": "slides/lec03.html#exercise-1",
    "title": "NAs, lists, NULL and attributes",
    "section": "Exercise 1",
    "text": "Exercise 1\nWrite a function that takes vector input x and returns the smallest and largest non-infinite value. Test your function on\n\nx = c(1, Inf, 100, 10, -Inf)"
  },
  {
    "objectID": "slides/lec03.html#named-lists",
    "href": "slides/lec03.html#named-lists",
    "title": "NAs, lists, NULL and attributes",
    "section": "Named lists",
    "text": "Named lists\nBecause of their more complex structure we often want to name the elements of a list (we can also do this with atomic vectors).\nThis can make accessing list elements more straight forward.\n\nstr(list(A = 1, B = list(C = 2, D = 3)))\n\nList of 2\n $ A: num 1\n $ B:List of 2\n  ..$ C: num 2\n  ..$ D: num 3\n\n\nMore complex names need to be quoted,\n\nlist(\"knock knock\" = \"who's there?\")\n\n$`knock knock`\n[1] \"who's there?\""
  },
  {
    "objectID": "slides/lec03.html#exercise-2",
    "href": "slides/lec03.html#exercise-2",
    "title": "NAs, lists, NULL and attributes",
    "section": "Exercise 2",
    "text": "Exercise 2\nRepresent the following JSON (JavaScript Object Notation) data as a list in R.\n\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25,\n  \"address\": \n  {\n    \"streetAddress\": \"21 2nd Street\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postalCode\": 10021\n  },\n  \"phoneNumber\": \n  [\n    {\n      \"type\": \"home\",\n      \"number\": \"212 555-1239\"\n    },\n    {\n      \"type\": \"fax\",\n      \"number\": \"646 555-4567\"\n    }\n  ]\n}"
  },
  {
    "objectID": "slides/lec03.html#the-null-type",
    "href": "slides/lec03.html#the-null-type",
    "title": "NAs, lists, NULL and attributes",
    "section": "The NULL type",
    "text": "The NULL type\nNULL is a special value within R that represents nothing - it always has length zero and type ‚ÄúNULL‚Äù and cannot have any attributes.\n\n\n\nNULL\n\nNULL\n\ntypeof(NULL)\n\n[1] \"NULL\"\n\nlength(NULL)\n\n[1] 0\n\n\n\n\nc()\n\nNULL\n\nc(NULL)\n\nNULL\n\nc(1, NULL, 2)\n\n[1] 1 2\n\nc(NULL, TRUE, \"A\")\n\n[1] \"TRUE\" \"A\"   \n\n\n\n\nWhen combined in a vector, it disappears."
  },
  {
    "objectID": "slides/lec03.html#length-coercion",
    "href": "slides/lec03.html#length-coercion",
    "title": "NAs, lists, NULL and attributes",
    "section": "0-length coercion",
    "text": "0-length coercion\nPreviously we saw that in multi-vector operations, short vectors get re-used until the length of the long vector is matched.\n0-length length coercion is a special case of length coercion when one of the arguments has length 0. In this case the longer vector‚Äôs length is not used and result will have length 0.\n\n\n\ninteger() + 1\n\nnumeric(0)\n\nlog(numeric())\n\nnumeric(0)\n\nlogical() | TRUE\n\nlogical(0)\n\ncharacter() > \"M\"\n\nlogical(0)\n\n\n\n\n\nNULL + 1\n\nnumeric(0)\n\nlog(NULL)\n\nError in log(NULL): non-numeric argument to mathematical function\n\nNULL | TRUE\n\nlogical(0)\n\nNULL > \"M\"\n\nlogical(0)\n\n\n\n\n\n\nAs a NULL values always have length 0, this coercion rule will apply (note type coercion is also occurring here)"
  },
  {
    "objectID": "slides/lec03.html#null-and-comparison",
    "href": "slides/lec03.html#null-and-comparison",
    "title": "NAs, lists, NULL and attributes",
    "section": "NULL and comparison",
    "text": "NULL and comparison\nGiven the previous issue, comparisons and conditional with NULLs can be problematic.\n\nx = NULL\n\nif (x > 0)\n  print(\"Hello\")\n\nError in if (x > 0) print(\"Hello\"): argument is of length zero\n\nif (!is.null(x) & (x > 0))\n  print(\"Hello\")\n\nError in if (!is.null(x) & (x > 0)) print(\"Hello\"): argument is of length zero\n\n\n\n\nif (!is.null(x) && (x > 0))\n  print(\"Hello\")\n\nThis is due to short circuit evaluation which occurs with && and || but not & or |."
  },
  {
    "objectID": "slides/lec03.html#attributes-1",
    "href": "slides/lec03.html#attributes-1",
    "title": "NAs, lists, NULL and attributes",
    "section": "Attributes",
    "text": "Attributes\nAttributes are named lists that can be attached to objects in R. Attributes contain metadata about an object, e.g.¬†the object‚Äôs names, dim, class, levels etc.\n\n\n\n\n\n\n\nAttributes can be interacted with via attr and attributes functions.\n\n(x = c(L=1,M=2,N=3))\n\nL M N \n1 2 3 \n\nattributes(x)\n\n$names\n[1] \"L\" \"M\" \"N\"\n\nstr(attributes(x))\n\nList of 1\n $ names: chr [1:3] \"L\" \"M\" \"N\"\n\n\n\n\nattr(x, \"names\")\n\n[1] \"L\" \"M\" \"N\"\n\n\n\n\n\nattr(x, \"something\")\n\nNULL"
  },
  {
    "objectID": "slides/lec03.html#assigning-attributes",
    "href": "slides/lec03.html#assigning-attributes",
    "title": "NAs, lists, NULL and attributes",
    "section": "Assigning attributes",
    "text": "Assigning attributes\n\nx = c(1, 2, 3)\nx\n\n[1] 1 2 3\n\n\n\nnames(x) = c(\"Z\",\"Y\",\"X\") # helper function\nx\n\nZ Y X \n1 2 3 \n\n\n\nnames(x)\n\n[1] \"Z\" \"Y\" \"X\"\n\nattr(x, \"names\") = c(\"A\",\"B\",\"C\")\nx\n\nA B C \n1 2 3 \n\nnames(x)\n\n[1] \"A\" \"B\" \"C\""
  },
  {
    "objectID": "slides/lec03.html#factors",
    "href": "slides/lec03.html#factors",
    "title": "NAs, lists, NULL and attributes",
    "section": "Factors",
    "text": "Factors\nFactor objects are how R represents categorical data (e.g.¬†a variable where there are a fixed # of possible outcomes).\n\n(x = factor(c(\"Sunny\", \"Cloudy\", \"Rainy\", \"Cloudy\", \"Cloudy\")))\n\n[1] Sunny  Cloudy Rainy  Cloudy Cloudy\nLevels: Cloudy Rainy Sunny\n\n\n\n\nstr(x)\n\n Factor w/ 3 levels \"Cloudy\",\"Rainy\",..: 3 1 2 1 1\n\n\n\n\n\ntypeof(x)\n\n[1] \"integer\"\n\n\nWhat‚Äôs really going on?\n\n\n\nattributes(x)\n\n$levels\n[1] \"Cloudy\" \"Rainy\"  \"Sunny\" \n\n$class\n[1] \"factor\"\n\n\nA factor is just an integer vector with two attributes: class and levels."
  },
  {
    "objectID": "slides/lec03.html#building-objects",
    "href": "slides/lec03.html#building-objects",
    "title": "NAs, lists, NULL and attributes",
    "section": "Building objects",
    "text": "Building objects\nWe can build our own factor from scratch using,\n\ny = c(3L, 1L, 2L, 1L, 1L)\nattr(y, \"levels\") = c(\"Cloudy\", \"Rainy\", \"Sunny\")\nattr(y, \"class\") = \"factor\"\ny\n\n[1] Sunny  Cloudy Rainy  Cloudy Cloudy\nLevels: Cloudy Rainy Sunny\n\n\n\nThe approach we just used is a bit clunky - generally the preferred method for construction an object with attributes from scratch is to use the structure function.\n\ny = structure(\n  c(3L, 1L, 2L, 1L, 1L), # data\n  levels = c(\"Cloudy\", \"Rainy\", \"Sunny\"),\n  class = \"factor\"\n)\ny\n\n[1] Sunny  Cloudy Rainy  Cloudy Cloudy\nLevels: Cloudy Rainy Sunny\n\n\n\n\n\nclass(y)\n\n[1] \"factor\"\n\n\n\n\nis.factor(y)\n\n[1] TRUE"
  },
  {
    "objectID": "slides/lec03.html#knowing-factors-are-stored-as-integers-help-explain-some-of-their-more-interesting-behaviors",
    "href": "slides/lec03.html#knowing-factors-are-stored-as-integers-help-explain-some-of-their-more-interesting-behaviors",
    "title": "NAs, lists, NULL and attributes",
    "section": "Knowing factors are stored as integers help explain some of their more interesting behaviors:",
    "text": "Knowing factors are stored as integers help explain some of their more interesting behaviors:\n\nx\n\n[1] Sunny  Cloudy Rainy  Cloudy Cloudy\nLevels: Cloudy Rainy Sunny\n\nx+1\n\nWarning in Ops.factor(x, 1): '+' not meaningful for factors\n\n\n[1] NA NA NA NA NA\n\nis.integer(x)\n\n[1] FALSE\n\nas.integer(x)\n\n[1] 3 1 2 1 1\n\nas.character(x)\n\n[1] \"Sunny\"  \"Cloudy\" \"Rainy\"  \"Cloudy\" \"Cloudy\"\n\nas.logical(x)\n\n[1] NA NA NA NA NA"
  },
  {
    "objectID": "slides/lec03.html#exercise-3-time-permitting",
    "href": "slides/lec03.html#exercise-3-time-permitting",
    "title": "NAs, lists, NULL and attributes",
    "section": "Exercise 3 (time permitting)",
    "text": "Exercise 3 (time permitting)\nCreate a factor vector based on the vector of airport codes below.\n\nairports = c(\"RDU\", \"ABE\", \"DTW\", \"GRR\", \"RDU\", \"GRR\", \"GNV\",\n             \"JFK\", \"JFK\", \"SFO\", \"DTW\")\n\nAll of the possible levels are\n\nc(\"RDU\", \"ABE\", \"DTW\", \"GRR\", \"GNV\", \"JFK\", \"SFO\")\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec03.html#exercise-3-time-permitting-practice",
    "href": "slides/lec03.html#exercise-3-time-permitting-practice",
    "title": "NAs, lists, NULL and attributes",
    "section": "Exercise 3 (time permitting practice)",
    "text": "Exercise 3 (time permitting practice)\nCreate a factor vector based on the vector of airport codes below.\n\nairports = c(\"RDU\", \"ABE\", \"DTW\", \"GRR\", \"RDU\", \"GRR\", \"GNV\",\n             \"JFK\", \"JFK\", \"SFO\", \"DTW\")\n\nAll of the possible levels are\n\nc(\"RDU\", \"ABE\", \"DTW\", \"GRR\", \"GNV\", \"JFK\", \"SFO\")\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec03.html#exercise-3",
    "href": "slides/lec03.html#exercise-3",
    "title": "NAs, lists, NULL and attributes",
    "section": "Exercise 3",
    "text": "Exercise 3\nCreate a factor vector based on the vector of airport codes below.\n\nairports = c(\"RDU\", \"ABE\", \"DTW\", \"GRR\", \"RDU\", \"GRR\", \"GNV\",\n             \"JFK\", \"JFK\", \"SFO\", \"DTW\")\n\nAll of the possible levels are\n\nc(\"RDU\", \"ABE\", \"DTW\", \"GRR\", \"GNV\", \"JFK\", \"SFO\")\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "labs/lab1.html#exercises",
    "href": "labs/lab1.html#exercises",
    "title": "Lab 1: if it‚Äôs a function, fix it",
    "section": "Exercises",
    "text": "Exercises\nFor all exercises, you should respond in the space provided in the template lab-1.qmd and show all your work. In all answers of type double, three significant figures suffices.\n\n1. Robust quadratic root finding\nThe quadratic formula finds \\(x\\) that satisfy the following equation:\n\\[\nax^2 + bx + c = 0.\n\\]\nIn general, \\(x^*\\) such that \\(f(x^*) = 0\\), then \\(x^*\\) is said to be a root of \\(f(x)\\). You can find an example of basic implementation of the quadratic formula from lecture 2: control flow, loops and functions.\nWrite a function named robustQuadraticRoots() that accepts three arguments: a, b and c and returns both roots (even if they are repeated) while satisfying the additional cases below. Show the output of your function robustQuadraticRoots() on each of the cases below.\n\n# case i \nrobustQuadraticRoots(a = 0, b = 3, c = 2)\n\n# case ii\nrobustQuadraticRoots(a = 0, b = 0, c = 0)\n\n# case iii\nrobustQuadraticRoots(a = 1, b = 2, c = 3)\n\n# case iv\nrobustQuadraticRoots(a = 4.3162933554e-11,\n                       b = 1.0361118521e6,\n                       c = -4.5813932360e5)\n\n# case v\nrobustQuadraticRoots(a = 0, b = 5, c = 0)\n\n\n\n\n\n\n\nHint\n\n\n\n\nfor case (ii) you should return an error. Since errors will stop your .qmd from rendering, you should include in your code chunk #| error: true. Read quarto docs here for a full list of code chunk execution options.\nfor case (iii) you need to deal with complex numbers read here\nfor case (iv) the correct answer is \\(x_1 = -2.4e16\\) and \\(x_2 = .44\\) when rounded to two significant figures.\nfor case (v), you should use warning() to warn the user that both a and c are 0.\n\n\n\nIn each case above, describe why quadraticRoots() from the lecture fails.\n\n\n2. Stirling numbers of the second kind\nStirling numbers of the second kind count the number of possible partitions of a set of \\(n\\) objects into \\(k\\) disjoint blocks. For example, the number of ways to partition a set of 3 objects in 2 disjoint blocks is \\(S(3, 2) = 3\\) because the set \\(\\{1, 2, 3\\}\\) can be partitioned into two disjoint blocks in 3 ways:\n\\[\n\\begin{aligned}\n&\\{1, 2\\} \\cup \\{3\\},\\\\\n&\\{1, 3\\} \\cup \\{2\\},\\\\\n&\\{2, 3\\} \\cup \\{1\\}\n\\end{aligned}\n\\]\nWe can generate Stirling numbers of the second kind, \\(S(n,k)\\), recursively:\n\\[\nS(n,k) = S(n-1, k-1) + kS(n-1, k)\n\\]\nwhere we start the sequence with \\(S(n, 1) = 1\\) and the boundary condition \\(S(n, k) = 0\\) for \\(k>n\\).\nCreate a function ssk() with arguments n and k that computes Stirling numbers of the second kind. Print the result of your function for the following inputs:\n\n# case i\nssk(n = 3, k = 2)\n\n# case ii\nssk(n = 10, k = 1)\n\n# case iii\nssk(n = 10, k = 10)\n\n# case iv\nssk(n = 15, k = 8)\n\n# case v\nssk(n = 6, k = 7)\n\n\n\n3. Pareto distribution\n\nIntroduction\nR provides functions that return useful characteristics of many common probability distributions. The naming convention for these functions is a prefix, which identifies what the function does, followed by an abbreviation of the probability distribution‚Äôs name. These prefixes are:\n\np for ‚Äúprobability‚Äù, the cumulative distribution function (CDF)\nq for ‚Äúquantile‚Äù, the inverse CDF\nd for ‚Äúdensity‚Äù, the density function (PDF)\nr for ‚Äúrandom‚Äù, to sample a random variable having the specified distribution.\n\nFor the normal distribution, these functions are pnorm, qnorm, dnorm, and rnorm, where the norm portion reminds us this is for the normal distribution. For the binomial distribution, these functions are pbinom, qbinom, dbinom, and rbinom. Click here for a list of probability distributions in the Base R package.\nThe Pareto distribution is not available in base R, so we‚Äôre going to code it ourselves. For this lab, we‚Äôll just code the quantile function, i.e., qpareto(). Here‚Äôs a bit of background on deriving the Pareto‚Äôs quantile function.\nThe Pareto family of distributions is parameterized by \\(\\alpha\\) and \\(x_0\\), and has probability density function\n\\[\nf(x) = \\begin{cases}\n\\frac{(\\alpha - 1)x_0^{\\alpha - 1}}{x^{\\alpha}}, &x > x_0,\\\\\n0, &x \\leq x_0.\n\\end{cases}\n\\]\nFrom the PDF it is relatively easy to compute the CDF, which is given by\n\\[\nF(x) = \\begin{cases}\n0 & x < x_0\\\\\n1 - \\left(\\frac{x_0}{x} \\right)^{\\alpha - 1} & x \\geq x_0.\n\\end{cases}\n\\]\nThe quantile function is defined for \\(0 \\le p \\le 1\\), and it returns the value \\(x_p\\) such that \\(F(x_p) = p\\). For the Pareto distribution, the quantile function is given by\n\\[\nQ(p) = Q(p, \\alpha, x_0) = {x_0}{(1-p)^{-\\frac{1}{\\alpha - 1}}}.\n\\]\nUsing the definition of \\(Q(p)\\), we can compute the \\(p\\)th quantile for specific values of \\(p\\) manually. For example, to get the median (\\(p = 0.5\\)) of Pareto distributions with \\(x_0 = 1, \\alpha = 3.5\\):\n\n1 * (1 - 0.5) ^ (-1/(3.5 - 1))\n\nIt would be helpful to have a function that automated this process, both so we don‚Äôt have to remember the form of the quantile function for the Pareto distribution, and so we avoid making mistakes.\nWe will build our function, qpareto(), in a sequence of steps.\n\n\nStep 1 qpareto_1\nWrite a function called qpareto_1() that takes arguments p, alpha, and x0 and returns \\(Q(p, \\alpha, x_0)\\) as defined above.\n\n\n\n\n\n\nHint\n\n\n\ncheck the result of your function manually (as in the example above) to ensure you have the correct answer.\n\n\n\nqpareto_1(p = 0.5, alpha = 3.5, x0 = 1)\nqpareto_1(p = 0.5, alpha = 2.34, x0 = 6e8)\nqpareto_1(p = 0.92, alpha = 2.5, x0 = 1e6)\n\n\n\nStep 2\n\n\nqpareto_2()\nMost of the quantile functions in R have an argument lower.tail that is either TRUE or FALSE. If TRUE, the function returns the \\(p\\)th quantile. If FALSE, the function returns the \\((1-p)\\)th quantile, i.e., returns the value \\(x_p\\) such that \\(F(x_p) = 1 - p\\).\nCreate a function qpareto_2() that has an additional argument lower.tail which is by default set to TRUE. Your qpareto_2 function should test whether lower.tail is FALSE. If it is FALSE, the function should replace \\(p\\) by \\(1-p\\). Then pass either \\(p\\) or \\(1-p\\) to qpareto_1() to compute the appropriate quantile, i.e., qpareto_1() is called from inside of qpareto_2(). Test your function with the two function calls below.\n\nqpareto_2(p = 0.5, alpha = 3.5, x0 = 1)\nqpareto_2(p = 0.08, alpha = 2.5, x0 = 1e6, lower.tail = FALSE)\n\nThere is a downside to writing the function the way we have. We need qpareto_1() to be in the work space when qpareto_2() is called, but there is a big advantage. If we discover a better way to calculate quantiles of the Pareto distribution, we can rewrite qpareto_1() and the new version will automatically be used in qpareto_2().\n\n\nStep 3\n\n\nqpareto()\nNext, let‚Äôs add some check with regards to the function‚Äôs arguments. In the case of the Pareto quantile function, we need \\(0\\leq p\\leq 1\\), \\(\\alpha > 1\\), and \\(x_0 > 0\\).\nWrite a function named qpareto() that adds these checks to your code from function qpareto_2().\nQuarto markdown will not compile if your R function stops due to the stopifnot() function. Include #| error: true to allow your document to render. See the hint to exercise 1 for more details.\nTest your function on the five function calls below.\n\nqpareto(p = 0.5, alpha = 3.5, x0 = 1)\nqpareto(p = 0.08, alpha = 2.5, x0 = 1e6, lower.tail = FALSE)\nqpareto(p = 1.08, alpha = 2.5, x0 = 1e6, lower.tail = FALSE)\nqpareto(p = 0.5, alpha = 0.5, x0 = -4)\nqpareto(p = 0.5, alpha = 2, x0 = -4)\n\nIs your function vectorized? For which parameters is it vectorized?"
  },
  {
    "objectID": "labs/lab1.html#style-guidelines",
    "href": "labs/lab1.html#style-guidelines",
    "title": "Lab 1: if it‚Äôs a function, fix it",
    "section": "Style guidelines",
    "text": "Style guidelines\nAll assignments in this course must employ proper coding style, as outlined below:\n\nAll code should obey the 80 character limit per line (i.e.¬†no code should run off the page when rendering or require scrolling). To enable a vertical line in the RStudio IDE that helps guide this, see the style guidelines from lab 0 or ask a member of the teaching team for help.\nAll commas should be followed by a space.\nAll binary operators should be surrounded by space. For example x + y is appropriate. x+y is not.\nAll pipes %>% or |> as well as ggplot layers + should be followed by a new line.\nYou should be consistent with stylistic choices, e.g.¬†only use 1 of = vs <- and %>% vs |>\nYour name should be at the top (in the YAML) of each document under ‚Äúauthor:‚Äù\nAll code chunks should be named (with names that don‚Äôt have spaces, e.g.¬†ex-1, ex-2 etc.)\nFile names in your GitHub repo such as lab-x.qmd must not be changed and left as provided. Additionally, your repo must pass certain basic checks. The results of these checks are visible on GitHub via the badges at the top of your README and the actions tab. These are meant to give you feedback around the structure and reproducibility of your repository and assignment - they do not assess the correctness of your work. You should consider them a necessary but not sufficient condition when turning in your work - passing all of the checks simply means your have met a minimum standard of reproducibility for the assignment.\n\nFundamentally, the check is making sure 1) you only have the files you should in your repository, 2) your .qmd renders.\nIf you have any questions about style, please ask a member of the teaching team."
  },
  {
    "objectID": "labs/lab1.html#submitting-your-lab",
    "href": "labs/lab1.html#submitting-your-lab",
    "title": "Lab 1: if it‚Äôs a function, fix it",
    "section": "Submitting your lab",
    "text": "Submitting your lab\nTo submit your assignment, simply commit and push your completed lab-x.qmd to your GitHub repo. Your most recent commit 48 hours after the assignment deadline will be graded, and any applicable late penalty will be applied (see the syllabus). For this reason, do not push commits after you are satisfied with your work, or a late penalty will be applied."
  },
  {
    "objectID": "slides/lec04.html#slide-two",
    "href": "slides/lec04.html#slide-two",
    "title": "Object oriented programming",
    "section": "Slide two",
    "text": "Slide two\nSlide three\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec04.html#rs-type-hierarchy",
    "href": "slides/lec04.html#rs-type-hierarchy",
    "title": "Object oriented programming",
    "section": "R‚Äôs type hierarchy",
    "text": "R‚Äôs type hierarchy\n\nfrom most to least complex: class \\(\\rightarrow\\) mode \\(\\rightarrow\\) type\n\n\n\n\n\n\n\n\n\n\n\n\n\nvalue\ntypeof()\nmode()\nclass()\n\n\n\n\nTRUE\nlogical\nlogical\nlogical\n\n\n1\ndouble\nnumeric\nnumeric\n\n\n1L\ninteger\nnumeric\ninteger\n\n\n\"A\"\ncharacter\ncharacter\ncharacter\n\n\nNULL\nNULL\nNULL\nNULL\n\n\nlist(1, \"A\")\nlist\nlist\nlist\n\n\nfactor(\"A\")\ninteger\nnumeric\nfactor\n\n\nfunction(x) x^2\nclosure\nfunction\nfunction\n\n\n\\+\nbuiltin\nfunction\nfunction\n\n\n\\[\nspecial\nfunction\nfunction\n\n\n\n\nobjects have class even if no formal class attribute (seen with attributes())"
  },
  {
    "objectID": "slides/lec04.html#new-slide",
    "href": "slides/lec04.html#new-slide",
    "title": "Object oriented programming",
    "section": "new slide",
    "text": "new slide\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec04.html#attributes",
    "href": "slides/lec04.html#attributes",
    "title": "Object oriented programming",
    "section": "Attributes",
    "text": "Attributes"
  },
  {
    "objectID": "slides/lec04.html#s3-class-specialization",
    "href": "slides/lec04.html#s3-class-specialization",
    "title": "Object oriented programming",
    "section": "S3 class specialization",
    "text": "S3 class specialization\n\nx = c(\"A\",\"B\",\"A\",\"C\")\n\n\n\nprint( x )\n\n[1] \"A\" \"B\" \"A\" \"C\"\n\n\n\n\n\nprint( factor(x) )\n\n[1] A B A C\nLevels: A B C\n\n\n\n\n\nprint( unclass( factor(x) ) ) # unclass strips the class attribute\n\n[1] 1 2 1 3\nattr(,\"levels\")\n[1] \"A\" \"B\" \"C\"\n\n\n\n\n\nprint.default( factor(x) )\n\n[1] 1 2 1 3"
  },
  {
    "objectID": "slides/lec04.html#other-examples",
    "href": "slides/lec04.html#other-examples",
    "title": "Object oriented programming",
    "section": "Other examples",
    "text": "Other examples\n\n\n\nmean\n\nfunction (x, ...) \nUseMethod(\"mean\")\n<bytecode: 0x7fa019945990>\n<environment: namespace:base>\n\n\n\n\nt.test\n\nfunction (x, ...) \nUseMethod(\"t.test\")\n<bytecode: 0x7fa04969c740>\n<environment: namespace:stats>\n\n\n\n\n\nNot all base functions use this approach,\n\nsum\n\nfunction (..., na.rm = FALSE)  .Primitive(\"sum\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThe ... (dot-dot-dot) argument means the function can take any number of additional arguments. This is called a ‚Äúvariable argument‚Äù and it is commonly used so you pass variables to additional nested functions. For example:\n\nf1 =  function(y = 0, z = 0) {\n  return(y + z)\n}\n\nf2 <- function(x, ...) {\n  return(x + f1(...))\n}\n\nf2(x = 1, y = 2, z = 3)"
  },
  {
    "objectID": "slides/lec04.html#what-is-s3",
    "href": "slides/lec04.html#what-is-s3",
    "title": "Object oriented programming",
    "section": "What is S3?",
    "text": "What is S3?\n\nS3 is R‚Äôs core object oriented implementation\nS3 is the only OO system used in the base and stats packages, and it‚Äôs the most commonly used system in CRAN packages.\nS3 is more flexible (read also: easier to break) than traditional object oriented programming you may have seen before (e.g.¬†Java).\n\n\nWorking model: S3 is a system where we attach metadata to an object via the class attribute.\n\n\nOne of the most compelling reasons to use object oriented programming (OOP) is polymorphism. Polymorphism means that a developer can consider a function‚Äôs interface separately from its implementation."
  },
  {
    "objectID": "slides/lec04.html#generics-whats-going-on",
    "href": "slides/lec04.html#generics-whats-going-on",
    "title": "Object oriented programming",
    "section": "Generics (what‚Äôs going on!?)",
    "text": "Generics (what‚Äôs going on!?)\n\nAn S3 object behaves differently from its underlying base type whenever it‚Äôs passed to a generic function\n\nThe easiest way to tell if a function is a generic is to use sloop::ftype() and look for ‚Äúgeneric‚Äù in the output, e.g.\n\nlibrary(sloop)\nftype(print)\n\n[1] \"S3\"      \"generic\"\n\n\n\nFundamentally, the generic function dispatches to a specialized version of the function depending on the class of its input. UseMethod() tells a generic to look for the specialized version.\nThe syntax for specialized functions is: <generic>.<class>\n\n\nExamples\nWe can see all the specialized versions of the generic using the methods() function.\n\nmethods(\"plot\") |>\n  head(n = 15)\n\n [1] \"plot.acf\"           \"plot.data.frame\"    \"plot.decomposed.ts\"\n [4] \"plot.default\"       \"plot.dendrogram\"    \"plot.density\"      \n [7] \"plot.ecdf\"          \"plot.factor\"        \"plot.formula\"      \n[10] \"plot.function\"      \"plot.hclust\"        \"plot.histogram\"    \n[13] \"plot.HoltWinters\"   \"plot.isoreg\"        \"plot.lm\""
  },
  {
    "objectID": "slides/lec04.html#methods-of-print",
    "href": "slides/lec04.html#methods-of-print",
    "title": "Object oriented programming",
    "section": "Methods of print",
    "text": "Methods of print\n\nmethods(\"print\")\n\n  [1] print.acf*                                          \n  [2] print.AES*                                          \n  [3] print.anova*                                        \n  [4] print.aov*                                          \n  [5] print.aovlist*                                      \n  [6] print.ar*                                           \n  [7] print.Arima*                                        \n  [8] print.arima0*                                       \n  [9] print.AsIs                                          \n [10] print.aspell*                                       \n [11] print.aspell_inspect_context*                       \n [12] print.bibentry*                                     \n [13] print.Bibtex*                                       \n [14] print.browseVignettes*                              \n [15] print.by                                            \n [16] print.changedFiles*                                 \n [17] print.check_bogus_return*                           \n [18] print.check_code_usage_in_package*                  \n [19] print.check_compiled_code*                          \n [20] print.check_demo_index*                             \n [21] print.check_depdef*                                 \n [22] print.check_details*                                \n [23] print.check_details_changes*                        \n [24] print.check_doi_db*                                 \n [25] print.check_dotInternal*                            \n [26] print.check_make_vars*                              \n [27] print.check_nonAPI_calls*                           \n [28] print.check_package_code_assign_to_globalenv*       \n [29] print.check_package_code_attach*                    \n [30] print.check_package_code_data_into_globalenv*       \n [31] print.check_package_code_startup_functions*         \n [32] print.check_package_code_syntax*                    \n [33] print.check_package_code_unload_functions*          \n [34] print.check_package_compact_datasets*               \n [35] print.check_package_CRAN_incoming*                  \n [36] print.check_package_datalist*                       \n [37] print.check_package_datasets*                       \n [38] print.check_package_depends*                        \n [39] print.check_package_description*                    \n [40] print.check_package_description_encoding*           \n [41] print.check_package_license*                        \n [42] print.check_packages_in_dir*                        \n [43] print.check_packages_used*                          \n [44] print.check_po_files*                               \n [45] print.check_pragmas*                                \n [46] print.check_Rd_line_widths*                         \n [47] print.check_Rd_metadata*                            \n [48] print.check_Rd_xrefs*                               \n [49] print.check_RegSym_calls*                           \n [50] print.check_S3_methods_needing_delayed_registration*\n [51] print.check_so_symbols*                             \n [52] print.check_T_and_F*                                \n [53] print.check_url_db*                                 \n [54] print.check_vignette_index*                         \n [55] print.checkDocFiles*                                \n [56] print.checkDocStyle*                                \n [57] print.checkFF*                                      \n [58] print.checkRd*                                      \n [59] print.checkRdContents*                              \n [60] print.checkReplaceFuns*                             \n [61] print.checkS3methods*                               \n [62] print.checkTnF*                                     \n [63] print.checkVignettes*                               \n [64] print.citation*                                     \n [65] print.cli_ansi_html_style*                          \n [66] print.cli_ansi_string*                              \n [67] print.cli_ansi_style*                               \n [68] print.cli_boxx*                                     \n [69] print.cli_diff_chr*                                 \n [70] print.cli_doc*                                      \n [71] print.cli_progress_demo*                            \n [72] print.cli_rule*                                     \n [73] print.cli_sitrep*                                   \n [74] print.cli_spark*                                    \n [75] print.cli_spinner*                                  \n [76] print.cli_tree*                                     \n [77] print.codoc*                                        \n [78] print.codocClasses*                                 \n [79] print.codocData*                                    \n [80] print.colorConverter*                               \n [81] print.compactPDF*                                   \n [82] print.condition                                     \n [83] print.connection                                    \n [84] print.CRAN_package_reverse_dependencies_and_views*  \n [85] print.data.frame                                    \n [86] print.Date                                          \n [87] print.default                                       \n [88] print.dendrogram*                                   \n [89] print.density*                                      \n [90] print.difftime                                      \n [91] print.dist*                                         \n [92] print.Dlist                                         \n [93] print.DLLInfo                                       \n [94] print.DLLInfoList                                   \n [95] print.DLLRegisteredRoutines                         \n [96] print.document_context*                             \n [97] print.document_position*                            \n [98] print.document_range*                               \n [99] print.document_selection*                           \n[100] print.dummy_coef*                                   \n[101] print.dummy_coef_list*                              \n[102] print.ecdf*                                         \n[103] print.eigen                                         \n[104] print.factanal*                                     \n[105] print.factor                                        \n[106] print.family*                                       \n[107] print.fileSnapshot*                                 \n[108] print.findLineNumResult*                            \n[109] print.formula*                                      \n[110] print.fseq*                                         \n[111] print.ftable*                                       \n[112] print.function                                      \n[113] print.getAnywhere*                                  \n[114] print.glm*                                          \n[115] print.hclust*                                       \n[116] print.help_files_with_topic*                        \n[117] print.hexmode                                       \n[118] print.HoltWinters*                                  \n[119] print.hsearch*                                      \n[120] print.hsearch_db*                                   \n[121] print.htest*                                        \n[122] print.html*                                         \n[123] print.html_dependency*                              \n[124] print.htmltools.selector*                           \n[125] print.htmltools.selector.list*                      \n[126] print.infl*                                         \n[127] print.integrate*                                    \n[128] print.isoreg*                                       \n[129] print.json*                                         \n[130] print.key_missing*                                  \n[131] print.kmeans*                                       \n[132] print.knitr_kable*                                  \n[133] print.Latex*                                        \n[134] print.LaTeX*                                        \n[135] print.libraryIQR                                    \n[136] print.listof                                        \n[137] print.lm*                                           \n[138] print.loadings*                                     \n[139] print.loess*                                        \n[140] print.logLik*                                       \n[141] print.ls_str*                                       \n[142] print.medpolish*                                    \n[143] print.method_table*                                 \n[144] print.MethodsFunction*                              \n[145] print.mtable*                                       \n[146] print.NativeRoutineList                             \n[147] print.news_db*                                      \n[148] print.nls*                                          \n[149] print.noquote                                       \n[150] print.numeric_version                               \n[151] print.object_size*                                  \n[152] print.octmode                                       \n[153] print.packageDescription*                           \n[154] print.packageInfo                                   \n[155] print.packageIQR*                                   \n[156] print.packageStatus*                                \n[157] print.pairwise.htest*                               \n[158] print.person*                                       \n[159] print.POSIXct                                       \n[160] print.POSIXlt                                       \n[161] print.power.htest*                                  \n[162] print.ppr*                                          \n[163] print.prcomp*                                       \n[164] print.princomp*                                     \n[165] print.proc_time                                     \n[166] print.quosure*                                      \n[167] print.quosures*                                     \n[168] print.raster*                                       \n[169] print.Rd*                                           \n[170] print.recordedplot*                                 \n[171] print.restart                                       \n[172] print.RGBcolorConverter*                            \n[173] print.rlang_box_done*                               \n[174] print.rlang_box_splice*                             \n[175] print.rlang_data_pronoun*                           \n[176] print.rlang_dict*                                   \n[177] print.rlang_dyn_array*                              \n[178] print.rlang_envs*                                   \n[179] print.rlang_error*                                  \n[180] print.rlang_fake_data_pronoun*                      \n[181] print.rlang_lambda_function*                        \n[182] print.rlang_message*                                \n[183] print.rlang_trace*                                  \n[184] print.rlang_warning*                                \n[185] print.rlang_zap*                                    \n[186] print.rlang:::list_of_conditions*                   \n[187] print.rle                                           \n[188] print.rlib_bytes*                                   \n[189] print.rlib_error_3_0*                               \n[190] print.rlib_trace_3_0*                               \n[191] print.roman*                                        \n[192] print.scalar*                                       \n[193] print.sessionInfo*                                  \n[194] print.shiny.tag*                                    \n[195] print.shiny.tag.env*                                \n[196] print.shiny.tag.list*                               \n[197] print.shiny.tag.query*                              \n[198] print.simple.list                                   \n[199] print.smooth.spline*                                \n[200] print.socket*                                       \n[201] print.srcfile                                       \n[202] print.srcref                                        \n[203] print.stepfun*                                      \n[204] print.stl*                                          \n[205] print.StructTS*                                     \n[206] print.subdir_tests*                                 \n[207] print.summarize_CRAN_check_status*                  \n[208] print.summary.aov*                                  \n[209] print.summary.aovlist*                              \n[210] print.summary.ecdf*                                 \n[211] print.summary.glm*                                  \n[212] print.summary.lm*                                   \n[213] print.summary.loess*                                \n[214] print.summary.manova*                               \n[215] print.summary.nls*                                  \n[216] print.summary.packageStatus*                        \n[217] print.summary.ppr*                                  \n[218] print.summary.prcomp*                               \n[219] print.summary.princomp*                             \n[220] print.summary.table                                 \n[221] print.summary.warnings                              \n[222] print.summaryDefault                                \n[223] print.table                                         \n[224] print.tables_aov*                                   \n[225] print.terms*                                        \n[226] print.ts*                                           \n[227] print.tskernel*                                     \n[228] print.TukeyHSD*                                     \n[229] print.tukeyline*                                    \n[230] print.tukeysmooth*                                  \n[231] print.undoc*                                        \n[232] print.vignette*                                     \n[233] print.warnings                                      \n[234] print.xfun_raw_string*                              \n[235] print.xfun_rename_seq*                              \n[236] print.xfun_strict_list*                             \n[237] print.xgettext*                                     \n[238] print.xngettext*                                    \n[239] print.xtabs*                                        \nsee '?methods' for accessing help and source code"
  },
  {
    "objectID": "slides/lec04.html#find-the-documentation",
    "href": "slides/lec04.html#find-the-documentation",
    "title": "Object oriented programming",
    "section": "Find the documentation",
    "text": "Find the documentation\nWrite the name of the function to see its definition.\n\nprint.factor\n\nfunction (x, quote = FALSE, max.levels = NULL, width = getOption(\"width\"), \n    ...) \n{\n    ord <- is.ordered(x)\n    if (length(x) == 0L) \n        cat(if (ord) \n            \"ordered\"\n        else \"factor\", \"(0)\\n\", sep = \"\")\n    else {\n        xx <- character(length(x))\n        xx[] <- as.character(x)\n        keepAttrs <- setdiff(names(attributes(x)), c(\"levels\", \n            \"class\"))\n        attributes(xx)[keepAttrs] <- attributes(x)[keepAttrs]\n        print(xx, quote = quote, ...)\n    }\n    maxl <- if (is.null(max.levels)) \n        TRUE\n    else max.levels\n    if (maxl) {\n        n <- length(lev <- encodeString(levels(x), quote = ifelse(quote, \n            \"\\\"\", \"\")))\n        colsep <- if (ord) \n            \" < \"\n        else \" \"\n        T0 <- \"Levels: \"\n        if (is.logical(maxl)) \n            maxl <- {\n                width <- width - (nchar(T0, \"w\") + 3L + 1L + \n                  3L)\n                lenl <- cumsum(nchar(lev, \"w\") + nchar(colsep, \n                  \"w\"))\n                if (n <= 1L || lenl[n] <= width) \n                  n\n                else max(1L, which.max(lenl > width) - 1L)\n            }\n        drop <- n > maxl\n        cat(if (drop) \n            paste(format(n), \"\"), T0, paste(if (drop) \n            c(lev[1L:max(1, maxl - 1)], \"...\", if (maxl > 1) lev[n])\n        else lev, collapse = colsep), \"\\n\", sep = \"\")\n    }\n    if (!isTRUE(val <- .valid.factor(x))) \n        warning(val)\n    invisible(x)\n}\n<bytecode: 0x7fa01974f030>\n<environment: namespace:base>"
  },
  {
    "objectID": "slides/lec04.html#missing-print-functions",
    "href": "slides/lec04.html#missing-print-functions",
    "title": "Object oriented programming",
    "section": "Missing print functions?",
    "text": "Missing print functions?\nThere is no method to print integers specifically:\n\nprint.integer\n\nError in eval(expr, envir, enclos): object 'print.integer' not found\n\n\n\n\nWhen a method for a specific class is not found, the default will be called:\n\n\nprint.default\n\nfunction (x, digits = NULL, quote = TRUE, na.print = NULL, print.gap = NULL, \n    right = FALSE, max = NULL, width = NULL, useSource = TRUE, \n    ...) \n{\n    args <- pairlist(digits = digits, quote = quote, na.print = na.print, \n        print.gap = print.gap, right = right, max = max, width = width, \n        useSource = useSource, ...)\n    missings <- c(missing(digits), missing(quote), missing(na.print), \n        missing(print.gap), missing(right), missing(max), missing(width), \n        missing(useSource))\n    .Internal(print.default(x, args, missings))\n}\n<bytecode: 0x7fa01a9c3f50>\n<environment: namespace:base>"
  },
  {
    "objectID": "slides/lec04.html#what-methods-are-specialized-for-a-class",
    "href": "slides/lec04.html#what-methods-are-specialized-for-a-class",
    "title": "Object oriented programming",
    "section": "What methods are specialized for a class?",
    "text": "What methods are specialized for a class?\n\nmethods(class = \"factor\")\n\n [1] [             [[            [[<-          [<-           all.equal    \n [6] as.character  as.data.frame as.Date       as.list       as.logical   \n[11] as.POSIXlt    as.vector     c             coerce        droplevels   \n[16] format        initialize    is.na<-       length<-      levels<-     \n[21] Math          Ops           plot          print         relevel      \n[26] relist        rep           show          slotsFromS3   summary      \n[31] Summary       xtfrm        \nsee '?methods' for accessing help and source code"
  },
  {
    "objectID": "slides/lec04.html#make-your-own-class-and-class-specific-methods",
    "href": "slides/lec04.html#make-your-own-class-and-class-specific-methods",
    "title": "Object oriented programming",
    "section": "Make your own class and class-specific methods",
    "text": "Make your own class and class-specific methods\nCreate an object of a new class\n\ncloud = structure(c(1, 2, 3), # object called cloud with some values\n              class = \"first_class\") # new class type\ncloud\n\n[1] 1 2 3\nattr(,\"class\")\n[1] \"first_class\"\n\n\nCreate a new method for first_class objects\n\nprint.first_class = function(x) {\n  cat(\"Soldier, first class.\\n\")\n  print.default(unclass(x))\n}\n\n\nprint(cloud)\n\nSoldier, first class.\n[1] 1 2 3\n\n\n\n\nclass(cloud) = \"double\"\nprint(cloud)\n\n[1] 1 2 3"
  },
  {
    "objectID": "slides/lec04.html#defining-a-new-s3-generic",
    "href": "slides/lec04.html#defining-a-new-s3-generic",
    "title": "Object oriented programming",
    "section": "Defining a new S3 Generic",
    "text": "Defining a new S3 Generic\n\nshuffle = function(x) {\n  UseMethod(\"shuffle\")\n}\n\n\n\nshuffle.default = function(x) {\n  stop(\"Class \", class(x), \" is not supported by shuffle. \\n\", call. = FALSE)\n}\n\n\n\n\nshuffle.factor = function(f) {\n  factor( sample(as.character(f)), levels = sample(levels(f)) )\n}\nshuffle.integer = function(x) {\n  sample(x)\n}\n\n\n\n\n\n\nshuffle( 1:10 )\n\n [1]  1  6  8  5  7  3  4 10  2  9\n\nshuffle( factor(c(\"A\",\"B\",\"C\",\"A\")) )\n\n[1] B C A A\nLevels: B A C\n\n\n\n\nshuffle( c(1, 2, 3, 4, 5) )\n\nError: Class numeric is not supported by shuffle. \n\nshuffle( letters[1:5] )\n\nError: Class character is not supported by shuffle."
  },
  {
    "objectID": "slides/lec04.html#exercise-1",
    "href": "slides/lec04.html#exercise-1",
    "title": "Object oriented programming",
    "section": "Exercise 1",
    "text": "Exercise 1\nCreate a class called ‚Äúaccounting‚Äù. If a numeric vector has this class, function print() should print the vector with a $ in front of each number and display values up to two decimals. Create a method for this class and test it on the accounting object expenses below\n\nexpenses = structure(\n  c(500.5, 750, 200.3, 305.11),\n  class = \"accounting\")\n\nprint(expenses)\n\n[1] 500.50 750.00 200.30 305.11\nattr(,\"class\")\n[1] \"accounting\"\n\n\n\n\n\n\n\n\nHint\n\n\n\nUse format(500, digits = 2, nsmall = 2) as a template to round to specific significant digits.\nUse paste or paste0 to piece strings together."
  },
  {
    "objectID": "slides/lec04.html#exercise-2",
    "href": "slides/lec04.html#exercise-2",
    "title": "Object oriented programming",
    "section": "Exercise 2",
    "text": "Exercise 2\nBelow is an S3 method called report, it is designed to return a message about the type/mode/class of an object passed to it.\n\nreport = function(x) {\n  UseMethod(\"report\")\n}\nreport.default = function(x) {\n  \"This class does not have a method defined.\"\n}\n\nCreate an implementation for classes integer, double and numeric. The functions should print to the screen ‚ÄúI‚Äôm an integer‚Äù, ‚ÄúI‚Äôm a double‚Äù, and ‚ÄúI‚Äôm a numeric‚Äù respectively.\nNext,\n\nrun report(1) and report(1L).\nrun rm(\"report.integer\") and re-run the functions. What has changed?\nlook at class(1), mode(1), typeof(1). Does this surprise you?\n\n\n\nIntegers and doubles violate the typical class searching rule."
  },
  {
    "objectID": "slides/lec04.html#date-class",
    "href": "slides/lec04.html#date-class",
    "title": "Object oriented programming",
    "section": "Date class",
    "text": "Date class\nDate vectors are built on top of double vectors. They have class ‚ÄúDate‚Äù and no other attributes:\n\ntoday = Sys.Date()\n\ntypeof(today)\n\n[1] \"double\"\n\nattributes(today)\n\n$class\n[1] \"Date\"\n\n\n\nThe dawn of time\nThe date is measured in unix time, that is, the number of days that have passed since January 1st, 1970. Seconds are counted similarly, startin from the beginning of time, 1970 00:00:00 UTC.\nExamples\n\n\n\nas.double(today)\n\n[1] 19385\n\nunclass(today)\n\n[1] 19385\n\n\n\n\ndate = as.Date(\"1970-01-11\")\n\nunclass(date)\n\n[1] 10"
  },
  {
    "objectID": "slides/lec04.html#date-times",
    "href": "slides/lec04.html#date-times",
    "title": "Object oriented programming",
    "section": "Date-times",
    "text": "Date-times\nR offers two ways to store date-time info. POSIXct, and POSIXlt\n\nPOSIX stands for ‚ÄúPortable Operating Systems Interface‚Äù X (‚Äúacross‚Äù) platforms\n\nct: calendar time\nlt: local time\n\n\nct is the simplest, is built on top of an atomic vector, and is most appropriate for use in data frames."
  },
  {
    "objectID": "slides/lec04.html#exercise-3",
    "href": "slides/lec04.html#exercise-3",
    "title": "Object oriented programming",
    "section": "Exercise 3",
    "text": "Exercise 3\n\nwhat class is today?\nhow can you find all the different functions that take the class of today?\nhow many days until the end of class? Note: the last day of class is April 26. Use difftime"
  },
  {
    "objectID": "slides/lec04.html#matrices",
    "href": "slides/lec04.html#matrices",
    "title": "Object oriented programming",
    "section": "Matrices",
    "text": "Matrices\nR supports the creation of 2d data structures (rows and columns) of atomic vector types. Generally these are formed via a call to matrix().\n\n\n\nmatrix(1:4, nrow=2, ncol=2)\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\n\n\nmatrix(LETTERS[1:6], 2)\n\n     [,1] [,2] [,3]\n[1,] \"A\"  \"C\"  \"E\" \n[2,] \"B\"  \"D\"  \"F\" \n\n\n\n\n\nMatrices in R use column major ordering (data is sorted in column order not row order).\n\n\n\n(m = matrix(1:6, nrow=2, ncol=3))\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\nc(m)\n\n[1] 1 2 3 4 5 6\n\n\n\n\n(n = matrix(1:6, nrow=3,\n            ncol=2, byrow=TRUE))\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n\nc(n)\n\n[1] 1 3 5 2 4 6"
  },
  {
    "objectID": "slides/lec04.html#data-frames",
    "href": "slides/lec04.html#data-frames",
    "title": "Object oriented programming",
    "section": "Data frames",
    "text": "Data frames\nData frames are built on top of lists with attributes: names, row.names, and class. Here the class is data.frame.\n\ntypeof(cars)\n\n[1] \"list\"\n\nattributes(cars)\n\n$names\n[1] \"speed\" \"dist\" \n\n$class\n[1] \"data.frame\"\n\n$row.names\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n\nstr(unclass(cars))\n\nList of 2\n $ speed: num [1:50] 4 4 7 7 8 9 10 10 10 11 ...\n $ dist : num [1:50] 2 10 4 22 16 10 18 26 34 17 ...\n - attr(*, \"row.names\")= int [1:50] 1 2 3 4 5 6 7 8 9 10 ...\n\n\n\nA data frame is how R handles heterogeneous tabular data (i.e.¬†rows and columns) and is one of the most commonly used data structure in R."
  },
  {
    "objectID": "slides/lec04.html#matrix-structure",
    "href": "slides/lec04.html#matrix-structure",
    "title": "Object oriented programming",
    "section": "Matrix structure",
    "text": "Matrix structure\nMatrices (and arrays) are just atomic vectors with a dim attribute attached (they do not have a class attribute, but they do have a class).\n\nm = matrix(1:4, ncol=2, nrow=2)\n\n\n\n\ntypeof(m)\n\n[1] \"integer\"\n\nmode(m)\n\n[1] \"numeric\"\n\n\n\n\nclass(m)\n\n[1] \"matrix\" \"array\" \n\nattributes(m)\n\n$dim\n[1] 2 2\n\n\n\n\n\nn = letters[1:6]\ndim(n) = c(2L, 3L)\nn\n\n     [,1] [,2] [,3]\n[1,] \"a\"  \"c\"  \"e\" \n[2,] \"b\"  \"d\"  \"f\" \n\nclass(n)\n\n[1] \"matrix\" \"array\""
  },
  {
    "objectID": "slides/lec04.html#arrays",
    "href": "slides/lec04.html#arrays",
    "title": "Object oriented programming",
    "section": "Arrays",
    "text": "Arrays\nArrays are just an \\(n\\)-dimensional extension of matrices and are defined by adding the appropriate dimension sizes.\n\n\n\narray(1:8, dim = c(2,2,2))\n\n, , 1\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n, , 2\n\n     [,1] [,2]\n[1,]    5    7\n[2,]    6    8\n\n\n\n\narray(letters[1:6], dim = c(2,1,3))\n\n, , 1\n\n     [,1]\n[1,] \"a\" \n[2,] \"b\" \n\n, , 2\n\n     [,1]\n[1,] \"c\" \n[2,] \"d\" \n\n, , 3\n\n     [,1]\n[1,] \"e\" \n[2,] \"f\""
  },
  {
    "objectID": "slides/lec04.html#build-your-own-data-frame",
    "href": "slides/lec04.html#build-your-own-data-frame",
    "title": "Object oriented programming",
    "section": "Build your own data frame",
    "text": "Build your own data frame\n\ndf = list(x = 1:3, y = c(\"a\", \"b\", \"c\"), z = c(TRUE, TRUE, TRUE))\n\nattr(df,\"class\") = \"data.frame\"\nattr(df,\"row.names\") = 1:3\ndf\n\n  x y    z\n1 1 a TRUE\n2 2 b TRUE\n3 3 c TRUE\n\nstr(df)\n\n'data.frame':   3 obs. of  3 variables:\n $ x: int  1 2 3\n $ y: chr  \"a\" \"b\" \"c\"\n $ z: logi  TRUE TRUE TRUE\n\nis.data.frame(df)\n\n[1] TRUE\n\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "solutions/quizzes.html",
    "href": "solutions/quizzes.html",
    "title": "quiz solutions",
    "section": "",
    "text": "quiz 1\n\nExercise 1Solution\n\n\nIs x a list or an atomic vector?\n\nx = c(1L, 1)\n\n\n\nx is an atomic vector. Specifically, 1L is coerced to type double due to c().\n\nx = c(1L, 1)\ntypeof(x)\n\n[1] \"double\"\n\n\n\n\n\n\nExercise 2Solution\n\n\nThe output below is the result of printing object y to the screen. Is y a list or an atomic vector?\n\n\n[[1]]\n[1] 3\n\n[[2]]\nfunction(x) {\n  return(x ^ 2)\n}\n\n\n\n\ny is a list because it has heterogeneous elements. The first element is the double 3 while the second element is a function.\n\n\n\n\nExercise 3Solution\n\n\nWhat is the output of the following code chunk:\n\nTRUE | NA\n\n\n\n\n\n[1] TRUE\n\n\n\n\n\n\nExercise 4Solution\n\n\nWhat‚Äôs a generic?\n\n\nA generic is a function that dispatches to other class-specific functions depending on the class of the argument.\n\n\n\n\n\nquiz 2\n\nExercise 1Solution\n\n\nselect() returns a ___\n\n\ndata frame or tibble\n\n\n\n\nExercise 2Solution\n\n\n%>% and |> are both ___\n\n\npipes\n\n\n\n\nExercise 3Solution\n\n\nmutate() creates a new ___\n\n\ncolumn\n\n\n\n\nExercise 4Solution\n\n\nTRUE or FALSE: a tidy data frame has individual observations on the rows, variables on the columns and values in each cell.\n\n\nTRUE\n\n\n\n\n\nquiz 3\n\nExercise 1Solution\n\n\nThe gg in ggplot stands for ___ of ___.\n\n\ngrammar of graphics\n\n\n\n\nExercise 2Solution\n\n\nTo create a scatter plot with ggplot2, I need to add the geometry geom_[___]\n\n\npoint, geom_point()\n\n\n\n\nExercise 3Solution\n\n\nTRUE or FALSE: to change the color of a plot, based on the column var1 of the data set, I need to put color = var1 inside the aesthetic aes() function. To change the color of all points to red, regardless of the data, I should put color = 'red' outside the aesthetic function.\n\n\nTRUE\n\n\n\n\nExercise 4Solution\n\n\nWhat‚Äôs wrong with the code below?\n\n\n\n\ncars %>%\n  ggplot(aes(x = dist)) \n  geom_histogram()\n\n\n\nMissing a + to connect ggplot layers.\n\n\n\n\n\nquiz 4\n\nExercise 1Solution\n\n\ntrue or false: Newton‚Äôs method, \\(x_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)}\\), iterates to find extrema of function \\(f\\).\n\n\nfalse\n\n\n\n\nExercise 2Solution\n\n\ntrue or false: Newton‚Äôs method always converges to the same point, regardless of starting position \\(x_0\\).\n\n\nfalse"
  },
  {
    "objectID": "slides/lec05.html#tidy-data",
    "href": "slides/lec05.html#tidy-data",
    "title": "Tidyverse",
    "section": "Tidy data",
    "text": "Tidy data\n\nfrom R4DS tidy data"
  },
  {
    "objectID": "slides/lec05.html#tidy-vs-untidy",
    "href": "slides/lec05.html#tidy-vs-untidy",
    "title": "Tidyverse",
    "section": "Tidy vs untidy",
    "text": "Tidy vs untidy\n\n\n\n\n\nList of 3\n $ :List of 8\n  ..$ name      : chr \"Luke Skywalker\"\n  ..$ height    : chr \"172\"\n  ..$ mass      : chr \"77\"\n  ..$ hair_color: chr \"blond\"\n  ..$ skin_color: chr \"fair\"\n  ..$ eye_color : chr \"blue\"\n  ..$ birth_year: chr \"19BBY\"\n  ..$ gender    : chr \"male\"\n $ :List of 8\n  ..$ name      : chr \"C-3PO\"\n  ..$ height    : chr \"167\"\n  ..$ mass      : chr \"75\"\n  ..$ hair_color: chr \"n/a\"\n  ..$ skin_color: chr \"gold\"\n  ..$ eye_color : chr \"yellow\"\n  ..$ birth_year: chr \"112BBY\"\n  ..$ gender    : chr \"n/a\"\n $ :List of 8\n  ..$ name      : chr \"R2-D2\"\n  ..$ height    : chr \"96\"\n  ..$ mass      : chr \"32\"\n  ..$ hair_color: chr \"n/a\"\n  ..$ skin_color: chr \"white, blue\"\n  ..$ eye_color : chr \"red\"\n  ..$ birth_year: chr \"33BBY\"\n  ..$ gender    : chr \"n/a\"\n\n\n\nuntidy!"
  },
  {
    "objectID": "slides/lec05.html#tidy-vs-untidy-1",
    "href": "slides/lec05.html#tidy-vs-untidy-1",
    "title": "Tidyverse",
    "section": "Tidy vs untidy",
    "text": "Tidy vs untidy\n\n\n# A tibble: 317 √ó 7\n   artist         track                   date.entered   wk1   wk2   wk3   wk4\n   <chr>          <chr>                   <date>       <dbl> <dbl> <dbl> <dbl>\n 1 2 Pac          Baby Don't Cry (Keep... 2000-02-26      87    82    72    77\n 2 2Ge+her        The Hardest Part Of ... 2000-09-02      91    87    92    NA\n 3 3 Doors Down   Kryptonite              2000-04-08      81    70    68    67\n 4 3 Doors Down   Loser                   2000-10-21      76    76    72    69\n 5 504 Boyz       Wobble Wobble           2000-04-15      57    34    25    17\n 6 98^0           Give Me Just One Nig... 2000-08-19      51    39    34    26\n 7 A*Teens        Dancing Queen           2000-07-08      97    97    96    95\n 8 Aaliyah        I Don't Wanna           2000-01-29      84    62    51    41\n 9 Aaliyah        Try Again               2000-03-18      59    53    38    28\n10 Adams, Yolanda Open My Heart           2000-08-26      76    76    74    69\n# ‚Ä¶ with 307 more rows\n\n\n\nBasically tidy, but we have repeated measures."
  },
  {
    "objectID": "slides/lec05.html#pivot-longer",
    "href": "slides/lec05.html#pivot-longer",
    "title": "Tidyverse",
    "section": "Pivot longer",
    "text": "Pivot longer\n\n\n\n\n\n\nlibrary(tidyr)\ntable4a |>\n  pivot_longer(2:3, names_to = \"year\", values_to = \"cases\")\n\n# A tibble: 6 √ó 3\n  country     year   cases\n  <chr>       <chr>  <int>\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n\n\nFrom data import cheatsheet"
  },
  {
    "objectID": "slides/lec05.html#pivot-wider",
    "href": "slides/lec05.html#pivot-wider",
    "title": "Tidyverse",
    "section": "Pivot wider",
    "text": "Pivot wider\n\n\n\n\n\n\n\n\n\n\nlibrary(tidyr)\ntable2 |>\n  pivot_wider(names_from = type, values_from = count)\n\n# A tibble: 6 √ó 4\n  country      year  cases population\n  <chr>       <int>  <int>      <int>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n\n\nFrom data import cheatsheet"
  },
  {
    "objectID": "slides/lec05.html#exercise-1",
    "href": "slides/lec05.html#exercise-1",
    "title": "Tidyverse",
    "section": "Exercise 1",
    "text": "Exercise 1\nReshape the billboard data set from the package tidyr so that song/week pairs make a single observation.\n\ntidyr::billboard |>\n  head(10)\n\n# A tibble: 10 √ó 79\n   artist track date.ent‚Ä¶¬π   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8   wk9\n   <chr>  <chr> <date>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 2 Pac  Baby‚Ä¶ 2000-02-26    87    82    72    77    87    94    99    NA    NA\n 2 2Ge+h‚Ä¶ The ‚Ä¶ 2000-09-02    91    87    92    NA    NA    NA    NA    NA    NA\n 3 3 Doo‚Ä¶ Kryp‚Ä¶ 2000-04-08    81    70    68    67    66    57    54    53    51\n 4 3 Doo‚Ä¶ Loser 2000-10-21    76    76    72    69    67    65    55    59    62\n 5 504 B‚Ä¶ Wobb‚Ä¶ 2000-04-15    57    34    25    17    17    31    36    49    53\n 6 98^0   Give‚Ä¶ 2000-08-19    51    39    34    26    26    19     2     2     3\n 7 A*Tee‚Ä¶ Danc‚Ä¶ 2000-07-08    97    97    96    95   100    NA    NA    NA    NA\n 8 Aaliy‚Ä¶ I Do‚Ä¶ 2000-01-29    84    62    51    41    38    35    35    38    38\n 9 Aaliy‚Ä¶ Try ‚Ä¶ 2000-03-18    59    53    38    28    21    18    16    14    12\n10 Adams‚Ä¶ Open‚Ä¶ 2000-08-26    76    76    74    69    68    67    61    58    57\n# ‚Ä¶ with 67 more variables: wk10 <dbl>, wk11 <dbl>, wk12 <dbl>, wk13 <dbl>,\n#   wk14 <dbl>, wk15 <dbl>, wk16 <dbl>, wk17 <dbl>, wk18 <dbl>, wk19 <dbl>,\n#   wk20 <dbl>, wk21 <dbl>, wk22 <dbl>, wk23 <dbl>, wk24 <dbl>, wk25 <dbl>,\n#   wk26 <dbl>, wk27 <dbl>, wk28 <dbl>, wk29 <dbl>, wk30 <dbl>, wk31 <dbl>,\n#   wk32 <dbl>, wk33 <dbl>, wk34 <dbl>, wk35 <dbl>, wk36 <dbl>, wk37 <dbl>,\n#   wk38 <dbl>, wk39 <dbl>, wk40 <dbl>, wk41 <dbl>, wk42 <dbl>, wk43 <dbl>,\n#   wk44 <dbl>, wk45 <dbl>, wk46 <dbl>, wk47 <dbl>, wk48 <dbl>, wk49 <dbl>, ‚Ä¶"
  },
  {
    "objectID": "slides/lec05.html#a-quick-note-on-pipes",
    "href": "slides/lec05.html#a-quick-note-on-pipes",
    "title": "Tidyverse",
    "section": "A quick note on pipes",
    "text": "A quick note on pipes\nIn the previous examples, you saw the base R pipe |>.\nThe pipe links functions and arguments together in an easy to read way.\nSpecifically, the pipe takes what comes before and makes it an argument to what comes after.\nExample\n\nnested functions\n\n\npark(drive(start_car(find(\"keys\")), to = \"campus\"))\n\n\npipeline\n\n\nfind(\"keys\") %>%\n    start_car() %>%\n    drive(to = \"campus\") %>%\n    park()"
  },
  {
    "objectID": "slides/lec05.html#base-r-vs-magrittr",
    "href": "slides/lec05.html#base-r-vs-magrittr",
    "title": "Tidyverse",
    "section": "Base r vs magrittr",
    "text": "Base r vs magrittr\nThere are two pipes we‚Äôll encounter in R:\n\nthe base R pipe |> added in R v4.1.0\nthe magrittr pipe %>%\n\n\nThe main differences are:\n\nthe base pipe doesn‚Äôt require loading the package magrittr (contained in the tidyverse)\nthe base pipe is negligibly faster in some cases\nthe base pipe doesn‚Äôt support . argument passing\n\n\n\nExample\n\n\n\nx = c(1, 3, NA)\n\nTRUE %>%\n  mean(x, na.rm = .)\n\n[1] 2\n\n\n\n\nTRUE |>\n  mean(x, na.rm = .)\n\nError in mean.default(TRUE, x, na.rm = .): object '.' not found"
  },
  {
    "objectID": "slides/lec05.html#dplyr-continued",
    "href": "slides/lec05.html#dplyr-continued",
    "title": "Tidyverse",
    "section": "dplyr continued",
    "text": "dplyr continued\nadditional useful functions\nGroups of rows:\n\nsummarise(): collapses a group into a single row.\ncount(): count unique values of one or more variables.\ngroup_by(): perform calculations separately for each value of a variable\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec05.html#dplyr-verbs",
    "href": "slides/lec05.html#dplyr-verbs",
    "title": "Tidyverse",
    "section": "dplyr verbs",
    "text": "dplyr verbs\ndplyr names functions as verbs that manipulate data frames\nQuick summary of key dplyr function from dplyr vignette:\n\n\nRows:\n\nfilter():chooses rows based on column values. See logical operations\nslice(): chooses rows based on location.\narrange(): changes the order of the rows\ndistinct(): filter for unique rows (.keep_all = TRUE is useful)\nsample_n(): take a random subset of the rows\n\n\nColumns:\n\nselect(): changes whether or not a column is included.\nrename(): changes the name of columns.\nmutate(): changes the values of columns and creates new columns.\npull(): grab column as a vector\nrelocate(): change column order\n\n\n\nGroups of rows:\n\nsummarise(): collapses a group into a single row.\ncount(): count unique values of one or more variables.\ngroup_by()/ungroup(): modify other verbs to act on subsets\n\n‚Ä¶ and more"
  },
  {
    "objectID": "slides/lec05.html#dplyr-rules",
    "href": "slides/lec05.html#dplyr-rules",
    "title": "Tidyverse",
    "section": "dplyr rules",
    "text": "dplyr rules\n\nFirst argument is always a data frame\nSubsequent arguments say what to do with that data frame\nAlways return a data frame\nDon‚Äôt modify in place\nLazy evaluation magic"
  },
  {
    "objectID": "slides/lec05.html#nyc-flights",
    "href": "slides/lec05.html#nyc-flights",
    "title": "Tidyverse",
    "section": "NYC flights",
    "text": "NYC flights\n\nlibrary(nycflights13)\nglimpse(flights)\n\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2‚Ä¶\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1‚Ä¶\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1‚Ä¶\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, ‚Ä¶\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, ‚Ä¶\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1‚Ä¶\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,‚Ä¶\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,‚Ä¶\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1‚Ä¶\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"‚Ä¶\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4‚Ä¶\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394‚Ä¶\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",‚Ä¶\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",‚Ä¶\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1‚Ä¶\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, ‚Ä¶\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6‚Ä¶\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0‚Ä¶\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0‚Ä¶"
  },
  {
    "objectID": "slides/lec05.html#example-1-1",
    "href": "slides/lec05.html#example-1-1",
    "title": "Tidyverse",
    "section": "Example 1",
    "text": "Example 1\n\nflights %>% \n  filter(dest %in% c(\"RDU\", \"ATL\", \"MCO\")) %>%\n  mutate(time_hours = air_time / 60) %>%\n  mutate(mph = distance / time_hours) %>%\n  group_by(dest) %>%\n  summarize(mean_speed = mean(mph, na.rm = TRUE))\n\n# A tibble: 3 √ó 2\n  dest  mean_speed\n  <chr>      <dbl>\n1 ATL         405.\n2 MCO         422.\n3 RDU         364.\n\n\n\nTake the flights data frame and then filter for destination airports: (RDU, ATL, MCO).\nNext mutate a new column time_hours that reports air time of the flight in hours.\nMutate a column mph that reports miles per hour.\nGroup by destination and then summarize the mean flight speed towards each destination."
  },
  {
    "objectID": "slides/lec05.html#example-2",
    "href": "slides/lec05.html#example-2",
    "title": "Tidyverse",
    "section": "Example 2",
    "text": "Example 2"
  },
  {
    "objectID": "slides/lec05.html#exercise-2",
    "href": "slides/lec05.html#exercise-2",
    "title": "Tidyverse",
    "section": "Exercise 2",
    "text": "Exercise 2\nUsing the flights data frame within the nycflights13 package:\n\nWhich plane (check the tail number) flew out of each New York airport the most?\nWhich day of the year should you fly on if you want to have the lowest possible average departure delay? What about arrival delay?\nWhat was the shortest flight out of each airport in terms of distance?\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec05.html#example-1-distinct",
    "href": "slides/lec05.html#example-1-distinct",
    "title": "Tidyverse",
    "section": "Example 1: distinct()",
    "text": "Example 1: distinct()\nHow many flights are in the data set?\n\nflights %>%\n  distinct(tailnum) %>%\n  nrow()\n\n[1] 4044\n\n\n\nHow many distinct routes?\n\nflights %>%\n  select(origin, dest) %>%\n  distinct() %>%\n  nrow()\n\n[1] 224"
  },
  {
    "objectID": "slides/lec05.html#example-2-select",
    "href": "slides/lec05.html#example-2-select",
    "title": "Tidyverse",
    "section": "Example 2: select()",
    "text": "Example 2: select()\nSelect two columns\n\nselect(flights, arr_delay, dest)\n\n# A tibble: 336,776 √ó 2\n   arr_delay dest \n       <dbl> <chr>\n 1        11 IAH  \n 2        20 IAH  \n 3        33 MIA  \n 4       -18 BQN  \n 5       -25 ATL  \n 6        12 ORD  \n 7        19 FLL  \n 8       -14 IAD  \n 9        -8 MCO  \n10         8 ORD  \n# ‚Ä¶ with 336,766 more rows\n\n\n\nSelect columns that contain information about departures or arrivals.\n\nflights %>% \n  select(contains(\"dep_\"), contains(\"arr_\"))\n\n# A tibble: 336,776 √ó 6\n   dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay\n      <int>          <int>     <dbl>    <int>          <int>     <dbl>\n 1      517            515         2      830            819        11\n 2      533            529         4      850            830        20\n 3      542            540         2      923            850        33\n 4      544            545        -1     1004           1022       -18\n 5      554            600        -6      812            837       -25\n 6      554            558        -4      740            728        12\n 7      555            600        -5      913            854        19\n 8      557            600        -3      709            723       -14\n 9      557            600        -3      838            846        -8\n10      558            600        -2      753            745         8\n# ‚Ä¶ with 336,766 more rows\n\n\n\n\nSelect the numeric columns\n\nflights %>% \n  select(where(is.numeric))\n\n# A tibble: 336,776 √ó 14\n    year month   day dep_time sched_dep‚Ä¶¬π dep_d‚Ä¶¬≤ arr_t‚Ä¶¬≥ sched‚Ä¶‚Å¥ arr_d‚Ä¶‚Åµ flight\n   <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl>  <int>\n 1  2013     1     1      517         515       2     830     819      11   1545\n 2  2013     1     1      533         529       4     850     830      20   1714\n 3  2013     1     1      542         540       2     923     850      33   1141\n 4  2013     1     1      544         545      -1    1004    1022     -18    725\n 5  2013     1     1      554         600      -6     812     837     -25    461\n 6  2013     1     1      554         558      -4     740     728      12   1696\n 7  2013     1     1      555         600      -5     913     854      19    507\n 8  2013     1     1      557         600      -3     709     723     -14   5708\n 9  2013     1     1      557         600      -3     838     846      -8     79\n10  2013     1     1      558         600      -2     753     745       8    301\n# ‚Ä¶ with 336,766 more rows, 4 more variables: air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, and abbreviated variable names ¬π‚Äãsched_dep_time,\n#   ¬≤‚Äãdep_delay, ¬≥‚Äãarr_time, ‚Å¥‚Äãsched_arr_time, ‚Åµ‚Äãarr_delay"
  },
  {
    "objectID": "slides/lec05.html#example-3-many-together",
    "href": "slides/lec05.html#example-3-many-together",
    "title": "Tidyverse",
    "section": "Example 3: many together",
    "text": "Example 3: many together\nWhat‚Äôs the average speed in miles per hour of flights traveling to Raleigh-Durham, Atlanta and Orlando airports?\n\nflights %>% \n  filter(dest %in% c(\"RDU\", \"ATL\", \"MCO\")) %>%\n  mutate(time_hours = air_time / 60) %>%\n  mutate(mph = distance / time_hours) %>%\n  group_by(dest) %>%\n  summarize(mean_speed = mean(mph, na.rm = TRUE))\n\n# A tibble: 3 √ó 2\n  dest  mean_speed\n  <chr>      <dbl>\n1 ATL         405.\n2 MCO         422.\n3 RDU         364.\n\n\n\nTake the flights data frame and then filter for destination airports: (RDU, ATL, MCO).\nNext mutate a new column time_hours that reports air time of the flight in hours.\nMutate a column mph that reports miles per hour.\nGroup by destination and then summarize the mean flight speed towards each destination."
  },
  {
    "objectID": "slides/lec05.html#distinct",
    "href": "slides/lec05.html#distinct",
    "title": "Tidyverse",
    "section": "distinct()",
    "text": "distinct()\nHow many flights are in the data set?\n\nflights %>%\n  distinct(tailnum) %>%\n  nrow()\n\n[1] 4044\n\n\n\nHow many distinct routes?\n\nflights %>%\n  select(origin, dest) %>%\n  distinct() %>%\n  nrow()\n\n[1] 224"
  },
  {
    "objectID": "slides/lec05.html#select-two-columns",
    "href": "slides/lec05.html#select-two-columns",
    "title": "Tidyverse",
    "section": "select() two columns",
    "text": "select() two columns\n\nselect(flights, arr_delay, dest)\n\n# A tibble: 336,776 √ó 2\n   arr_delay dest \n       <dbl> <chr>\n 1        11 IAH  \n 2        20 IAH  \n 3        33 MIA  \n 4       -18 BQN  \n 5       -25 ATL  \n 6        12 ORD  \n 7        19 FLL  \n 8       -14 IAD  \n 9        -8 MCO  \n10         8 ORD  \n# ‚Ä¶ with 336,766 more rows"
  },
  {
    "objectID": "slides/lec05.html#select-columns-that-contain-information-about-departures-or-arrivals",
    "href": "slides/lec05.html#select-columns-that-contain-information-about-departures-or-arrivals",
    "title": "Tidyverse",
    "section": "select() columns that contain information about departures or arrivals",
    "text": "select() columns that contain information about departures or arrivals\n\nflights %>% \n  select(contains(\"dep_\"), contains(\"arr_\"))\n\n# A tibble: 336,776 √ó 6\n   dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay\n      <int>          <int>     <dbl>    <int>          <int>     <dbl>\n 1      517            515         2      830            819        11\n 2      533            529         4      850            830        20\n 3      542            540         2      923            850        33\n 4      544            545        -1     1004           1022       -18\n 5      554            600        -6      812            837       -25\n 6      554            558        -4      740            728        12\n 7      555            600        -5      913            854        19\n 8      557            600        -3      709            723       -14\n 9      557            600        -3      838            846        -8\n10      558            600        -2      753            745         8\n# ‚Ä¶ with 336,766 more rows"
  },
  {
    "objectID": "slides/lec05.html#select-the-numeric-or-not-numeric-columns",
    "href": "slides/lec05.html#select-the-numeric-or-not-numeric-columns",
    "title": "Tidyverse",
    "section": "select() the numeric (or not numeric) columns",
    "text": "select() the numeric (or not numeric) columns\n\nflights %>% \n  select(where(is.numeric)) %>%\n  head(3)\n\n# A tibble: 3 √ó 14\n   year month   day dep_time sched_dep_‚Ä¶¬π dep_d‚Ä¶¬≤ arr_t‚Ä¶¬≥ sched‚Ä¶‚Å¥ arr_d‚Ä¶‚Åµ flight\n  <int> <int> <int>    <int>        <int>   <dbl>   <int>   <int>   <dbl>  <int>\n1  2013     1     1      517          515       2     830     819      11   1545\n2  2013     1     1      533          529       4     850     830      20   1714\n3  2013     1     1      542          540       2     923     850      33   1141\n# ‚Ä¶ with 4 more variables: air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, and abbreviated variable names ¬π‚Äãsched_dep_time, ¬≤‚Äãdep_delay,\n#   ¬≥‚Äãarr_time, ‚Å¥‚Äãsched_arr_time, ‚Åµ‚Äãarr_delay\n\n\n\nflights %>% \n  select(where(function(x) !is.numeric(x))) %>%\n  head(5)\n\n# A tibble: 5 √ó 5\n  carrier tailnum origin dest  time_hour          \n  <chr>   <chr>   <chr>  <chr> <dttm>             \n1 UA      N14228  EWR    IAH   2013-01-01 05:00:00\n2 UA      N24211  LGA    IAH   2013-01-01 05:00:00\n3 AA      N619AA  JFK    MIA   2013-01-01 05:00:00\n4 B6      N804JB  JFK    BQN   2013-01-01 05:00:00\n5 DL      N668DN  LGA    ATL   2013-01-01 06:00:00"
  },
  {
    "objectID": "slides/lec05.html#combined-example",
    "href": "slides/lec05.html#combined-example",
    "title": "Tidyverse",
    "section": "combined example",
    "text": "combined example\nWhat‚Äôs the average speed in miles per hour of flights traveling to Raleigh-Durham, Atlanta and Orlando airports?\n\nflights %>% \n  filter(dest %in% c(\"RDU\", \"ATL\", \"MCO\")) %>%\n  mutate(time_hours = air_time / 60) %>%\n  mutate(mph = distance / time_hours) %>%\n  group_by(dest) %>%\n  summarize(mean_speed = mean(mph, na.rm = TRUE))\n\n# A tibble: 3 √ó 2\n  dest  mean_speed\n  <chr>      <dbl>\n1 ATL         405.\n2 MCO         422.\n3 RDU         364.\n\n\n\nTake the flights data frame and then filter for destination airports: (RDU, ATL, MCO).\nNext mutate a new column time_hours that reports air time of the flight in hours.\nMutate a column mph that reports miles per hour.\nGroup by destination and then summarize the mean flight speed towards each destination."
  },
  {
    "objectID": "slides/lec05.html#exclude-with-select",
    "href": "slides/lec05.html#exclude-with-select",
    "title": "Tidyverse",
    "section": "exclude with select()",
    "text": "exclude with select()\nselect() all but the first 10 columns\n\nflights %>%\n  select(-1:10)\n\nWarning in x:y: numerical expression has 18 elements: only the first used\n\n\n# A tibble: 336,776 √ó 9\n   month   day dep_time sched_dep_time dep_delay arr_t‚Ä¶¬π sched‚Ä¶¬≤ arr_d‚Ä¶¬≥ carrier\n   <int> <int>    <int>          <int>     <dbl>   <int>   <int>   <dbl> <chr>  \n 1     1     1      517            515         2     830     819      11 UA     \n 2     1     1      533            529         4     850     830      20 UA     \n 3     1     1      542            540         2     923     850      33 AA     \n 4     1     1      544            545        -1    1004    1022     -18 B6     \n 5     1     1      554            600        -6     812     837     -25 DL     \n 6     1     1      554            558        -4     740     728      12 UA     \n 7     1     1      555            600        -5     913     854      19 B6     \n 8     1     1      557            600        -3     709     723     -14 EV     \n 9     1     1      557            600        -3     838     846      -8 B6     \n10     1     1      558            600        -2     753     745       8 AA     \n# ‚Ä¶ with 336,766 more rows, and abbreviated variable names ¬π‚Äãarr_time,\n#   ¬≤‚Äãsched_arr_time, ¬≥‚Äãarr_delay"
  },
  {
    "objectID": "slides/lec05.html#relocate",
    "href": "slides/lec05.html#relocate",
    "title": "Tidyverse",
    "section": "relocate()",
    "text": "relocate()\n\nflights %>% \n  relocate(carrier, origin, dest) %>% # to the front\n  names()\n\n [1] \"carrier\"        \"origin\"         \"dest\"           \"year\"          \n [5] \"month\"          \"day\"            \"dep_time\"       \"sched_dep_time\"\n [9] \"dep_delay\"      \"arr_time\"       \"sched_arr_time\" \"arr_delay\"     \n[13] \"flight\"         \"tailnum\"        \"air_time\"       \"distance\"      \n[17] \"hour\"           \"minute\"         \"time_hour\"     \n\n\n\n\nflights %>%\n  relocate(year, month, day, .after = last_col()) %>% # to the end\n  names()\n\n [1] \"dep_time\"       \"sched_dep_time\" \"dep_delay\"      \"arr_time\"      \n [5] \"sched_arr_time\" \"arr_delay\"      \"carrier\"        \"flight\"        \n [9] \"tailnum\"        \"origin\"         \"dest\"           \"air_time\"      \n[13] \"distance\"       \"hour\"           \"minute\"         \"time_hour\"     \n[17] \"year\"           \"month\"          \"day\""
  },
  {
    "objectID": "slides/lec05.html#rename",
    "href": "slides/lec05.html#rename",
    "title": "Tidyverse",
    "section": "rename()",
    "text": "rename()\nchange the column names\n\nflights %>% \n  relocate(tailnum) %>% \n  rename(tail_number = tailnum)\n\n# A tibble: 336,776 √ó 19\n   tail_number  year month   day dep_t‚Ä¶¬π sched‚Ä¶¬≤ dep_d‚Ä¶¬≥ arr_t‚Ä¶‚Å¥ sched‚Ä¶‚Åµ arr_d‚Ä¶‚Å∂\n   <chr>       <int> <int> <int>   <int>   <int>   <dbl>   <int>   <int>   <dbl>\n 1 N14228       2013     1     1     517     515       2     830     819      11\n 2 N24211       2013     1     1     533     529       4     850     830      20\n 3 N619AA       2013     1     1     542     540       2     923     850      33\n 4 N804JB       2013     1     1     544     545      -1    1004    1022     -18\n 5 N668DN       2013     1     1     554     600      -6     812     837     -25\n 6 N39463       2013     1     1     554     558      -4     740     728      12\n 7 N516JB       2013     1     1     555     600      -5     913     854      19\n 8 N829AS       2013     1     1     557     600      -3     709     723     -14\n 9 N593JB       2013     1     1     557     600      -3     838     846      -8\n10 N3ALAA       2013     1     1     558     600      -2     753     745       8\n# ‚Ä¶ with 336,766 more rows, 9 more variables: carrier <chr>, flight <int>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names ¬π‚Äãdep_time,\n#   ¬≤‚Äãsched_dep_time, ¬≥‚Äãdep_delay, ‚Å¥‚Äãarr_time, ‚Åµ‚Äãsched_arr_time, ‚Å∂‚Äãarr_delay"
  },
  {
    "objectID": "slides/lec05.html#re-name-with-select",
    "href": "slides/lec05.html#re-name-with-select",
    "title": "Tidyverse",
    "section": "re-name with select()",
    "text": "re-name with select()\n\nflights %>% \n  select(tail_number = tailnum)\n\n# A tibble: 336,776 √ó 1\n   tail_number\n   <chr>      \n 1 N14228     \n 2 N24211     \n 3 N619AA     \n 4 N804JB     \n 5 N668DN     \n 6 N39463     \n 7 N516JB     \n 8 N829AS     \n 9 N593JB     \n10 N3ALAA     \n# ‚Ä¶ with 336,766 more rows"
  },
  {
    "objectID": "slides/lec05.html#arrange",
    "href": "slides/lec05.html#arrange",
    "title": "Tidyverse",
    "section": "arrange()",
    "text": "arrange()\n\n\n\nset.seed(10)\nflights %>% \n  slice_sample(n = 3) %>% \n  select(tailnum, day) %>% \n  arrange(day)\n\n# A tibble: 3 √ó 2\n  tailnum   day\n  <chr>   <int>\n1 N258JB     17\n2 N3CPAA     20\n3 N515MJ     31\n\n\n\n\nset.seed(10)\nflights %>% \n  slice_sample(n = 3) %>% \n  select(tailnum, day) %>% \n  arrange(desc(day))\n\n# A tibble: 3 √ó 2\n  tailnum   day\n  <chr>   <int>\n1 N515MJ     31\n2 N3CPAA     20\n3 N258JB     17\n\n\n\n\n\n\narrange() defaults to ascending order. Use desc() for descending order.\nyou can arrange by multiple columns"
  },
  {
    "objectID": "slides/lec05.html#group_by",
    "href": "slides/lec05.html#group_by",
    "title": "Tidyverse",
    "section": "group_by()",
    "text": "group_by()\n\nflights %>% \n  group_by(origin)\n\n# A tibble: 336,776 √ó 19\n# Groups:   origin [3]\n    year month   day dep_time sched_de‚Ä¶¬π dep_d‚Ä¶¬≤ arr_t‚Ä¶¬≥ sched‚Ä¶‚Å¥ arr_d‚Ä¶‚Åµ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      517        515       2     830     819      11 UA     \n 2  2013     1     1      533        529       4     850     830      20 UA     \n 3  2013     1     1      542        540       2     923     850      33 AA     \n 4  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 5  2013     1     1      554        600      -6     812     837     -25 DL     \n 6  2013     1     1      554        558      -4     740     728      12 UA     \n 7  2013     1     1      555        600      -5     913     854      19 B6     \n 8  2013     1     1      557        600      -3     709     723     -14 EV     \n 9  2013     1     1      557        600      -3     838     846      -8 B6     \n10  2013     1     1      558        600      -2     753     745       8 AA     \n# ‚Ä¶ with 336,766 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¬π‚Äãsched_dep_time, ¬≤‚Äãdep_delay, ¬≥‚Äãarr_time, ‚Å¥‚Äãsched_arr_time, ‚Åµ‚Äãarr_delay"
  },
  {
    "objectID": "slides/lec05.html#summarize-with-group_by",
    "href": "slides/lec05.html#summarize-with-group_by",
    "title": "Tidyverse",
    "section": "summarize() with group_by()",
    "text": "summarize() with group_by()\n\nflights %>% \n  group_by(origin) %>%\n  summarize(\n    n = n(), \n    min_dep_delay = min(dep_delay, na.rm = TRUE), \n    max_dep_delay = max(dep_delay, na.rm = TRUE)\n  )\n\n# A tibble: 3 √ó 4\n  origin      n min_dep_delay max_dep_delay\n  <chr>   <int>         <dbl>         <dbl>\n1 EWR    120835           -25          1126\n2 JFK    111279           -43          1301\n3 LGA    104662           -33           911"
  },
  {
    "objectID": "slides/lec05.html#groups-after-summarize",
    "href": "slides/lec05.html#groups-after-summarize",
    "title": "Tidyverse",
    "section": "Groups after summarize",
    "text": "Groups after summarize\n\n\n\nflights %>% \n  group_by(origin) %>%\n  summarize(\n    n = n(), \n    min_dep_delay = min(dep_delay, na.rm = TRUE), \n    max_dep_delay = max(dep_delay, na.rm = TRUE),\n    .groups = \"drop_last\"\n  )\n\n# A tibble: 3 √ó 4\n  origin      n min_dep_delay max_dep_delay\n  <chr>   <int>         <dbl>         <dbl>\n1 EWR    120835           -25          1126\n2 JFK    111279           -43          1301\n3 LGA    104662           -33           911\n\n\n\n\nflights %>% \n  group_by(origin) %>%\n  summarize(\n    n = n(), \n    min_dep_delay = min(dep_delay, na.rm = TRUE), \n    max_dep_delay = max(dep_delay, na.rm = TRUE),\n    .groups = \"keep\"\n  )\n\n# A tibble: 3 √ó 4\n# Groups:   origin [3]\n  origin      n min_dep_delay max_dep_delay\n  <chr>   <int>         <dbl>         <dbl>\n1 EWR    120835           -25          1126\n2 JFK    111279           -43          1301\n3 LGA    104662           -33           911"
  },
  {
    "objectID": "slides/lec05.html#count",
    "href": "slides/lec05.html#count",
    "title": "Tidyverse",
    "section": "count()",
    "text": "count()\ncount() is a quick group_by() and summarize()\n\n\n\nflights %>% \n  group_by(origin, carrier) %>%\n  summarize(n = n(), .groups = \"drop\")\n\n# A tibble: 35 √ó 3\n   origin carrier     n\n   <chr>  <chr>   <int>\n 1 EWR    9E       1268\n 2 EWR    AA       3487\n 3 EWR    AS        714\n 4 EWR    B6       6557\n 5 EWR    DL       4342\n 6 EWR    EV      43939\n 7 EWR    MQ       2276\n 8 EWR    OO          6\n 9 EWR    UA      46087\n10 EWR    US       4405\n# ‚Ä¶ with 25 more rows\n\n\n\n\nflights %>%\n  count(origin, carrier)\n\n# A tibble: 35 √ó 3\n   origin carrier     n\n   <chr>  <chr>   <int>\n 1 EWR    9E       1268\n 2 EWR    AA       3487\n 3 EWR    AS        714\n 4 EWR    B6       6557\n 5 EWR    DL       4342\n 6 EWR    EV      43939\n 7 EWR    MQ       2276\n 8 EWR    OO          6\n 9 EWR    UA      46087\n10 EWR    US       4405\n# ‚Ä¶ with 25 more rows"
  },
  {
    "objectID": "slides/lec05.html#mutate-with-group_by",
    "href": "slides/lec05.html#mutate-with-group_by",
    "title": "Tidyverse",
    "section": "mutate() with group_by()",
    "text": "mutate() with group_by()\n\nflights %>% group_by(origin) %>%\n  mutate(\n    n = n(), \n  ) %>%\n  select(origin, n)\n\n# A tibble: 336,776 √ó 2\n# Groups:   origin [3]\n   origin      n\n   <chr>   <int>\n 1 EWR    120835\n 2 LGA    104662\n 3 JFK    111279\n 4 JFK    111279\n 5 LGA    104662\n 6 EWR    120835\n 7 EWR    120835\n 8 LGA    104662\n 9 JFK    111279\n10 LGA    104662\n# ‚Ä¶ with 336,766 more rows"
  },
  {
    "objectID": "quizzes/quiz02.html",
    "href": "quizzes/quiz02.html",
    "title": "Quiz 2",
    "section": "",
    "text": "Exercise 1\nselect() returns a ___\n\n\nExercise 2\n%>% and |> are both ___\n\n\nExercise 3\nmutate() creates a new ___\n\n\nExercise 4\nTRUE or FALSE: a tidy data frame has individual observations on the rows, variables on the columns and values in each cell.\n\n\n\n04:00"
  },
  {
    "objectID": "labs/lab2.html",
    "href": "labs/lab2.html",
    "title": "Lab 2: computational masonry",
    "section": "",
    "text": "By the end of the lab, you will‚Ä¶"
  },
  {
    "objectID": "labs/lab2.html#exercises",
    "href": "labs/lab2.html#exercises",
    "title": "Lab 2: computational masonry",
    "section": "Exercises",
    "text": "Exercises\nFor all exercises, you should respond in the space provided in the template lab-2.qmd and show all your work. In all answers of type double, three significant figures suffices.\n\n1. Mixture densities\nSometimes called an ‚Äúadmixture density‚Äù, a mixture density is a convex combination (i.e.¬†a weighted sum, with non-negative weights that sum to 1) of other density functions. The general form is\n\\[\nf(x) = \\sum_{i = 1}^n w_i p_i(x)\n\\] where \\(p_i(x)\\) are density functions and \\(w_i\\) are weights such that \\(w_i \\geq 0\\) and \\(\\sum_i w_i = 1\\). To sample from \\(f(x)\\), one can simply sample from \\(p_i(x)\\) with probability \\(w_i\\).\nMixture densities are often used to model distinct subpopulations within a population.\nFor example, different species of lemurs have very different weights. Even when controlling for sex, age and pregnancy status of the lemurs, the distribution of weights across species still looks bimodal. In the plot below, approximately \\(\\frac{1}{3}\\) of lemurs weigh less than 500 grams, and approximately \\(\\frac{2}{3}\\) of all lemurs weigh more than 1000 grams.\n\n\n\n\n\n\nWrite a function called rNormalMixture1 that takes takes arguments w1, w2, mu1, mu2, sd1, sd2 and returns a single sample from a mixture of two Gaussians. Test your function on the following cases\n\n\n#case i\nrNormalMixture1(w1 = 1/3,\n                w2 = 2/3,\n                mu1 = 300,\n                mu2 = 2750,\n                sd1 = 10,\n                sd2 = 100)\n\n# case ii\nrNormalMixture1(w1 = 0.6,\n                w2 = 0.5,\n                mu1 = 1,\n                mu2 = 3,\n                sd1 = 1,\n                sd2 = 0.5)\n\n# case iii\nrNormalMixture1(w1 = -0.6,\n                w2 = 1.6,\n                mu1 = 1,\n                mu2 = 3,\n                sd1 = 1,\n                sd2 = 0.5)\n\n\n\n\n\n\n\nHint\n\n\n\nCheck that the arguments are numeric and that the weights obey the rules outlined above.\n\n\n\nWrite another function called rNormalMixture2 that takes argument n, w1, w2, mu1, mu2, sd1, sd2 and returns \\(n\\) samples from your mixture of two Gaussians by calling rNormalMixture1() \\(n\\) times.\n\nTest your function on the following case and then print out the first 10 entries of \\(x\\) to the screen.\n\n# case iv\nx = rNormalMixture2(n = 10000,\n                w1 = 1/3,\n                w2 = 2/3,\n                mu1 = 300,\n                mu2 = 2750,\n                sd1 = 10,\n                sd2 = 100)\n\nx[1:10]\n\n\nUse UnivarMixingDistribution within the distr package to replicate case (iv) above. You might need to install the package in the console with install.packages(\"distr\"). Read the help file on UnivarMixingDistribution for an example of how to create a univariate mixing distribution. Call your distribution myNormalMixture and then use the code below to test it out.\n\n\nrMyNormalMixture = r(myNormalMixture)\nrMyNormalMixture(n = 10000)\n\n\nTime (see system.time({}) from lab 0) how long rNormalMixture2 takes vs how long rMyNormalMixture takes to generate n = 10000 samples and report your findings.\n\n\n\n2. Skeleton of a graphical model\n\n\n\n\n\nWe might use the image above to visualize the conditional dependencies between random variables. For example,\n\\[\np(y_2 |y_1) = N(y_1, \\sigma_2^2).\n\\]\nIn words, \\(y_2\\) is normally distributed with mean \\(y_1\\) and variance \\(\\sigma_2^2\\).\nWithin this context, we say \\(y_1\\) is a parent node to \\(y_2\\), or \\(y_2\\) is a child node of \\(y_1\\).\n\nCreate an object y1 that has class node and is a list with the following entries:\n\nid = ‚Äúy1‚Äù,\nchildren = ‚Äúy2‚Äù,\nparent = NULL,\nmean = 0\nsd = 1\n\n\nPrint y1 to the screen.\n\nNext create a function makeNode that takes arguments id, children, parent, mean, and sd and returns an object of class node. id should be of type character. Your function should check that the arguments are of appropriate type. Make the default argument for parent and children be NULL to represent nodes at the boundaries of your graph. Give a warning if the user tries to create an isolated node (a node with no parent/child nodes). Test your function on the cases below\n\n\n# case i\nmakeNode(id = \"y2\", children = NULL,\n         parent = \"y1\", mean = y1$mean,\n         sd = 2)\n\n# case ii\nmakdeNode(id = 0, children = \"y3\",\n          parent = \"y1\", mean = y1$mean, \n          sd = 2)\n\n# case iii\nmakdeNode(id = \"y3\", mean = y1$mean, \n          sd = 2)\n\n\nWrite a vectorized function getParent that takes a list of class node and returns the names of each node‚Äôs parents. It should return ‚ÄúNo parent‚Äù in the case of no parent. Test your function on the code below\n\n\ny1 = makeNode(id = \"y1\", children = \"y2\",\n         parent = NULL, mean = 0,\n         sd = 1)\n\ny2 = makeNode(id = \"y2\", children = NULL,\n         parent = \"y1\", mean = y1$mean,\n         sd = 2)\n\ngetParent(list(y1, y2))\n\n\n\n\n\n\n\nHint\n\n\n\n\nThe length of NULL is 0.\nUse [[]] to access the object in the list.\n\n\n\n\n\n3. Lego Sales Data\n\nData\nFor this task you will be working with a synthetic data set of sales records for Lego construction sets. We will assume that the original data was stored in a JSON format but a colleague has managed to import it into R as a list of lists (of lists). The code below will load a copy of the object, called sales, into your environment.\nsales = readRDS(\"data/lego_sales.rds\")\nThe data is structured such that each entry in the top list represents a different purchaser. These list entries contain basic information about the purchaser (name, age, phone number, etc.) as well as their purchase history. Everyone in the data set has purchased at least one lego set but some many have made multiple purchases. The purchase histories are stored in the purchases element which is also a list of lists. Each entry within the purchases list reflects a different Lego set which the customer purchased. Note that the customer may have purchased more than one copy of any particular set, this number is stored as Quantity within the purchase record.\n\n\n\nPart 1 - Tidy the data\nYour job here is to covert the sales object into a tidy data frame. Tidy in this case means each row should represents a separate purchase of a lego set by an individual and the columns should correspond to the keys in the JSON data. Duplicate columns should be avoided as much as possible and no data should be lost / ignored in your conversion.\nSeveral guidelines / hints:\n\nBe careful about making assumptions about the data - it is not as messy as real world data, but it is also not pristine and you are meant to run into several hiccups along the way.\nPay attention to types - the data frame you create should have columns that are of a type that matches the original data.\nDon‚Äôt worry about duplicated data - since a customer can purchase multiple Lego sets that customer‚Äôs information may show up in multiple rows. This is fine and expected given the structure of the data. For the CS types: first normal form is ok in this case regardless of whatever your Databases professor may have told you.\nDealing with duplicate purchases - some customers purchased more than one copy of a particular lego set, for these individuals you can choose to code the purchase as multiple rows within the data frame or as a single row that also includes the quantity value. Either approach is fine, but your write up should discuss your choice.\nAvoid hard coding features of the data into your solutions (e.g.¬†column names for your data frame should be determined at runtime as much as possible).\nDo not use magic numbers, always use column names whenever possible, similarly don‚Äôt assume a specific size for the data (e.g.¬†number of columns or rows) - all of these should be determined at run time.\nMore generally, assume that the specific data could be changed at any time, and a new but identically structured data set could be provided. Make as few assumptions as possible about the data (some will be necessary, but should be stated explicitly in your write up).\nYou may assume that purchasers are uniquely identified by the first name, last name, and phone number.\nWhen answering questions, in the case of a tie - all equivalent rows should be returned.\n\n\n\n\nPart 2 - Questions\nThis task will involve answering a number of questions about that data that will involve manipulating and summarizing the data frame you created in part 1. You are also welcome to use the original sales object if you believe that approach is more efficient for any particular question.\nNo write up is needed for these questions as long as you include reasonably well documented code (using comments). Make sure that your code outputs your answer and only your answer.\n\n\nWhat are the three most common first names of purchasers?\nWhich Lego theme has made the most money for Lego?\nDo men or women buy more Lego sets (per person) on average?\nWhat are the five most popular hobbies of Lego purchasers?\nWhich area code has spent the most money on Legos? (In the US the area code is the first 3 digits of a phone number)"
  },
  {
    "objectID": "labs/lab2.html#style-guidelines",
    "href": "labs/lab2.html#style-guidelines",
    "title": "Lab 2: computational masonry",
    "section": "Style guidelines",
    "text": "Style guidelines\nAll assignments in this course must employ proper coding style, as outlined below:\n\nAll code should obey the 80 character limit per line (i.e.¬†no code should run off the page when rendering or require scrolling). To enable a vertical line in the RStudio IDE that helps guide this, see the style guidelines from lab 0 or ask a member of the teaching team for help.\nAll commas should be followed by a space.\nAll binary operators should be surrounded by space. For example x + y is appropriate. x+y is not.\nAll pipes %>% or |> as well as ggplot layers + should be followed by a new line.\nYou should be consistent with stylistic choices, e.g.¬†only use 1 of = vs <- and %>% vs |>\nYour name should be at the top (in the YAML) of each document under ‚Äúauthor:‚Äù\nAll code chunks should be named (with names that don‚Äôt have spaces, e.g.¬†ex-1, ex-2 etc.)\nFile names in your GitHub repo such as lab-x.qmd must not be changed and left as provided. Additionally, your repo must pass certain basic checks. The results of these checks are visible on GitHub via the badges at the top of your README and the actions tab. These are meant to give you feedback around the structure and reproducibility of your repository and assignment - they do not assess the correctness of your work. You should consider them a necessary but not sufficient condition when turning in your work - passing all of the checks simply means your have met a minimum standard of reproducibility for the assignment.\n\nFundamentally, the check is making sure 1) you only have the files you should in your repository, 2) your .qmd renders.\nIf you have any questions about style, please ask a member of the teaching team."
  },
  {
    "objectID": "labs/lab2.html#submitting-your-lab",
    "href": "labs/lab2.html#submitting-your-lab",
    "title": "Lab 2: computational masonry",
    "section": "Submitting your lab",
    "text": "Submitting your lab\nTo submit your assignment, simply commit and push your completed lab-x.qmd to your GitHub repo. Your most recent commit 48 hours after the assignment deadline will be graded, and any applicable late penalty will be applied (see the syllabus). For this reason, do not push commits after you are satisfied with your work, or a late penalty will be applied."
  },
  {
    "objectID": "labs/lab3.html",
    "href": "labs/lab3.html",
    "title": "Lab 3: dream of plots",
    "section": "",
    "text": "‚ÄúI dream of plots, and then I plot my dreams‚Äù\nVincent van Gogh (loosely)\nBy the end of the lab, you will‚Ä¶"
  },
  {
    "objectID": "labs/lab3.html#exercises",
    "href": "labs/lab3.html#exercises",
    "title": "Lab 3: dream of plots",
    "section": "Exercises",
    "text": "Exercises\nFor all exercises, you should respond in the space provided in the template lab-3.qmd and show all your work. In all answers of type double, three significant figures suffices.\n\n1. Re-create the plot\nUsing the untidy data set statsci.csv, re-create the plot below. Pay attention to re-creating exactly all aspects of the plot, e.g.¬†axes, labels, capitalization etc.\n\n\n\n\n\n\n\nHint\n\n\n\n\nBegin by making the data set tidy.\nThe colors used are: \"cadetblue4\", \"cadetblue3\", \"lightgoldenrod4\", \"lightgoldenrod3\".\nThe position of the legend is \\((0.2, 0.8)\\).\nDouble check that your plot renders nicely. The default should be fine, but you might need to adjust fig-width and fig-height YAML options read here.\n\n\n\n\n\n2. Custom ggplot functionality\nCreate a new stat called stat_outlier_encircle() that encircles outliers in a set of bivariate data. Define an outlier as when both values in a data pair have a z-score greater than three in absolute value. Check out https://ggplot2.tidyverse.org/articles/extending-ggplot2.html.\nSome examples of stat_outlier_encircle() in action are given below.\nA typical scatter plot with ggplot() and geom_point():\n\n# copy this code chunk and use this data for the exercise\nlibrary(tidyverse)\nset.seed(09567899)\ndata_norm = tibble(x = c(rnorm(95, 100, 5), rnorm(5, 70, 5)), \n                    y = c(rnorm(95, 100, 5), rnorm(5, 70, 5)))\n\nggplot(data_norm, mapping = aes(x = x, y = y)) +\n  geom_point() +\n  theme_minimal()\n\nAn added layer that marks outliers:\n\nggplot(data_norm, mapping = aes(x = x, y = y)) +\n  geom_point() +\n  stat_outlier_encircle() +\n  theme_minimal()\n\n\n\nggplot(data_norm, mapping = aes(x = x, y = y)) +\n  geom_point() +\n  stat_outlier_encircle(color = \"purple\", size = 14, \n                        fill = \"lightblue\", alpha = .4) +\n  theme_minimal()\n\n\nCreate the new stat stat_outlier_encircle() so that the code chunks above give the output above.\n\n\n\n\n\n\nHint\n\n\n\nSee ggplot lecture for a template and read the documentation here for help.\n\n\n\n\n3. Admixture density plot\nPlot the density of the admixture distribution you created in lab 2 case (iv). Overlay your plot on the histogram of lemur weights (find lemurs.csv in the data folder).\nCreate a second plot like you did above, but adjust \\(\\mu_1\\), \\(\\mu_2\\), \\(\\sigma_1\\) and \\(\\sigma_2\\) until your distribution fits the plot better. Report the values you choose for \\(\\mu_1\\), \\(\\mu_2\\), \\(\\sigma_1\\) and \\(\\sigma_2\\). An example of such a fit is provided below. Your plot does not need to look exactly like the one below. Explain why you choose the values you do for \\(\\mu_1\\), \\(\\mu_2\\), \\(\\sigma_1\\) and \\(\\sigma_2\\).\n\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\nHow can you make the y-axis of the histogram be on the ‚Äúdensity‚Äù scale instead of the ‚Äúcount‚Äù scale?\nPreviously you created rMyNormalMixture function that randomly sampled from your distribution. Now you want to create a dMyNormalMixture function that returns the density of the function instead, see e.g.¬†dnorm documentation."
  },
  {
    "objectID": "labs/lab3.html#style-guidelines",
    "href": "labs/lab3.html#style-guidelines",
    "title": "Lab 3: dream of plots",
    "section": "Style guidelines",
    "text": "Style guidelines\nAll assignments in this course must employ proper coding style, as outlined below:\n\nAll code should obey the 80 character limit per line (i.e.¬†no code should run off the page when rendering or require scrolling). To enable a vertical line in the RStudio IDE that helps guide this, see the style guidelines from lab 0 or ask a member of the teaching team for help.\nAll commas should be followed by a space.\nAll binary operators should be surrounded by space. For example x + y is appropriate. x+y is not.\nAll pipes %>% or |> as well as ggplot layers + should be followed by a new line.\nYou should be consistent with stylistic choices, e.g.¬†only use 1 of = vs <- and %>% vs |>\nYour name should be at the top (in the YAML) of each document under ‚Äúauthor:‚Äù\nAll code chunks should be named (with names that don‚Äôt have spaces, e.g.¬†ex-1, ex-2 etc.)\nFile names in your GitHub repo such as lab-x.qmd must not be changed and left as provided. Additionally, your repo must pass certain basic checks. The results of these checks are visible on GitHub via the badges at the top of your README and the actions tab. These are meant to give you feedback around the structure and reproducibility of your repository and assignment - they do not assess the correctness of your work. You should consider them a necessary but not sufficient condition when turning in your work - passing all of the checks simply means your have met a minimum standard of reproducibility for the assignment.\n\nFundamentally, the check is making sure 1) you only have the files you should in your repository, 2) your .qmd renders.\nIf you have any questions about style, please ask a member of the teaching team."
  },
  {
    "objectID": "labs/lab3.html#submitting-your-lab",
    "href": "labs/lab3.html#submitting-your-lab",
    "title": "Lab 3: dream of plots",
    "section": "Submitting your lab",
    "text": "Submitting your lab\nTo submit your assignment, simply commit and push your completed lab-x.qmd to your GitHub repo. Your most recent commit 48 hours after the assignment deadline will be graded, and any applicable late penalty will be applied (see the syllabus). For this reason, do not push commits after you are satisfied with your work, or a late penalty will be applied."
  },
  {
    "objectID": "slides/lec06.html#announcements",
    "href": "slides/lec06.html#announcements",
    "title": "Subsetting",
    "section": "Announcements",
    "text": "Announcements\n\nexam 1 date on schedule\n\n\n\nquiz 02"
  },
  {
    "objectID": "slides/lec06.html#subsetting-in-general",
    "href": "slides/lec06.html#subsetting-in-general",
    "title": "Subsetting",
    "section": "Subsetting in general",
    "text": "Subsetting in general\nR has three subsetting operators ([, [[, and $). The behavior of these operators will depend on the object (class) they are being used with.\n\nIn general there are 6 different types of subsetting that can be performed:\n\n\n\nPositive integer\nNegative integer\nLogical value\n\n\n\nEmpty\nZero valued / NULL\nCharacter value (names)"
  },
  {
    "objectID": "slides/lec06.html#integer-subsetting",
    "href": "slides/lec06.html#integer-subsetting",
    "title": "Subsetting and ggplot",
    "section": "Integer subsetting",
    "text": "Integer subsetting\nI want values from a specific index.\nPositive subsetting\n\nx = c(1,4,7); y = list(1,4,7)\n\n::: columns ::: {.column width=‚Äú50%‚Äù}\n\nx[1]\n\n[1] 1\n\nx[c(1,3)]\n\n[1] 1 7\n\nx[c(1.9, 2.1)]\n\n[1] 1 4\n\n\n\nstr(y[1])\n\nList of 1\n $ : num 1\n\n\n\nstr(y[c(1,3)])\n\nList of 2\n $ : num 1\n $ : num 7\n\nstr(y[c(1.9, 2.1)])\n\nList of 2\n $ : num 1\n $ : num 4\n\n\n:::\n\n\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec06.html#integer-subsetting-values-by-index",
    "href": "slides/lec06.html#integer-subsetting-values-by-index",
    "title": "Subsetting",
    "section": "Integer subsetting: values by index",
    "text": "Integer subsetting: values by index\n\nx = c(1,4,7); y = list(1,4,7)\n\n\n\nPositive subsetting\n\nx[1] # subset a vector get a vector\n\n[1] 1\n\nx[c(1,3)]\n\n[1] 1 7\n\nx[c(1.9, 2.1)] # coercion\n\n[1] 1 4\n\n\n\nstr(y[1]) # subset a list get a list\n\nList of 1\n $ : num 1\n\n\n\nstr(y[c(1.9, 2.1)]) # coercion\n\nList of 2\n $ : num 1\n $ : num 4\n\n\n\n\n\nNegative (exclusionary) subsetting\n\nx[-1]\n\n[1] 4 7\n\n\n\nstr(y[-c(1,2)])\n\nList of 1\n $ : num 7\n\n\n\nx[c(-1,2)]\n\nError in x[c(-1, 2)]: only 0's may be mixed with negative subscripts\n\n\nYou can‚Äôt mix positive and negative values!\n\n\n\nNote that R starts indexing at 1."
  },
  {
    "objectID": "slides/lec06.html#logical-subsetting",
    "href": "slides/lec06.html#logical-subsetting",
    "title": "Subsetting",
    "section": "Logical subsetting",
    "text": "Logical subsetting\nReturns values that correspond to TRUE in the logical vector.\n\nx = c(1, 4, 7, 12)\n\n\nx[c(TRUE, FALSE, TRUE, FALSE)]\n\n[1] 1 7\n\n\n\nx[c(TRUE, FALSE)]\n\n[1] 1 7\n\n\n\nUtility of this\n\nx[x %% 2 == 0]\n\n[1]  4 12\n\n\n\ndplyr::glimpse(cars)\n\nRows: 50\nColumns: 2\n$ speed <dbl> 4, 4, 7, 7, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13‚Ä¶\n$ dist  <dbl> 2, 10, 4, 22, 16, 10, 18, 26, 34, 17, 28, 14, 20, 24, 28, 26, 34‚Ä¶\n\n\n\ncars_with_high_speed = \n  cars[cars$speed > 9,]"
  },
  {
    "objectID": "slides/lec06.html#empty-and-zero-subsetting",
    "href": "slides/lec06.html#empty-and-zero-subsetting",
    "title": "Subsetting",
    "section": "Empty and zero subsetting",
    "text": "Empty and zero subsetting\n\nx = c(1, 4, 7); y = list(1, 4, 7)\n\n\n\nEmpty\nReturns the original vector, this is not the same thing as subsetting with NULL.\n\nx[]\n\n[1] 1 4 7\n\n\n\nstr(y[])\n\nList of 3\n $ : num 1\n $ : num 4\n $ : num 7\n\n\n\nZero subsetting\nSame as subsetting with NULL\n\nx[NULL]\n\nnumeric(0)\n\nx[0]\n\nnumeric(0)\n\nstr(y[NULL])\n\n list()\n\nstr(y[0])\n\n list()"
  },
  {
    "objectID": "slides/lec06.html#character-value-subsetting",
    "href": "slides/lec06.html#character-value-subsetting",
    "title": "Subsetting",
    "section": "Character value subsetting",
    "text": "Character value subsetting\nIf the vector has names, selects elements whose names correspond to the values in the character vector.\n\n\n\nx = c(a = 1, b = 4, c = 7)\n\nx[\"a\"]\n\na \n1 \n\nx[c(\"a\", \"a\")]\n\na a \n1 1 \n\n\n\n\ny = list(a = 1, b = 4, c = 7)\nstr(y[c(\"b\", \"c\")])\n\nList of 2\n $ b: num 4\n $ c: num 7\n\n\n\n\nThis is a great way to subset because position is fragile, but the name is usually more robust as we manipulate our object."
  },
  {
    "objectID": "slides/lec06.html#breaking-subsetting",
    "href": "slides/lec06.html#breaking-subsetting",
    "title": "Subsetting",
    "section": "Breaking subsetting",
    "text": "Breaking subsetting\n\nx = c(1, 4, 7); y = list(1, 4, 7)\n\n\n\nOut of bounds\n\nreturns NA for atomic vector\nreturns NULL for generic vector (list)\nno warning!\n\n\nx[4]\n\n[1] NA\n\nx[-4]\n\n[1] 1 4 7\n\nstr(y[4])\n\nList of 1\n $ : NULL\n\n\n\n\n\nMissing\nSubset with a missing value, we will get back a missing value (atomic vector) or NULL (list).\n\nx[NA] # logical subsetting with length coercion\n\n[1] NA NA NA\n\nx[c(1,NA)] # integer subsetting\n\n[1]  1 NA\n\nstr(y[NA])\n\nList of 3\n $ : NULL\n $ : NULL\n $ : NULL"
  },
  {
    "objectID": "slides/lec06.html#section-2",
    "href": "slides/lec06.html#section-2",
    "title": "Subsetting",
    "section": "[[]]",
    "text": "[[]]\n\n\nAtomic vectors\n[[ subsets like [ except it can only subset for a single value\n\nx = c(a = 1, b = 4, c = 7)\n\nx[1]\n\na \n1 \n\nx[[1]]\n\n[1] 1\n\nx[[TRUE]]\n\n[1] 1\n\nx[[1:2]]\n\nError in x[[1:2]]: attempt to select more than one element in vectorIndex\n\n\n\nGeneric vectors\n[[ subsets a single value, but returns the value - not a list containing that value like [.\n\ny = list(a = 1, b = 4, c = 7:9)\ny[2]\n\n$b\n[1] 4\n\ny[[2]]\n\n[1] 4\n\ny[[1:2]]\n\nError in y[[1:2]]: subscript out of bounds\n\n\n\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec06.html#section-1",
    "href": "slides/lec06.html#section-1",
    "title": "Subsetting",
    "section": "[[",
    "text": "[[\n\n\nAtomic vectors\n[[ subsets like [ except it can only subset for a single value\n\nx = c(a = 1, b = 4, c = 7)\n\nx[1]\n\na \n1 \n\nx[[1]]\n\n[1] 1\n\nx[[TRUE]]\n\n[1] 1\n\nx[[1:2]]\n\nError in x[[1:2]]: attempt to select more than one element in vectorIndex\n\n\n\n\n\nGeneric vectors\n[[ subsets a single value, but returns the value - not a list containing that value like [.\n\ny = list(a = 1, b = 4, c = 7:9)\ny[2]\n\n$b\n[1] 4\n\ny[[2]]\n\n[1] 4\n\ny[[1:2]]\n\nError in y[[1:2]]: subscript out of bounds\n\ny[[c(2,1)]]\n\n[1] 4"
  },
  {
    "objectID": "slides/lec06.html#hadleys-analogy-1",
    "href": "slides/lec06.html#hadleys-analogy-1",
    "title": "Subsetting",
    "section": "Hadley‚Äôs analogy 1",
    "text": "Hadley‚Äôs analogy 1"
  },
  {
    "objectID": "slides/lec06.html#hadleys-analogy-2",
    "href": "slides/lec06.html#hadleys-analogy-2",
    "title": "Subsetting",
    "section": "Hadley‚Äôs analogy 2",
    "text": "Hadley‚Äôs analogy 2"
  },
  {
    "objectID": "slides/lec06.html#vs",
    "href": "slides/lec06.html#vs",
    "title": "Subsetting",
    "section": "[[ vs $",
    "text": "[[ vs $\n$ is equivalent to [[ but it only works for named lists and it uses partial matching for names.\n\nx = c(\"abc\" = 1, \"def\" = 5)\nx$abc\n\nError in x$abc: $ operator is invalid for atomic vectors\n\n\n\n$ is only for generic vectors\n\ny = list(\"abc\" = 1, \"def\" = 5)\ny[[\"abc\"]]\n\n[1] 1\n\ny$abc\n\n[1] 1\n\ny$d \n\n[1] 5\n\n\n\n\nBe careful of the last one!"
  },
  {
    "objectID": "slides/lec06.html#a-common-error",
    "href": "slides/lec06.html#a-common-error",
    "title": "Subsetting",
    "section": "A common error",
    "text": "A common error\nWhy does the following code not work?\n\nx = list(abc = 1:10, def = 10:1)\ny = \"abc\"\n\n\n\n\nx[[y]]\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\n\nx$y\n\nNULL\n\n\n\n\n\nThe expression x$y gets directly interpreted as x[[\"y\"]] by R, note the inclusion of the \"s, this is not the same as the expression x[[y]]."
  },
  {
    "objectID": "slides/lec06.html#exercise",
    "href": "slides/lec06.html#exercise",
    "title": "Subsetting",
    "section": "Exercise",
    "text": "Exercise\nBelow are 100 values,\n\nx = c(56, 3, 17, 2, 4, 9, 6, 5, 19, 5, 2, 3, 5, 0, 13, 12, 6, \n      31, 10, 21, 8, 4, 1, 1, 2, 5, 16, 1, 3, 8, 1,\n      3, 4, 8, 5, 2, 8, 6, 18, 40, 10, 20, 1, 27, 2, 11, 14, 5, 7, \n      0, 3, 0, 7, 0, 8, 10, 10, 12, 8, 82,\n      21, 3, 34, 55, 18, 2, 9, 29, 1, 4, 7, 14, 7, 1, 2, 7, \n      4, 74, 5, 0, 3, 13, 2, 8, 1, 6, 13, 7, 1, 10,\n      5, 2, 4, 4, 14, 15, 4, 17, 1, 9)\n\nsubset to accomplish each of the following:\n\nSelect every third value starting at position 2 in x. The first three entries should be 3, 4, 5\nRemove all values with an odd index (e.g.¬†1, 3, etc.)\nRemove every 4th value, but only if it is odd."
  },
  {
    "objectID": "slides/lec06.html#subsetting-data-frames",
    "href": "slides/lec06.html#subsetting-data-frames",
    "title": "Subsetting",
    "section": "Subsetting data frames",
    "text": "Subsetting data frames\nSince data frames have two dimensions, we can subset either rows, columns or both.\n\n(df = data.frame(x = 1:3, y = c(\"A\",\"B\",\"C\"), z = TRUE))\n\n  x y    z\n1 1 A TRUE\n2 2 B TRUE\n3 3 C TRUE\n\n\n\n\nSubset rows\n\ndf[1, ] # first row\n\n  x y    z\n1 1 A TRUE\n\ndf[c(1,3), ] # first and third row\n\n  x y    z\n1 1 A TRUE\n3 3 C TRUE\n\n\n\nSubset columns\n\ndf[, 1] # first column\n\n[1] 1 2 3\n\ndf[, 1:2] # first through second column\n\n  x y\n1 1 A\n2 2 B\n3 3 C\n\n\n\n\n\nSubset both\n\ndf[1:2,1:2]\n\n  x y\n1 1 A\n2 2 B"
  },
  {
    "objectID": "slides/lec06.html#preserving-vs-simplifying",
    "href": "slides/lec06.html#preserving-vs-simplifying",
    "title": "Subsetting",
    "section": "Preserving vs simplifying",
    "text": "Preserving vs simplifying\nMost of the time, R‚Äôs [ is a preserving operator, in that the returned object will always have the same type/class as the object being subset.\nConfusingly, when used with some classes (e.g.¬†data frame, matrix or array) [ becomes a simplifying operator (does not preserve type) - this behavior is instead controlled by the drop argument.\n\n\ncars |>\n  head(3)\n\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n\n\n\n\nfor columns:\n\nstr(cars[, 1])\n\n num [1:50] 4 4 7 7 8 9 10 10 10 11 ...\n\nstr(cars[, 1, drop = FALSE])\n\n'data.frame':   50 obs. of  1 variable:\n $ speed: num  4 4 7 7 8 9 10 10 10 11 ...\n\n\n\n\nfor rows it‚Äôs the opposite:\n\nstr(cars[1, ])\n\n'data.frame':   1 obs. of  2 variables:\n $ speed: num 4\n $ dist : num 2\n\nstr(cars[1, , drop = TRUE])\n\nList of 2\n $ speed: num 4\n $ dist : num 2"
  },
  {
    "objectID": "slides/lec06.html#preserving-vs-simplifying-summary",
    "href": "slides/lec06.html#preserving-vs-simplifying-summary",
    "title": "Subsetting",
    "section": "Preserving vs simplifying summary",
    "text": "Preserving vs simplifying summary\n\n\n\n\n\n\n\n\nType\nSimplifying\nPreserving\n\n\n\n\nAtomic Vector\nx[[1]]\nx[1]\n\n\nList\nx[[1]]\nx[1]\n\n\nMatrix / Array\nx[[1]]  x[1, ]  x[, 1]\nx[1, , drop=FALSE]  x[, 1, drop=FALSE]\n\n\nFactor\nx[1:4, drop=TRUE]\nx[1:4]  x[[1]]\n\n\nData frame\nx[, 1]  x[[1]]\nx[, 1, drop=FALSE]  x[1]\n\n\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec07.html#announcements",
    "href": "slides/lec07.html#announcements",
    "title": "ggplot2",
    "section": "Announcements",
    "text": "Announcements\n\nexam 1 date on schedule\nteams for lab 03; see announcement on slack"
  },
  {
    "objectID": "slides/lec07.html#basics",
    "href": "slides/lec07.html#basics",
    "title": "ggplot2",
    "section": "Basics",
    "text": "Basics\nggplot2 is the package. ggplot is the main function.\n\nthe first argument is a data frame we want to plot from\nthe next argument is a list of variables (columns) of our data frame that we want to visualize. These go in the aesthetic aes() function."
  },
  {
    "objectID": "slides/lec07.html#example-step-by-step",
    "href": "slides/lec07.html#example-step-by-step",
    "title": "ggplot2",
    "section": "Example step by step",
    "text": "Example step by step\n\na blank canvas\n\n\nlibrary(palmerpenguins)\n\n\ncodeplot\n\n\n\npenguins %>% \n  ggplot()"
  },
  {
    "objectID": "slides/lec07.html#ggplot-step-2",
    "href": "slides/lec07.html#ggplot-step-2",
    "title": "ggplot2",
    "section": "ggplot step 2",
    "text": "ggplot step 2\n\nlist of variables we want to visualize\n\n::: panel-tabset\ncode\n\npenguins %>%\n  ggplot(aes(x = flipper_length_mm, y = bill_depth_mm))\n\nplot"
  },
  {
    "objectID": "slides/lec07.html#ggplot-step-3",
    "href": "slides/lec07.html#ggplot-step-3",
    "title": "ggplot2",
    "section": "ggplot step 3",
    "text": "ggplot step 3\n\nadd geometry\n\n\npenguins %>%\n  ggplot(aes(x = flipper_length_mm, y = bill_depth_mm)) +\n  geom_point()"
  },
  {
    "objectID": "slides/lec07.html#ggplot-step-4",
    "href": "slides/lec07.html#ggplot-step-4",
    "title": "ggplot2",
    "section": "ggplot step 4",
    "text": "ggplot step 4\n\nadd labels\n\n\npenguins %>%\n  ggplot(aes(x = flipper_length_mm, y = bill_depth_mm)) +\n  geom_point() + \n  labs(x = \"Flipper length (mm)\", y = \"Bill depth (mm)\",\n       title = \"Bill depth vs flipper length distribution\",\n       subtitle = \"Penguins from the arctic\",\n       caption = \"data from palmerpenguins R package\")"
  },
  {
    "objectID": "slides/lec07.html#ggplot-step-5",
    "href": "slides/lec07.html#ggplot-step-5",
    "title": "ggplot2",
    "section": "ggplot step 5",
    "text": "ggplot step 5\n\nadd theme\nadd color\n\n\npenguins %>%\n  ggplot(aes(x = flipper_length_mm, y = bill_depth_mm,\n             color = island)) +\n  geom_point() + \n  labs(x = \"Flipper length (mm)\", y = \"Bill depth (mm)\",\n       color = \"Island\",\n       title = \"Bill depth vs flipper length distribution\",\n       subtitle = \"Penguins from the arctic\",\n       caption = \"data from palmerpenguins R package\") +\n  theme_bw()"
  },
  {
    "objectID": "slides/lec07.html#ggplot-step-6",
    "href": "slides/lec07.html#ggplot-step-6",
    "title": "ggplot2",
    "section": "ggplot step 6",
    "text": "ggplot step 6\n\nfacet the plot\n\n\npenguins %>%\n  filter(!is.na(sex)) %>%\n  ggplot(aes(x = flipper_length_mm, y = bill_depth_mm,\n             color = island)) +\n  geom_point() + \n  labs(x = \"Flipper length (mm)\", y = \"Bill depth (mm)\",\n       color = \"Island\",\n       title = \"Bill depth vs flipper length distribution\",\n       subtitle = \"Penguins from the arctic\",\n       caption = \"data from palmerpenguins R package\") +\n  theme_bw() +\n  facet_wrap(~ sex)"
  },
  {
    "objectID": "slides/lec07.html#main-aesthetics",
    "href": "slides/lec07.html#main-aesthetics",
    "title": "ggplot2",
    "section": "Main aesthetics",
    "text": "Main aesthetics"
  },
  {
    "objectID": "slides/lec07.html#geometries",
    "href": "slides/lec07.html#geometries",
    "title": "ggplot2",
    "section": "Geometries",
    "text": "Geometries"
  },
  {
    "objectID": "slides/lec07.html#themes",
    "href": "slides/lec07.html#themes",
    "title": "ggplot2",
    "section": "Themes",
    "text": "Themes\n\n\nimage credit: tvthemes package by Ryo Nakagawra\nSee https://ggplot2.tidyverse.org/reference/ggtheme.html for a list of default themes."
  },
  {
    "objectID": "slides/lec07.html#plotting-functions",
    "href": "slides/lec07.html#plotting-functions",
    "title": "ggplot2",
    "section": "Plotting functions",
    "text": "Plotting functions\nstat_function() is a powerful tool\n\ncodeplot\n\n\n\nx = -10:10 # range\ndf = data.frame(x)\n\nf = function(x) {\n  dnorm(x)\n}\n\ndf %>%\n  ggplot(aes(x = x)) +\n  stat_function(fun=f) +\n  labs(y = \"Density\", \n       title = \"Gaussian density\")"
  },
  {
    "objectID": "slides/lec07.html#save-the-plot",
    "href": "slides/lec07.html#save-the-plot",
    "title": "ggplot2",
    "section": "Save the plot",
    "text": "Save the plot\n\nSave a plot as a file on your computer with ggsave()\n\n\npenguins %>%\n  ggplot(aes(x = bill_depth_mm, y = species)) + \n  geom_boxplot() +\n  labs(x = \"Bill depth (mm)\", y = \"Species\") +\n  theme_bw()\n\n\n\nggsave(\"penguin-box-plot.png\", \n       plot = last_plot())"
  },
  {
    "objectID": "slides/lec07.html#custom-ggplot-functions",
    "href": "slides/lec07.html#custom-ggplot-functions",
    "title": "ggplot2",
    "section": "Custom ggplot functions",
    "text": "Custom ggplot functions"
  },
  {
    "objectID": "slides/lec07.html#latex-labels",
    "href": "slides/lec07.html#latex-labels",
    "title": "ggplot2",
    "section": "LaTeX labels",
    "text": "LaTeX labels\n\nlibrary(latex2exp)\n\nggplot() +\n  ylab(TeX(\"Mean: $y = \\\\beta_0 + \\\\beta_1 x_1 + \\\\beta_2 x_2$\")) +\n  xlab(TeX(\"$\\\\frac{\\\\alpha}{\\\\gamma}$\")) +\n  theme_grey(base_size = 20)"
  },
  {
    "objectID": "slides/lec07.html#x-and-y-aesthetics",
    "href": "slides/lec07.html#x-and-y-aesthetics",
    "title": "ggplot2",
    "section": "x and y aesthetics",
    "text": "x and y aesthetics\n\ncodeplot\n\n\n\npenguins %>%\n  ggplot(aes(x = flipper_length_mm, y = bill_depth_mm))"
  },
  {
    "objectID": "slides/lec07.html#add-a-geometry",
    "href": "slides/lec07.html#add-a-geometry",
    "title": "ggplot2",
    "section": "add a geometry",
    "text": "add a geometry\n\ncodeplot\n\n\n\npenguins %>%\n  ggplot(aes(x = flipper_length_mm, y = bill_depth_mm)) +\n  geom_point()"
  },
  {
    "objectID": "slides/lec07.html#labels",
    "href": "slides/lec07.html#labels",
    "title": "ggplot2",
    "section": "labels",
    "text": "labels\n\ncodeplot\n\n\n\npenguins %>%\n  ggplot(aes(x = flipper_length_mm, y = bill_depth_mm)) +\n  geom_point() + \n  labs(x = \"Flipper length (mm)\", y = \"Bill depth (mm)\",\n       title = \"Bill depth vs flipper length distribution\",\n       subtitle = \"Penguins from the arctic\",\n       caption = \"data from palmerpenguins R package\")"
  },
  {
    "objectID": "slides/lec07.html#add-theme-and-color-aesthetic",
    "href": "slides/lec07.html#add-theme-and-color-aesthetic",
    "title": "ggplot2",
    "section": "add theme and color aesthetic",
    "text": "add theme and color aesthetic\n\ncodeplot\n\n\n\npenguins %>%\n  ggplot(aes(x = flipper_length_mm, y = bill_depth_mm,\n             color = island)) +\n  geom_point() + \n  labs(x = \"Flipper length (mm)\", y = \"Bill depth (mm)\",\n       color = \"Island\",\n       title = \"Bill depth vs flipper length distribution\",\n       subtitle = \"Penguins from the arctic\",\n       caption = \"data from palmerpenguins R package\") +\n  theme_bw()"
  },
  {
    "objectID": "slides/lec07.html#faceting",
    "href": "slides/lec07.html#faceting",
    "title": "ggplot2",
    "section": "faceting",
    "text": "faceting\n\ncodeplot\n\n\n\npenguins %>%\n  filter(!is.na(sex)) %>%\n  ggplot(aes(x = flipper_length_mm, y = bill_depth_mm,\n             color = island)) +\n  geom_point() + \n  labs(x = \"Flipper length (mm)\", y = \"Bill depth (mm)\",\n       color = \"Island\",\n       title = \"Bill depth vs flipper length distribution\",\n       subtitle = \"Penguins from the arctic\",\n       caption = \"data from palmerpenguins R package\") +\n  theme_bw() +\n  facet_wrap(~ sex)"
  },
  {
    "objectID": "slides/lec07.html#blank-canvas",
    "href": "slides/lec07.html#blank-canvas",
    "title": "ggplot2",
    "section": "Blank canvas",
    "text": "Blank canvas\n\nlibrary(palmerpenguins)\n\n\ncodeplot\n\n\n\npenguins %>% \n  ggplot()"
  },
  {
    "objectID": "slides/lec07.html#anatomy-of-a-ggplot",
    "href": "slides/lec07.html#anatomy-of-a-ggplot",
    "title": "ggplot2",
    "section": "Anatomy of a ggplot",
    "text": "Anatomy of a ggplot\n\nggplot(\n  data = [dataframe],\n  aes(\n    x = [var_x], y = [var_y], \n    color = [var_for_color], \n    fill  = [var_for_fill], \n    shape = [var_for_shape],\n    size  = [var_for_size],\n    alpha = [var_for_alpha],\n    ...#other aesthetics\n  )\n) +\n  geom_<some_geom>([geom_arguments]) +\n  ... # other geoms\n  scale_<some_axis>_<some_scale>() +\n  facet_<some_facet>([formula]) +\n  ... # other options\n\nTo visualize multivariate relationships we can add variables to our visualization by specifying aesthetics: color, size, shape, linetype, alpha, or fill; we can also add facets based on variable levels."
  },
  {
    "objectID": "slides/lec07.html#variable-mappings-aesthetics",
    "href": "slides/lec07.html#variable-mappings-aesthetics",
    "title": "ggplot2",
    "section": "Variable mappings (aesthetics)",
    "text": "Variable mappings (aesthetics)\nThe name of the argument is mapping because it says how to ‚Äúmap‚Äù variables to a visual aesthetic.\n\npenguins %>%\n  ggplot(mapping = aes(x = bill_depth_mm, y = flipper_length_mm))\n\n\nWhen does an aesthetic (visual) go inside function aes()?\n\nIf you want an aesthetic to be reflective of a variable‚Äôs values, it must go inside aes().\nIf you want to set an aesthetic manually and not have it convey information about a variable, use the aesthetic‚Äôs name outside of aes(), e.g.¬†in the geometry, and set it to your desired value.\n\n\n\n\ncodeplot\n\n\n\npenguins %>%\n  ggplot(aes(x = flipper_length_mm)) + \n  geom_histogram(color = \"gold\", fill = \"steelblue\")"
  },
  {
    "objectID": "slides/lec07.html#continuous-and-discrete-variables",
    "href": "slides/lec07.html#continuous-and-discrete-variables",
    "title": "ggplot2",
    "section": "Continuous and discrete variables",
    "text": "Continuous and discrete variables\nAesthetics for continuous and discrete variables are measured on continuous and discrete scales, respectively.\n\nglimpsecode 1plot 1code 2plot 2\n\n\n\nglimpse(mpg)\n\nRows: 234\nColumns: 11\n$ manufacturer <chr> \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"‚Ä¶\n$ model        <chr> \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"‚Ä¶\n$ displ        <dbl> 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.‚Ä¶\n$ year         <int> 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200‚Ä¶\n$ cyl          <int> 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, ‚Ä¶\n$ trans        <chr> \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto‚Ä¶\n$ drv          <chr> \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4‚Ä¶\n$ cty          <int> 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1‚Ä¶\n$ hwy          <int> 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2‚Ä¶\n$ fl           <chr> \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p‚Ä¶\n$ class        <chr> \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c‚Ä¶\n\n\n\n\n\nmpg %>%\n  ggplot(aes(x = cyl, y = cty)) +\n  geom_boxplot() +\n  labs(x = \"Vehicle cylinders\", y = \"City MPG\",\n       title = \"Fuel efficiency by year\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\nmpg %>%\n  ggplot(aes(x = as.factor(cyl), y = cty)) +\n  geom_boxplot() +\n  labs(x = \"Vehicle cylinders\", y = \"City MPG\",\n       title = \"Fuel efficiency by year\") +\n  theme_bw()"
  },
  {
    "objectID": "slides/lec07.html#common-geometries",
    "href": "slides/lec07.html#common-geometries",
    "title": "ggplot2",
    "section": "Common geometries",
    "text": "Common geometries\n\n\n\n\n\n\n\ngeometry\ndescription\n\n\n\n\ngeom_point()\nscatter plot\n\n\ngeom_histogram()\nhistogram\n\n\ngeom_boxplot()\nbox plot\n\n\ngeom_density()\ndensity plot\n\n\ngeom_violin()\nviolin plot\n\n\ngeom_raster()\nheat map\n\n\ngeom_line()\nconnect observations in a line\n\n\ngeom_bar()\nbar plot (try with argument position = fill)\n\n\ngeom_smooth()\nadd a smooth trend line (try with argument method = lm\n\n\ngeom_abline()\nadd an algebraic line\n\n\n\n\nSee https://ggplot2.tidyverse.org/reference/ for more geometries.\nSome geometries are in additional packages, e.g.¬†see geom_density_ridges() within the package ggridges to create plots like these"
  },
  {
    "objectID": "slides/lec07.html#annotate",
    "href": "slides/lec07.html#annotate",
    "title": "ggplot2",
    "section": "Annotate",
    "text": "Annotate\n\nggplot() +\n  annotate(geom = \"text\", x = 10, y = 10, \n           label = \"Text at (10, 10)\", size = 10)"
  },
  {
    "objectID": "slides/lec07.html#patchwork",
    "href": "slides/lec07.html#patchwork",
    "title": "ggplot2",
    "section": "Patchwork",
    "text": "Patchwork\n\nlibrary(patchwork)\n\n\ncodeplot\n\n\n\np1 = penguins %>%\n  ggplot(aes(x = species, y = bill_depth_mm)) +\n  geom_violin() +\n  labs(x = \"Species\", y = \"Bill depth (mm)\",\n       title = \"Violin plots\")\n\np2 = penguins %>%\n  ggplot(aes(x = bill_depth_mm, y = flipper_length_mm, color = island)) +\n  geom_point() +\n  labs(x =\"Bill depth (mm)\",\n       y = \"Flipper length (mm)\",\n       color = \"Island\",\n       title = \"Flipper length vs bill depth\")\n\np3 = penguins %>%\n  ggplot(aes(x = body_mass_g)) +\n  geom_histogram(fill = \"steelblue\") +\n  labs(x = \"Body mass (g)\",\n       y = \"Count\",\n       title = \"Distribution of penguin body mass\")\n\n(p1 + p2) / p3"
  },
  {
    "objectID": "slides/lec07.html#patchwork-options",
    "href": "slides/lec07.html#patchwork-options",
    "title": "ggplot2",
    "section": "Patchwork options",
    "text": "Patchwork options\n\np1 + p2\n\n\n\np1 + p2 + plot_layout(ncol = 1)"
  },
  {
    "objectID": "slides/lec07.html#patchwork-layout",
    "href": "slides/lec07.html#patchwork-layout",
    "title": "ggplot2",
    "section": "Patchwork layout",
    "text": "Patchwork layout\n\nhorizontalvertical\n\n\n\np1 + p2 + \n  plot_annotation(title = \"Palmer Penguins\", tag_levels = c(\"A\"))\n\n\n\n\n\n\n\np1 + p2 + plot_layout(ncol = 1) + \n  plot_annotation(title = \"Palmer Penguins\", tag_levels = c(\"i\"))"
  },
  {
    "objectID": "slides/lec07.html#custom-ggplot-functions-with-ggproto",
    "href": "slides/lec07.html#custom-ggplot-functions-with-ggproto",
    "title": "ggplot2",
    "section": "Custom ggplot functions with ggproto",
    "text": "Custom ggplot functions with ggproto\nEncircle the data points that have the minimum x-value\n\nOutputcodestat_min\n\n\n\n\n\n\n\n\n\n\ncars %>%\n  ggplot(aes(x = speed, y = dist)) +\n  geom_point() +\n  stat_min(size = 5) +\n  labs(title = \"Car speed and stopping distance\",\n       x = \"Speed\", y = \"Distance\") \n\n\n\n\n# create ggproto object\nStatMin = ggproto(\"StatMin\", Stat,\n                       compute_group = function(data, scales) {\n                          xvar = data$x\n                          yvar = data$y\n                          \n                          data[xvar == min(xvar), ,drop = FALSE]\n                       },\n                       \n                       required_aes = c(\"x\", \"y\")\n                       \n                       )\n\n# create stat function\nstat_min = function(mapping = NULL, data = NULL, geom = \"point\",\n                         position = \"identity\", na.rm = FALSE, show.legend = NA, \n                         inherit.aes = TRUE,\n                         shape = 21, size = 5, color = \"red\",\n                         alpha = 1, ...) {\n  layer(\n    stat = StatMin, data = data, mapping = mapping, geom = geom, \n    position = position, show.legend = show.legend, inherit.aes = inherit.aes,\n    params = list(color = color, shape = shape, size = size, alpha = alpha, \n                  na.rm = na.rm, ...)\n  )\n}"
  },
  {
    "objectID": "slides/lec07.html#style-1",
    "href": "slides/lec07.html#style-1",
    "title": "ggplot2",
    "section": "Style",
    "text": "Style"
  },
  {
    "objectID": "slides/lec07.html#further-exploring",
    "href": "slides/lec07.html#further-exploring",
    "title": "ggplot2",
    "section": "Further exploring",
    "text": "Further exploring\n\nggplot2 documentation\nggplot2 extensions: https://exts.ggplot2.tidyverse.org/gallery/\ntop 50 ggplot2 visualizations with code!\nextending ggplot2 with ggproto\npatchwork\n\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec07.html#style",
    "href": "slides/lec07.html#style",
    "title": "ggplot2",
    "section": "Style",
    "text": "Style\n\nKeep plots simple\nDon‚Äôt redundantly encode information\nUse descriptive titles\nAlways label units\nUse color and/or annotations to draw attention to a region of your plot\nNever make a pie chart\nDon‚Äôt use the default ggplot background. When in doubt, theme_bw() is always better."
  },
  {
    "objectID": "slides/lec07.html#gganimate",
    "href": "slides/lec07.html#gganimate",
    "title": "ggplot2",
    "section": "gganimate",
    "text": "gganimate\n\nlibrary(gapminder) # data\nlibrary(gganimate) # animate\n\n\ncode-plotplotcode-animateanimation\n\n\n\nggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop, colour = country)) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  scale_x_log10() +\n  facet_wrap(~continent) +\n  theme_bw(base_size = 16)\n\n\n\n\n\n\n\n\n\n\n\nggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop, colour = country)) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  scale_x_log10() +\n  facet_wrap(~continent) +\n  theme_bw(base_size = 16) +\n  labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'Life expectancy') +\n  transition_time(year) +\n  ease_aes('linear')"
  },
  {
    "objectID": "slides/lec07.html#gganimate-1",
    "href": "slides/lec07.html#gganimate-1",
    "title": "ggplot2",
    "section": "gganimate",
    "text": "gganimate\nCore functions\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*() / exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\nLabel variables\n\nfunction dependent, use { } to access their values.\n\nSee https://gganimate.com"
  },
  {
    "objectID": "slides/lec07.html#gganimate-example",
    "href": "slides/lec07.html#gganimate-example",
    "title": "ggplot2",
    "section": "gganimate example",
    "text": "gganimate example\n\nlibrary(gganimate) # animate\nlibrary(gapminder) # data\n\n\ncode-plotplotcode-animateanimation\n\n\n\nggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop, colour = country)) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  scale_x_log10() +\n  facet_wrap(~continent) +\n  theme_bw(base_size = 16)\n\n\n\n\n\n\n\n\n\n\n\nggplot(gapminder, aes(x = gdpPercap, y = lifeExp, size = pop, colour = country)) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  scale_x_log10() +\n  facet_wrap(~continent) +\n  theme_bw(base_size = 16) +\n  labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'Life expectancy') +\n  transition_time(year) +\n  ease_aes('linear')"
  },
  {
    "objectID": "slides/lec07.html#gganimate-summary",
    "href": "slides/lec07.html#gganimate-summary",
    "title": "ggplot2",
    "section": "gganimate summary",
    "text": "gganimate summary\nCore functions\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*() / exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\nLabel variables\n\nfunction dependent, use { } to access their values.\n\nSee https://gganimate.com"
  },
  {
    "objectID": "quizzes/quiz03.html",
    "href": "quizzes/quiz03.html",
    "title": "Quiz 3",
    "section": "",
    "text": "Exercise 1\nThe gg in ggplot stands for ___ of ___.\n\n\nExercise 2\nTo create a scatter plot with ggplot2, I need to add the geometry geom_[___].\n\n\nExercise 3\nTRUE or FALSE: to change the color of a plot, based on the column var1 of the data set, I need to put color = var1 inside the aesthetic aes() function. To change the color of all points to red, regardless of the data, I should put color = 'red' outside the aesthetic function.\n\n\nExercise 4\nWhat‚Äôs wrong with the code below?\n\n\n\n\ncars %>%\n  ggplot(aes(x = dist)) \n  geom_histogram()\n\n\n\n\n04:00"
  },
  {
    "objectID": "slides/lec08.html#announcements",
    "href": "slides/lec08.html#announcements",
    "title": "Functional programming and purrr",
    "section": "Announcements",
    "text": "Announcements\n\ncheck lab solutions on Sakai\nteams for labs\n\nsee announcement on slack\nmessage me by Friday, Feb 10 if you‚Äôd like to be pseudo-randomly assigned a team or\nreach out to any member of the teaching team if you‚Äôd like to form a specific team.\n\nquiz 03"
  },
  {
    "objectID": "slides/lec08.html#function-as-objects",
    "href": "slides/lec08.html#function-as-objects",
    "title": "Functional programming and purrr",
    "section": "Function as objects",
    "text": "Function as objects\nFunctions are first class objects (like vectors).\n\n\n\nf = function(x) {\n  x ^ 2\n}\ng = f\ng(2)\n\n[1] 4\n\n\n\n\nl = list(f = f, g = g)\nl$f(3)\n\n[1] 9\n\n\n\nl[[2]](4)\n\n[1] 16\n\n\n\nl[1](3)\n\nError in eval(expr, envir, enclos): attempt to apply non-function"
  },
  {
    "objectID": "slides/lec08.html#functions-as-arguments",
    "href": "slides/lec08.html#functions-as-arguments",
    "title": "Functional programming and purrr",
    "section": "Functions as arguments",
    "text": "Functions as arguments\nA functional is a function that takes a function as an input and returns a vector as output.\nExample: lapply() and sapply() accept function arguments.\n\nlapply(), as the name suggests applies a function over a list.\n\n\nx = list( c(1,2,3), b = c(10, 20, 30, 40, 50))\nlapply(x, mean) # output is a list\n\n[[1]]\n[1] 2\n\n$b\n[1] 30\n\n\n\nsapply() works the same but returns a simpler output\n\n\nsapply(x, mean) # output is a vector of doubles\n\n    b \n 2 30"
  },
  {
    "objectID": "slides/lec08.html#functions-as-output",
    "href": "slides/lec08.html#functions-as-output",
    "title": "Functional programming and purrr",
    "section": "Functions as output",
    "text": "Functions as output\nWe can make a function return another function.\n\nf = function (n) {\n  # function returns \n  # function that raises its argument to the n power\n  g = function(x) {\n    return(x ^ n)\n  }\n  return(g)\n}\n\nf(3)(2) # 2 ^ 3\n\n[1] 8"
  },
  {
    "objectID": "slides/lec08.html#anonymous-functions-lambdas",
    "href": "slides/lec08.html#anonymous-functions-lambdas",
    "title": "Functional programming and purrr",
    "section": "Anonymous functions (lambdas)",
    "text": "Anonymous functions (lambdas)\nThese are short functions that are created without ever assigning a name\n\nfunction(x) {x + 1}\n\nfunction(x) {x + 1}\n\n(function(y) {y - 1})(10)\n\n[1] 9\n\n\nIdea: won‚Äôt create an object we don‚Äôt need. This is especially useful for passing a function as an argument.\n\nExample: numerical derivatives\n\nintegrate(function(x) x, 0, 1)\n\n0.5 with absolute error < 5.6e-15\n\n\n\n\n\nintegrate(function(x) (x * x) - (2 * x) + 1, 0, 1)\n\n0.3333333 with absolute error < 3.7e-15"
  },
  {
    "objectID": "slides/lec08.html#base-r-anonymous-function-lambda-shorthand",
    "href": "slides/lec08.html#base-r-anonymous-function-lambda-shorthand",
    "title": "Functional programming with purrr",
    "section": "Base R anonymous function (lambda) shorthand",
    "text": "Base R anonymous function (lambda) shorthand\nAlong with the base pipe (|>), R v4.1.0 introduced a shortcut for anonymous functions using \\(), we won‚Äôt be using this for the same reason but it is useful to know that it exists.\n\nf = \\(x) {1 + x}\nf(1:5)\n\n[1] 2 3 4 5 6\n\n\n\n(\\(x) x ^ 2)(10)\n\n[1] 100\n\n\n\nintegrate(\\(x) sin(x) ^ 2, 0, 1)\n\n0.2726756 with absolute error < 3e-15\n\n\nUse of this with the base pipe is meant avoid the need for ., e.g.\n\ndata.frame(x = runif(10), y = runif(10)) |>\n  {\\(d) lm(y ~ x, data = d)}()\n\n\nCall:\nlm(formula = y ~ x, data = d)\n\nCoefficients:\n(Intercept)            x  \n     0.4744       0.5460  \n\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec08.html#base-r-lambda-shorthand",
    "href": "slides/lec08.html#base-r-lambda-shorthand",
    "title": "Functional programming and purrr",
    "section": "Base R lambda shorthand",
    "text": "Base R lambda shorthand\nAlong with the base pipe (|>), R v4.1.0 introduced a shortcut for anonymous functions using \\(), we won‚Äôt be using this for the same reason but it is useful to know that it exists.\n\nf = \\(x) {1 + x}\nf(1:5)\n\n[1] 2 3 4 5 6\n\n\n\n(\\(x) x ^ 2)(10)\n\n[1] 100\n\n\n\nintegrate(\\(x) sin(x) ^ 2, 0, 1)\n\n0.2726756 with absolute error < 3e-15\n\n\nUse of this with the base pipe is meant avoid the need for ., e.g.\n\ndata.frame(x = runif(10), y = runif(10)) |>\n  {\\(d) lm(y ~ x, data = d)}()\n\n\nCall:\nlm(formula = y ~ x, data = d)\n\nCoefficients:\n(Intercept)            x  \n     0.5540      -0.3096"
  },
  {
    "objectID": "slides/lec08.html#apply-functions",
    "href": "slides/lec08.html#apply-functions",
    "title": "Functional programming and purrr",
    "section": "apply functions",
    "text": "apply functions\nThe apply functions are a collection of tools for functional programming in base R, they are variations of the map function found in many other languages and apply a function over the elements of the input (vector).\n\n??base::apply\n---\n## \n## Help files with alias or concept or title matching ‚Äòapply‚Äô using fuzzy\n## matching:\n## \n## base::apply             Apply Functions Over Array Margins\n## base::.subset           Internal Objects in Package 'base'\n## base::by                Apply a Function to a Data Frame Split by Factors\n## base::eapply            Apply a Function Over Values in an Environment\n## base::lapply            Apply a Function over a List or Vector\n## base::mapply            Apply a Function to Multiple List or Vector Arguments\n## base::rapply            Recursively Apply a Function to a List\n## base::tapply            Apply a Function Over a Ragged Array\n\n\napplies function in an iterative format"
  },
  {
    "objectID": "slides/lec08.html#lapply-and-sapply",
    "href": "slides/lec08.html#lapply-and-sapply",
    "title": "Functional programming and purrr",
    "section": "lapply and sapply",
    "text": "lapply and sapply\n\n\n\n\nlapply(1:4, function(x, pow) x ^ pow, pow = 2) %>% str()\n\nList of 4\n $ : num 1\n $ : num 4\n $ : num 9\n $ : num 16\n\nlapply(1:4, function(x, pow) x ^ pow, x = 2) %>% str()\n\nList of 4\n $ : num 2\n $ : num 4\n $ : num 8\n $ : num 16\n\n\n\nsapply(1:8, function(x) (x + 1) ^ 2)\n\n[1]  4  9 16 25 36 49 64 81\n\nsapply(1:8, function(x) c(x, x ^ 2, x ^ 3))\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]\n[1,]    1    2    3    4    5    6    7    8\n[2,]    1    4    9   16   25   36   49   64\n[3,]    1    8   27   64  125  216  343  512"
  },
  {
    "objectID": "slides/lec08.html#section",
    "href": "slides/lec08.html#section",
    "title": "Functional programming and purrr",
    "section": "",
    "text": "What happens if the returned lengths don‚Äôt match?\n\n\n\nsapply(1:3, seq) %>% str()\n\nList of 3\n $ : int 1\n $ : int [1:2] 1 2\n $ : int [1:3] 1 2 3\n\n\n\n\nlapply(1:3, seq) %>% str()\n\nList of 3\n $ : int 1\n $ : int [1:2] 1 2\n $ : int [1:3] 1 2 3\n\n\n\n\n\nWhat happens if the types don‚Äôt match?\n\n\ntype coercion!\n\nl = list(a = 1:3, b = 4:6, c = 7:9, d = list(10, 11, \"A\"))\n\n\nsapply(l, function(x) x[1]) %>% str()\n\nList of 4\n $ a: int 1\n $ b: int 4\n $ c: int 7\n $ d: num 10\n\n\n\ntype consistency issue: can‚Äôt quickly see return type"
  },
  {
    "objectID": "slides/lec08.html#beware-sapply",
    "href": "slides/lec08.html#beware-sapply",
    "title": "Functional programming and purrr",
    "section": "Beware sapply()",
    "text": "Beware sapply()\n\ntype consistency issue: can‚Äôt quickly see return type\ngreat to use dynamically and interactively but not robust"
  },
  {
    "objectID": "slides/lec08.html#section-1",
    "href": "slides/lec08.html#section-1",
    "title": "Functional programming and purrr",
    "section": "",
    "text": "üîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec08.html#apply-and-data-frames",
    "href": "slides/lec08.html#apply-and-data-frames",
    "title": "Functional programming and purrr",
    "section": "*apply and data frames",
    "text": "*apply and data frames\nCommon use case: data frames\n\nrecall: a data frames is just a fancy list\n\n\ndf = data.frame(\n  a = 1:6, \n  b = letters[1:6], \n  c = c(TRUE,FALSE)\n)\n\n\nlapply(df, class) %>% str()\n\nList of 3\n $ a: chr \"integer\"\n $ b: chr \"character\"\n $ c: chr \"logical\"\n\nsapply(df, class)\n\n          a           b           c \n  \"integer\" \"character\"   \"logical\""
  },
  {
    "objectID": "slides/lec08.html#a-more-useful-example",
    "href": "slides/lec08.html#a-more-useful-example",
    "title": "Functional programming and purrr",
    "section": "A more useful example",
    "text": "A more useful example\nPenalized regression: the lasso\n\\[\n\\min_{\\beta \\in \\mathcal{R^p}} ||y - X\\beta||_2^2  + \\lambda||\\beta||_1\n\\]\n\nIt only makes sense to ‚Äúshrink‚Äù the \\(\\beta_i\\)s if the predictors are on the same scale. Therefore we want to standardize the data in matrix X, e.g.\nfor each column j in X: \n  for each row i:\n    recompute x[i, j] = x[i, j] - mean(x[,j]) / sd(x[,j])\n    \n\n\nWe can solve this elegantly with an *apply.\n\nX = data.frame(height = c(72, 60, 64),\n               bpm = c(82, 55, 60))\n\n\napplylapply\n\n\n\napply(X, 2, function(x) (x - mean(x)) / sd(x)) # returns matrix\n\n         height        bpm\n[1,]  1.0910895  1.1370777\n[2,] -0.8728716 -0.7425813\n[3,] -0.2182179 -0.3944963\n\n\n\n\n\nlapply(X, function (x) (x - mean(x)) / sd(x)) %>% \n  as.data.frame() \n\n      height        bpm\n1  1.0910895  1.1370777\n2 -0.8728716 -0.7425813\n3 -0.2182179 -0.3944963"
  },
  {
    "objectID": "slides/lec08.html#other-less-common-apply-functions",
    "href": "slides/lec08.html#other-less-common-apply-functions",
    "title": "Functional programming and purrr",
    "section": "other less common apply functions",
    "text": "other less common apply functions\n\napply() - applies a function over the rows or columns of a data frame, matrix or array\nvapply() - is similar to sapply, but has a enforced return type and size\nmapply() - like sapply but will iterate over multiple vectors at the same time.\nrapply() - a recursive version of lapply, behavior depends largely on the how argument\neapply() - apply a function over an environment."
  },
  {
    "objectID": "slides/lec08.html#map-functions",
    "href": "slides/lec08.html#map-functions",
    "title": "Functional programming and purrr",
    "section": "Map functions",
    "text": "Map functions\n\nreplacements for lapply/sapply/vapply\nmap() - returns a list (same as lapply)\nmap_lgl() - returns a logical vector.\nmap_int() - returns a integer vector.\nmap_dbl() - returns a double vector.\nmap_chr() - returns a character vector.\nmap_dfr() - returns a data frame by row binding.\nmap_dfc() - returns a data frame by column binding.\nwalk() - returns nothing, used exclusively for function side effects"
  },
  {
    "objectID": "slides/lec08.html#type-consistency",
    "href": "slides/lec08.html#type-consistency",
    "title": "Functional programming and purrr",
    "section": "Type consistency",
    "text": "Type consistency\nR is a weakly / dynamically typed language which means there is no syntactic way to define a function which enforces argument or return types. This flexibility can be useful at times, but often it makes it hard to reason about your code and requires more verbose code to handle edge cases.\n\nset.seed(123)\nx = list(rnorm(1e3), rnorm(1e3), rnorm(1e3))\n\n\n\nmap_dbl(x, mean)\n\n[1]  0.01612787  0.04246525 -0.02011253\n\n\n\n\n\nmap_chr(x, mean)\n\nWarning: Automatic coercion from double to character was deprecated in purrr 1.0.0.\n‚Ñπ Please use an explicit call to `as.character()` within `map_chr()` instead.\n\n\n[1] \"0.016128\"  \"0.042465\"  \"-0.020113\"\n\n\n\n\n\n\n\nmap_int(x, mean)\n\nError in `map_int()`:\n‚Ñπ In index: 1.\nCaused by error:\n! Can't coerce from a double vector to an integer vector.\n\n\n\n\nmap(x, mean) %>% str()\n\nList of 3\n $ : num 0.0161\n $ : num 0.0425\n $ : num -0.0201"
  },
  {
    "objectID": "slides/lec08.html#working-with-data-frames",
    "href": "slides/lec08.html#working-with-data-frames",
    "title": "Functional programming and purrr",
    "section": "Working with Data Frames",
    "text": "Working with Data Frames\nmap_dfr and map_dfc are particularly useful when working with and/or creating data frames. Example:\n\nX = data.frame(height = c(72, 60, 64),\n               bpm = c(82, 55, 60),\n               age = c(25, 30, 35))\n\n\nstandardize = function(x) (x - mean(x)) / sd(x)\n\n\n\nmap_dfc(X, standardize)\n\n# A tibble: 3 √ó 3\n  height    bpm   age\n   <dbl>  <dbl> <dbl>\n1  1.09   1.14     -1\n2 -0.873 -0.743     0\n3 -0.218 -0.394     1\n\n\n\n\n\n\n\nmap_dfr(X, function(x) x[1:2])\n\n# A tibble: 2 √ó 3\n  height   bpm   age\n   <dbl> <dbl> <dbl>\n1     72    82    25\n2     60    55    30\n\n\n\n\nmap_dfr(X, function(x) x)\n\n# A tibble: 3 √ó 3\n  height   bpm   age\n   <dbl> <dbl> <dbl>\n1     72    82    25\n2     60    55    30\n3     64    60    35"
  },
  {
    "objectID": "slides/lec08.html#shortcut---purrr-style-lambdas",
    "href": "slides/lec08.html#shortcut---purrr-style-lambdas",
    "title": "Functional programming and purrr",
    "section": "Shortcut - purrr style lambdas",
    "text": "Shortcut - purrr style lambdas\npurrr lets us write anonymous functions using one sided formulas where the argument is given by . or .x for map and related functions.\n\nmap_dbl(1:5, function(x) x / (x + 1))\n\n[1] 0.5000000 0.6666667 0.7500000 0.8000000 0.8333333\n\n\n\nRead ~ as ‚Äúfunction‚Äù and . or .x as ‚Äúinput‚Äù\n\nmap_dbl(1:5, ~ . / (. + 1))\n\n[1] 0.5000000 0.6666667 0.7500000 0.8000000 0.8333333\n\n\n\n\n\nmap_dbl(1:5, ~ .x / (.x + 1))\n\n[1] 0.5000000 0.6666667 0.7500000 0.8000000 0.8333333\n\n\nGenerally, the latter option is preferred to avoid confusion with magrittr."
  },
  {
    "objectID": "slides/lec08.html#multiargument-anonymous-functions",
    "href": "slides/lec08.html#multiargument-anonymous-functions",
    "title": "Functional programming and purrr",
    "section": "Multiargument anonymous functions",
    "text": "Multiargument anonymous functions\nFunctions with the map2 prefix work the same as the map functions but they iterate over two objects instead of one. Arguments in an anonymous function are given by .x and .y (or ..1 and ..2) respectively.\n\nmap2_dbl(1:5, 1:5, function(x,y) x / (y+1))\n\n[1] 0.5000000 0.6666667 0.7500000 0.8000000 0.8333333\n\n\n\n\nmap2_dbl(1:5, 1:5, ~ .x/(.y+1))\n\n[1] 0.5000000 0.6666667 0.7500000 0.8000000 0.8333333\n\n\n\n\n\nmap2_dbl(1:5, 1:5, ~ ..1/(..2+1))\n\n[1] 0.5000000 0.6666667 0.7500000 0.8000000 0.8333333\n\n\n\n\n\nmap2_chr(LETTERS[1:5], letters[1:5], paste0)\n\n[1] \"Aa\" \"Bb\" \"Cc\" \"Dd\" \"Ee\"\n\n\n\n\nPrioritize readability of your code! For complicated functions, use syntax like the first example."
  },
  {
    "objectID": "slides/lec08.html#lookups",
    "href": "slides/lec08.html#lookups",
    "title": "Functional programming and purrr",
    "section": "Lookups",
    "text": "Lookups\nVery often we want to extract only certain (named) values from a list, purrr provides a shortcut for this operation - if instead of a function you provide either a character or numeric vector, those values will be used to sequentially subset the elements being iterated.\n\n\npurrr::map_chr(sw_people, \"name\") %>% head()\n\n[1] \"Luke Skywalker\" \"C-3PO\"          \"R2-D2\"          \"Darth Vader\"   \n[5] \"Leia Organa\"    \"Owen Lars\"     \n\n\n\n\n\npurrr::map_chr(sw_people, 1) %>% head()\n\n[1] \"Luke Skywalker\" \"C-3PO\"          \"R2-D2\"          \"Darth Vader\"   \n[5] \"Leia Organa\"    \"Owen Lars\"     \n\n\n\n\n\npurrr::map_chr(sw_people, list(\"films\", 1)) %>% head(n=10)\n\n [1] \"http://swapi.co/api/films/6/\" \"http://swapi.co/api/films/5/\"\n [3] \"http://swapi.co/api/films/5/\" \"http://swapi.co/api/films/6/\"\n [5] \"http://swapi.co/api/films/6/\" \"http://swapi.co/api/films/5/\"\n [7] \"http://swapi.co/api/films/5/\" \"http://swapi.co/api/films/1/\"\n [9] \"http://swapi.co/api/films/1/\" \"http://swapi.co/api/films/5/\""
  },
  {
    "objectID": "slides/lec08.html#lookups-sw_people",
    "href": "slides/lec08.html#lookups-sw_people",
    "title": "Functional programming and purrr",
    "section": "Lookups (sw_people)",
    "text": "Lookups (sw_people)\n\nlibrary(repurrrsive)\n\nsw_people from the repurrrsive package\n\nstr(sw_people[1:5])\n\nList of 5\n $ :List of 16\n  ..$ name      : chr \"Luke Skywalker\"\n  ..$ height    : chr \"172\"\n  ..$ mass      : chr \"77\"\n  ..$ hair_color: chr \"blond\"\n  ..$ skin_color: chr \"fair\"\n  ..$ eye_color : chr \"blue\"\n  ..$ birth_year: chr \"19BBY\"\n  ..$ gender    : chr \"male\"\n  ..$ homeworld : chr \"http://swapi.co/api/planets/1/\"\n  ..$ films     : chr [1:5] \"http://swapi.co/api/films/6/\" \"http://swapi.co/api/films/3/\" \"http://swapi.co/api/films/2/\" \"http://swapi.co/api/films/1/\" ...\n  ..$ species   : chr \"http://swapi.co/api/species/1/\"\n  ..$ vehicles  : chr [1:2] \"http://swapi.co/api/vehicles/14/\" \"http://swapi.co/api/vehicles/30/\"\n  ..$ starships : chr [1:2] \"http://swapi.co/api/starships/12/\" \"http://swapi.co/api/starships/22/\"\n  ..$ created   : chr \"2014-12-09T13:50:51.644000Z\"\n  ..$ edited    : chr \"2014-12-20T21:17:56.891000Z\"\n  ..$ url       : chr \"http://swapi.co/api/people/1/\"\n $ :List of 14\n  ..$ name      : chr \"C-3PO\"\n  ..$ height    : chr \"167\"\n  ..$ mass      : chr \"75\"\n  ..$ hair_color: chr \"n/a\"\n  ..$ skin_color: chr \"gold\"\n  ..$ eye_color : chr \"yellow\"\n  ..$ birth_year: chr \"112BBY\"\n  ..$ gender    : chr \"n/a\"\n  ..$ homeworld : chr \"http://swapi.co/api/planets/1/\"\n  ..$ films     : chr [1:6] \"http://swapi.co/api/films/5/\" \"http://swapi.co/api/films/4/\" \"http://swapi.co/api/films/6/\" \"http://swapi.co/api/films/3/\" ...\n  ..$ species   : chr \"http://swapi.co/api/species/2/\"\n  ..$ created   : chr \"2014-12-10T15:10:51.357000Z\"\n  ..$ edited    : chr \"2014-12-20T21:17:50.309000Z\"\n  ..$ url       : chr \"http://swapi.co/api/people/2/\"\n $ :List of 14\n  ..$ name      : chr \"R2-D2\"\n  ..$ height    : chr \"96\"\n  ..$ mass      : chr \"32\"\n  ..$ hair_color: chr \"n/a\"\n  ..$ skin_color: chr \"white, blue\"\n  ..$ eye_color : chr \"red\"\n  ..$ birth_year: chr \"33BBY\"\n  ..$ gender    : chr \"n/a\"\n  ..$ homeworld : chr \"http://swapi.co/api/planets/8/\"\n  ..$ films     : chr [1:7] \"http://swapi.co/api/films/5/\" \"http://swapi.co/api/films/4/\" \"http://swapi.co/api/films/6/\" \"http://swapi.co/api/films/3/\" ...\n  ..$ species   : chr \"http://swapi.co/api/species/2/\"\n  ..$ created   : chr \"2014-12-10T15:11:50.376000Z\"\n  ..$ edited    : chr \"2014-12-20T21:17:50.311000Z\"\n  ..$ url       : chr \"http://swapi.co/api/people/3/\"\n $ :List of 15\n  ..$ name      : chr \"Darth Vader\"\n  ..$ height    : chr \"202\"\n  ..$ mass      : chr \"136\"\n  ..$ hair_color: chr \"none\"\n  ..$ skin_color: chr \"white\"\n  ..$ eye_color : chr \"yellow\"\n  ..$ birth_year: chr \"41.9BBY\"\n  ..$ gender    : chr \"male\"\n  ..$ homeworld : chr \"http://swapi.co/api/planets/1/\"\n  ..$ films     : chr [1:4] \"http://swapi.co/api/films/6/\" \"http://swapi.co/api/films/3/\" \"http://swapi.co/api/films/2/\" \"http://swapi.co/api/films/1/\"\n  ..$ species   : chr \"http://swapi.co/api/species/1/\"\n  ..$ starships : chr \"http://swapi.co/api/starships/13/\"\n  ..$ created   : chr \"2014-12-10T15:18:20.704000Z\"\n  ..$ edited    : chr \"2014-12-20T21:17:50.313000Z\"\n  ..$ url       : chr \"http://swapi.co/api/people/4/\"\n $ :List of 15\n  ..$ name      : chr \"Leia Organa\"\n  ..$ height    : chr \"150\"\n  ..$ mass      : chr \"49\"\n  ..$ hair_color: chr \"brown\"\n  ..$ skin_color: chr \"light\"\n  ..$ eye_color : chr \"brown\"\n  ..$ birth_year: chr \"19BBY\"\n  ..$ gender    : chr \"female\"\n  ..$ homeworld : chr \"http://swapi.co/api/planets/2/\"\n  ..$ films     : chr [1:5] \"http://swapi.co/api/films/6/\" \"http://swapi.co/api/films/3/\" \"http://swapi.co/api/films/2/\" \"http://swapi.co/api/films/1/\" ...\n  ..$ species   : chr \"http://swapi.co/api/species/1/\"\n  ..$ vehicles  : chr \"http://swapi.co/api/vehicles/30/\"\n  ..$ created   : chr \"2014-12-10T15:20:09.791000Z\"\n  ..$ edited    : chr \"2014-12-20T21:17:50.315000Z\"\n  ..$ url       : chr \"http://swapi.co/api/people/5/\""
  },
  {
    "objectID": "slides/lec08.html#length-coercion",
    "href": "slides/lec08.html#length-coercion",
    "title": "Functional programming and purrr",
    "section": "Length coercion?",
    "text": "Length coercion?\n\npurrr::map_chr(sw_people, list(\"starships\", 1))\n\nError in `purrr::map_chr()`:\n‚Ñπ In index: 2.\nCaused by error:\n! Result must be length 1, not 0.\n\n\n\n\nsw_people[[2]]$name\n\n[1] \"C-3PO\"\n\nsw_people[[2]]$starships\n\nNULL\n\n\n\n\n\npurrr::map(sw_people, list(\"starships\", 1)) %>% head(n = 3) %>% str()\n\nList of 3\n $ : chr \"http://swapi.co/api/starships/12/\"\n $ : NULL\n $ : NULL\n\n\n\n\n\npurrr::map_chr(sw_people, list(\"starships\", 1), .default = NA) %>% head()\n\n[1] \"http://swapi.co/api/starships/12/\" NA                                 \n[3] NA                                  \"http://swapi.co/api/starships/13/\"\n[5] NA                                  NA"
  },
  {
    "objectID": "slides/lec08.html#manual-unnesting",
    "href": "slides/lec08.html#manual-unnesting",
    "title": "Functional programming and purrr",
    "section": "manual unnesting",
    "text": "manual unnesting\n\nhow many starships does each character have?\n\n\n\n\n(chars = tibble(\n  name = purrr::map_chr(sw_people, \"name\"),\n  starships = purrr::map(sw_people, \"starships\")\n))\n\n# A tibble: 87 √ó 2\n   name               starships\n   <chr>              <list>   \n 1 Luke Skywalker     <chr [2]>\n 2 C-3PO              <NULL>   \n 3 R2-D2              <NULL>   \n 4 Darth Vader        <chr [1]>\n 5 Leia Organa        <NULL>   \n 6 Owen Lars          <NULL>   \n 7 Beru Whitesun lars <NULL>   \n 8 R5-D4              <NULL>   \n 9 Biggs Darklighter  <chr [1]>\n10 Obi-Wan Kenobi     <chr [5]>\n# ‚Ä¶ with 77 more rows\n\n\n\n\nchars %>%\n  mutate(n = map_int(starships, length))\n\n# A tibble: 87 √ó 3\n   name               starships     n\n   <chr>              <list>    <int>\n 1 Luke Skywalker     <chr [2]>     2\n 2 C-3PO              <NULL>        0\n 3 R2-D2              <NULL>        0\n 4 Darth Vader        <chr [1]>     1\n 5 Leia Organa        <NULL>        0\n 6 Owen Lars          <NULL>        0\n 7 Beru Whitesun lars <NULL>        0\n 8 R5-D4              <NULL>        0\n 9 Biggs Darklighter  <chr [1]>     1\n10 Obi-Wan Kenobi     <chr [5]>     5\n# ‚Ä¶ with 77 more rows\n\n\n\n\n\nmuch more efficient if you only need a subset of the columns to be ‚Äúunnested‚Äù"
  },
  {
    "objectID": "slides/lec08.html#exercise-1",
    "href": "slides/lec08.html#exercise-1",
    "title": "Functional programming and purrr",
    "section": "Exercise 1",
    "text": "Exercise 1\n\ndraw_points = function(n) {\n  list(\n    x = runif(n, -1, 1),\n    y = runif(n, -1, 1)\n  )\n}\n\n\nUse the function above to draw n = 1000 points from a box of area 4. Save your output as an object called points.\nUse map or an appropriate version to determine which points \\((x, y)\\) are within the unit circle centered at the origin.\nWhat proportion of points are within the unit circle?\nCan you approximate \\(\\pi\\) like this? How?\nHow can you make your estimate more precise?"
  },
  {
    "objectID": "slides/lec08.html#exercise-2",
    "href": "slides/lec08.html#exercise-2",
    "title": "Functional programming and purrr",
    "section": "Exercise 2",
    "text": "Exercise 2\nUse mtcars and a single map or map variant to\n\nget the type of each variable\nget the fourth row such that result is a character vector\ncompute the mean of each variable\ncompute the mean and median for each variable such that the result is a data frame with the mean values in row 1 and the median values in row 2.\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec09.html#what-is-a-regular-expression",
    "href": "slides/lec09.html#what-is-a-regular-expression",
    "title": "Regular expressions",
    "section": "What is a regular expression?",
    "text": "What is a regular expression?\nA regular expression (aka regex or regexp) is a custom defined string matching pattern. A regular expression lets you:\n\nextract only the phone number from this string: ‚ÄúMy phone number is (123) 456-7890, not to be confused with my birth month which is 0‚Äù\nsearch and replace multiple spellings of the word gray (grey, 6R3Y) in a document simultaneously\nsearch through all files in a directory for the one that contains a specific string\nfind the specific line number from a file that contains a string\nfind and replace through multiple files simultaneously\n\nAnd much, much more!"
  },
  {
    "objectID": "slides/lec09.html#formatting",
    "href": "slides/lec09.html#formatting",
    "title": "Regular expressions; unix toolkit",
    "section": "Formatting",
    "text": "Formatting"
  },
  {
    "objectID": "slides/lec09.html#in-r",
    "href": "slides/lec09.html#in-r",
    "title": "Regular expressions; unix toolkit",
    "section": "In R",
    "text": "In R"
  },
  {
    "objectID": "slides/lec09.html#on-the-commmand-line",
    "href": "slides/lec09.html#on-the-commmand-line",
    "title": "Regular expressions; unix toolkit",
    "section": "On the commmand line",
    "text": "On the commmand line\nThere are three fundamental tools on unix systems to process text patterns: grep, sed and awk.\nThe simplest is grep. grep looks by default for lines of files that match the regex.\nCheck out the documentation with\n$ man grep\nThe basics are:\n$ grep -option path/to/file(s)\nCommon options include:\n\n\n\n\ngrep option\nwhat it does\n\n\n\n\n-c\ncount lines with a match\n\n\n-i\ncase insensitive search\n\n\n-l\nlist only names of matching files\n\n\n-n\neach output is preceded by its line number\n\n\n-o\nprint only the matching parts of lines\n\n\n-v\ninvert; list only lines that do not match pattern"
  },
  {
    "objectID": "slides/lec09.html#sed-and-awk",
    "href": "slides/lec09.html#sed-and-awk",
    "title": "Regular expressions; unix toolkit",
    "section": "sed and awk",
    "text": "sed and awk"
  },
  {
    "objectID": "slides/lec09.html#file-interactions",
    "href": "slides/lec09.html#file-interactions",
    "title": "Regular expressions; unix toolkit",
    "section": "file interactions",
    "text": "file interactions\n\n\n\n\n\n\n\ncommand\naction\n\n\n\n\n$ ls\nlist files in current directory\n\n\n$ pwd\nprint working directory\n\n\n$ mkdir dname\nmake directory ‚Äúdname‚Äù\n\n\n$ mkdir s{1..5}\noverpowered file creation\n\n\n$ rm /path/to/file\nremove a file\n\n\n$ rm -rf dname\nrecursively remove a directory and its contents\n\n\n$ rm core*\nremove all objects in the current working directory that begin with ‚Äúcore‚Äù\n\n\n$ wc -l\nshow # lines in a file\n\n\n$ y > x.txt\nexample: $ head -N file1.txt > file2.txt\npass printed output from command ‚Äúy‚Äù on the left to file ‚Äúx.txt‚Äù on the right\ncreates a new file called ‚Äúfile2‚Äù that is a replica of the first N lines of file 1\n\n\n\n$ echo 'text here' >> filename\nadd text to the end of a file"
  },
  {
    "objectID": "slides/lec09.html#variables",
    "href": "slides/lec09.html#variables",
    "title": "Regular expressions; unix toolkit",
    "section": "variables",
    "text": "variables"
  },
  {
    "objectID": "slides/lec09.html#word-count",
    "href": "slides/lec09.html#word-count",
    "title": "Regular expressions; unix toolkit",
    "section": "word count",
    "text": "word count"
  },
  {
    "objectID": "slides/lec09.html#pdfcrop",
    "href": "slides/lec09.html#pdfcrop",
    "title": "Regular expressions; unix toolkit",
    "section": "pdfcrop",
    "text": "pdfcrop"
  },
  {
    "objectID": "slides/lec09.html#in-base-r",
    "href": "slides/lec09.html#in-base-r",
    "title": "Regular expressions; unix toolkit",
    "section": "In Base R",
    "text": "In Base R"
  },
  {
    "objectID": "slides/lec09.html#stringr",
    "href": "slides/lec09.html#stringr",
    "title": "Regular expressions",
    "section": "stringr",
    "text": "stringr\n\n\n\nstringr hosts a convenient set of tools to manipulate strings and extract regular expressions. All functions begin with the prefix str.\nThe best summary of stringr functions is on this cheatsheet\nNotice below that the string comes first in these functions (in contrast with grep/sub)\nExample\n\ntxt = c(\"Luffy: 'I'm going to be king of the pirates! !'\", \n        \"The straw hat crew set sail.\", \n        \"Nami: 'I'm Going to be the world's greatest navigator!'\")\n\n\nstr_detect()str_extract()str_replace\n\n\n\nlike grepl\n\n\nstr_detect(txt, \":\")\n\n[1]  TRUE FALSE  TRUE\n\n\n\n\n\nstr_extract(txt, \"\\\\s[A-Z\\\\|a-z]*ng\") # first instance\n\n[1] \" going\" NA       \" Going\"\n\nstr_extract_all(txt, \"\\\\s[A-Z\\\\|a-z]*ng\") %>% str()\n\nList of 3\n $ : chr [1:2] \" going\" \" king\"\n $ : chr(0) \n $ : chr \" Going\"\n\n\n\n\n\nstr_replace(txt, \"Nami\", \"Zoro\") %>%\n  str_replace(\"navigator\", \"swordsman\")\n\n[1] \"Luffy: 'I'm going to be king of the pirates! !'\"        \n[2] \"The straw hat crew set sail.\"                           \n[3] \"Zoro: 'I'm Going to be the world's greatest swordsman!'\""
  },
  {
    "objectID": "slides/lec09.html#file-and-folder-interactions",
    "href": "slides/lec09.html#file-and-folder-interactions",
    "title": "Regular expressions; unix toolkit",
    "section": "file and folder interactions",
    "text": "file and folder interactions\nA ‚Äúfolder‚Äù aka a ‚Äúdirectory‚Äù is a container. A ‚Äúfile* is an element of a container, e.g.¬†lab-1.qmd is a file contained in a lab-1-username directory.\n\n\n\n\n\n\n\ncommand\naction\n\n\n\n\n$ ls\nlist files in current directory\n\n\n$ pwd\nprint working directory\n\n\n$ mkdir dname\nmake directory ‚Äúdname‚Äù\n\n\n$ mkdir s{1..5}\noverpowered file creation\n\n\n$ rm /path/to/file\nremove a file\n\n\n$ rm -rf dname\nrecursively remove a directory and its contents\n\n\n$ rm core*\nremove all objects in the current working directory that begin with ‚Äúcore‚Äù\n\n\n$ wc -l\nshow # lines in a file\n\n\n$ y > x.txt\npass printed output from command ‚Äúy‚Äù on the left to file ‚Äúx.txt‚Äù on the right\nexample: $ head -N file1.txt > file2.txt creates a new file called ‚Äúfile2‚Äù that is a replica of the first N lines of file 1\n\n\n\n$ echo 'text here' >> filename\nadd text to the end of a file\n\n\n$ man x\npull up documentation for command x, example: $ man ls"
  },
  {
    "objectID": "slides/lec09.html#exercise-1",
    "href": "slides/lec09.html#exercise-1",
    "title": "Regular expressions",
    "section": "Exercise 1",
    "text": "Exercise 1\n\n\n\nDownload the files secret-message.txt and emails.txt using the command below in the console:\n\n\n\n\n\n\nWARNING\n\n\nDO NOT VIEW THE FILE ‚Äì YOUR CONTAINER MAY CRASH!\n\n\n\n\ndownload.file(\"https://sta323-sp23.github.io/data/secret-message.txt\", \n              destfile = \"secret-message.txt\")\n\ndownload.file(\"https://sta323-sp23.github.io/data/emails.txt\", \n              destfile = \"emails.txt\")\n\nHint: read in the file as a string with read_lines()\npart 1\nIn secret-message.txt, find the secret message. It will be of the form sta323{secret-message} where secret-message is replaced by some other text.\npart 2\nIn emails.txt extract the unique part of the email address (part before the ‚Äú@‚Äù) and count the number of each hosting domain, i.e.¬†count how many emails are Duke emails and how many are gmail."
  },
  {
    "objectID": "slides/lec09.html#formatting-principles",
    "href": "slides/lec09.html#formatting-principles",
    "title": "Regular expressions; unix toolkit",
    "section": "Formatting principles",
    "text": "Formatting principles\n\nTo match a string exactly, just write those characters.\nTo match a single character from a set of possibilities, use square brackets, e.g.¬†[0123456789] matches any digit.\nRepeaters: * , + and { }: the preceding character is to be used for more than once\n\n* match zero or more occurrences of the preceding expression\n+ match one or more occurrences of the preceding expression\n{} match the preceding expression for as many times as the value inside this bracket.\n\n. : wildcard. The dot symbol can take place of any other symbol.\n\n{citation: https://www.geeksforgeeks.org/write-regular-expressions/}"
  },
  {
    "objectID": "slides/lec09.html#examples",
    "href": "slides/lec09.html#examples",
    "title": "Regular expressions",
    "section": "Examples",
    "text": "Examples\nIn the following example we will search through the text, line by line, and extract matches.\nLuffy's phone number is 123 456 7890\nZoro doesn't have a phone number\nNami's number is 012-345-6789\nUsopp's number is (919)000 0000\nSanji's telephone number is (919) 123 4567\n0000000000 is Robin's number.\nChopper doesn't have a phone number, but his lucky number is 1.\nregex extraction\n\n\n\nYou can download the text file with\n\ndownload.file(\"https://sta323-sp23.github.io/data/pirate-phone.txt\",\ndestfile = \"pirate-phone.txt\")\n\n\nregexoutputprinciples\n\n\n\nstr_extract(pirate_phone, \"123 456 7890\")\n\n\n\n123 456 7890\n\n\nexact match\n\n\n\n\nregexoutputprinciples\n\n\n\nstr_extract(pirate_phone, \"[0-9]{3}\\\\-[0-9]{3}\\\\-[0-9]{4}\")\n\n\n\n012-345-6789\n\n\nmatching xxx-xxx-xxxx using ranges, repeaters, escaped characters"
  },
  {
    "objectID": "slides/lec09.html#sed-and-grep",
    "href": "slides/lec09.html#sed-and-grep",
    "title": "Regular expressions; unix toolkit",
    "section": "sed and grep",
    "text": "sed and grep"
  },
  {
    "objectID": "slides/lec09.html#paths",
    "href": "slides/lec09.html#paths",
    "title": "Regular expressions; unix toolkit",
    "section": "paths",
    "text": "paths"
  },
  {
    "objectID": "slides/lec09.html#pathfinding",
    "href": "slides/lec09.html#pathfinding",
    "title": "Regular expressions; unix toolkit",
    "section": "pathfinding",
    "text": "pathfinding\nabsolute paths\nrelative paths"
  },
  {
    "objectID": "slides/lec09.html#combine-pdfs-or-pngs",
    "href": "slides/lec09.html#combine-pdfs-or-pngs",
    "title": "Regular expressions; unix toolkit",
    "section": "combine pdfs or pngs",
    "text": "combine pdfs or pngs"
  },
  {
    "objectID": "slides/lec09.html#awk",
    "href": "slides/lec09.html#awk",
    "title": "Regular expressions; unix toolkit",
    "section": "awk",
    "text": "awk\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec09.html#formatting-principles-the-basics",
    "href": "slides/lec09.html#formatting-principles-the-basics",
    "title": "Regular expressions; unix toolkit",
    "section": "Formatting principles (the basics)",
    "text": "Formatting principles (the basics)\n\nTo match a string exactly, just write those characters.\nTo match a single character from a set of possibilities, use square brackets, e.g.¬†[0123456789] matches any digit.\nTo group characters together into an expression, use patentheses, ()\n\n\nRepeaters: * , + and { }: the preceding character is to be used for more than once\n\n* match zero or more occurrences of the preceding expression.\n+ match one or more occurrences of the preceding expression.\n{} match the preceding expression for as many times as the value inside this bracket.\n\n\n\nSymbols\n\n. symbol for wildcard. The dot symbol can take place of any other symbol.\n? symbol for optional character. The preceding character may or may not be present in the string to be matched.\n^ symbol for position match beginning. Tells the computer that the match must start at the beginning of the string or line.\n$ symbol for position match end. Tells the computer that the match must occur at the end of the string or before \\n at the end of the line or string.\n\\ symbol for escaping characters. If you want to match for the actual + or ., etc. add a backslash \\ before that character.\n\n{citation: https://www.geeksforgeeks.org/write-regular-expressions/}"
  },
  {
    "objectID": "slides/lec09.html#principles-i",
    "href": "slides/lec09.html#principles-i",
    "title": "Regular expressions; unix toolkit",
    "section": "Principles I",
    "text": "Principles I\n\nTo match a string exactly, just write those characters.\nTo match a single character from a set of possibilities, use square brackets, e.g.¬†[0123456789] matches any digit.\nTo group characters together into an expression, use patentheses, ()\n\n\nRepeaters: * , + and { }: the preceding character is to be used for more than once\n\n* match zero or more occurrences of the preceding expression.\n+ match one or more occurrences of the preceding expression.\n{} match the preceding expression for as many times as the value inside this bracket.\n\n\n\nSymbols\n\n. symbol for wildcard. The dot symbol can take place of any other symbol.\n? symbol for optional character. The preceding character may or may not be present in the string to be matched. Example: docx?\n$ symbol for position match end. Tells the computer that the match must occur at the end of the string or before \\n at the end of the line or string.\n\\ symbol for escaping characters. If you want to match for the actual + or ., etc. add a backslash \\ before that character.\n\n{citation: https://www.geeksforgeeks.org/write-regular-expressions/}"
  },
  {
    "objectID": "slides/lec09.html#principles-ii",
    "href": "slides/lec09.html#principles-ii",
    "title": "Regular expressions; unix toolkit",
    "section": "Principles II",
    "text": "Principles II\nSymbols cont.\n\n| symbol for ‚Äúor‚Äù. Match any one element separated by the vertical bar | character. Example: th(e|is|at) will match words ‚Äúthe‚Äù, ‚Äúthis‚Äù and ‚Äúthat‚Äù.\n^ symbol has two meanings.\n\nBy itself, ^ sets the position of the match to the beginning of the string or line. Example: ^\\d{3} says to match the first three digits at the beginning of the string and will return 919 from 919-123-4567.\nTogether with brackets, [^set_of_characters] implies exclusion. Example: [^abc] will match any character except a, b, c.\n\n\nCharacter classes: match a character by its class, for example: letter, digit, space, and symbols.\n\n\\s : matches any whitespace characters such as space and tab\n\\S : matches any non-whitespace characters\n\\d : matches any digit character\n\\D : matches any non-digit characters\n\\w : matches any word character (basically alpha-numeric)\n\\W : matches any non-word character\n\\b : matches any word boundary (this would include spaces, dashes, commas, semi-colons, etc)\n\n{citation: https://www.geeksforgeeks.org/write-regular-expressions/}"
  },
  {
    "objectID": "slides/lec09.html#basic-principles-i",
    "href": "slides/lec09.html#basic-principles-i",
    "title": "Regular expressions",
    "section": "Basic principles I",
    "text": "Basic principles I\n\nTo match a string exactly, just write those characters.\nTo match a single character from a set of possibilities, use square brackets, e.g.¬†[0123456789] matches any digit.\nTo group characters together into an expression, use parentheses, ()\n\n\nRepeaters: * , + and { }: the preceding character is to be used for more than once\n\n* match zero or more occurrences of the preceding expression.\n+ match one or more occurrences of the preceding expression.\n{} match the preceding expression for as many times as the value inside this bracket.\n\n\n\nSymbols\n\n. symbol for wildcard. The dot symbol can take place of any other symbol.\n? symbol for optional character. The preceding character may or may not be present in the string to be matched. Example: docx?\n$ symbol for position match end. Tells the computer that the match must occur at the end of the string or before \\n at the end of the line or string.\n\\ symbol for escaping characters. If you want to match for the actual + or ., etc. add a backslash \\ before that character.\n\n{citation: https://www.geeksforgeeks.org/write-regular-expressions/}"
  },
  {
    "objectID": "slides/lec09.html#basic-principles-ii",
    "href": "slides/lec09.html#basic-principles-ii",
    "title": "Regular expressions",
    "section": "Basic principles II",
    "text": "Basic principles II\nSymbols cont.\n\n| symbol for ‚Äúor‚Äù. Match any one element separated by the vertical bar | character. Example: th(e|is|at) will match words ‚Äúthe‚Äù, ‚Äúthis‚Äù and ‚Äúthat‚Äù.\n^ symbol has two meanings.\n\nBy itself, ^ sets the position of the match to the beginning of the string or line. Example: ^\\d{3} says to match the first three digits at the beginning of the string and will return 919 from 919-123-4567.\nTogether with brackets, [^set_of_characters] implies exclusion. Example: [^abc] will match any character except a, b, c.\n\n\n\nCharacter classes: match a character by its class, for example: letter, digit, space, and symbols.\n\n\\s : matches any whitespace characters such as space and tab\n\\S : matches any non-whitespace characters\n\\d : matches any digit character\n\\D : matches any non-digit characters\n\\w : matches any word character (basically alpha-numeric)\n\\W : matches any non-word character\n\\b : matches any word boundary (this would include spaces, dashes, commas, semi-colons, etc)\n\n{citation: https://www.geeksforgeeks.org/write-regular-expressions/}"
  },
  {
    "objectID": "slides/lec09.html#basic-principles-iii",
    "href": "slides/lec09.html#basic-principles-iii",
    "title": "Regular expressions",
    "section": "Basic principles III",
    "text": "Basic principles III\nRanges\n- can be used to interpolate between first and last and grab consecutive values. Example: [A-Z] matches any capital letters from ‚ÄúA‚Äù to ‚ÄúZ‚Äù. [1-4] matches any integer digit from 1 to 4.\n{citation: https://www.geeksforgeeks.org/write-regular-expressions/}\n\nEscapism\nYou have to ‚Äúescape‚Äù with a \\ quite a lot. More on this in the cheatsheet later. The short version is:\n. ^ $ * + ? { } [ ] \\ | ( )\nmust be escaped to match directly. Since regexps live on top of character escapes i.e.¬†has special classes like \\d, \\s etc., you need to use two levels of escape to escape a special character. Example:\n\ntxt = \"To be, [or] not to be that is the question.\"\n\n\ngrepl(\"[\", txt)\n\nWarning in grepl(\"[\", txt): TRE pattern compilation error 'Missing ']''\n\n\nError in grepl(\"[\", txt): invalid regular expression '[', reason 'Missing ']''\n\n\n\ngrepl(\"\\[\", txt)\n\nError: '\\[' is an unrecognized escape in character string starting \"\"\\[\"\n\n\n\ngrepl(\"\\\\[\", txt)\n\n[1] TRUE"
  },
  {
    "objectID": "slides/lec09.html#examples-1",
    "href": "slides/lec09.html#examples-1",
    "title": "Regular expressions",
    "section": "Examples",
    "text": "Examples\nLuffy's phone number is 123 456 7890\nZoro doesn't have a phone number\nNami's number is 012-345-6789\nUsopp's number is (919)000 0000\nSanji's telephone number is (919) 123 4567\n0000000000 is Robin's number.\nChopper doesn't have a phone number, but his lucky number is 1.\nregex extraction\n\nregexoutputprinciples\n\n\n\nstr_extract_all(pirate_phone, \"\\\\(\\\\d{3}\\\\)\\\\d{3}\\\\s\\\\d{4}\")\n\n\n\n(919)000 0000\n\n\nmatching (xxx)xxx xxxx using character classes (\\d for digit, \\s for whitespace) and repeaters\n\n\n\n\nregexoutputprinciples\n\n\n\nstr_extract_all(pirate_phone, \"\\\\(\\\\d{3}\\\\).?\\\\d{3}\\\\s[0-9]{4}\")\n\n\n\n(919)000 0000\n(919) 123 4567\n\n\nmatching (xxx)*xxx xxxx using character classes, wildcard (.) and optional chracter (?)\n\n\n\n\n\nregexoutputprinciples\n\n\n\n# hidden exercise, code here!\n\n\n\n123 456 7890\n012-345-6789\n(919)000 0000\n(919) 123 4567\n0000000000\n\n\nMultiple optional matching"
  },
  {
    "objectID": "slides/lec09.html#on-the-commmand-line-grep",
    "href": "slides/lec09.html#on-the-commmand-line-grep",
    "title": "Regular expressions",
    "section": "On the commmand line (grep)",
    "text": "On the commmand line (grep)\nThere are three fundamental tools on unix systems to process text patterns: grep, sed and awk.\nThe simplest is grep. grep looks by default for lines of files that match the regex.\nCheck out the documentation with\n$ man grep\nThe basics are:\n$ grep -option path/to/file(s)\nCommon options include:\n\n\n\n\ngrep option\nwhat it does\n\n\n\n\n-c\ncount lines with a match\n\n\n-i\ncase insensitive search\n\n\n-l\nlist only names of matching files\n\n\n-n\neach output is preceded by its line number\n\n\n-o\nprint only the matching parts of lines\n\n\n-v\ninvert; list only lines that do not match pattern"
  },
  {
    "objectID": "slides/lec09.html#regex-in-base-r",
    "href": "slides/lec09.html#regex-in-base-r",
    "title": "Regular expressions; unix toolkit",
    "section": "regex in base R",
    "text": "regex in base R\n\ngrep(), grepl() - regular expression pattern matching\nsub(), gsub() - regular expression pattern replacement\n\nExample"
  },
  {
    "objectID": "slides/lec09.html#additional-string-functions-in-base-r",
    "href": "slides/lec09.html#additional-string-functions-in-base-r",
    "title": "Regular expressions; unix toolkit",
    "section": "Additional string functions in base R",
    "text": "Additional string functions in base R\nThe base language provides a number helper functions for additional manipulation of string objects:\n\npaste(), paste0() - concatenate strings\nsubstr(), substring() - extract or replace substrings\nsprintf() - C-like string construction\nnchar() - counts characters\nstrsplit() - split a string into substrings\ntolower() - make string all lowercase\ntoupper() - make string all uppercase\n\n‚Ä¶many more.\nthe ‚ÄúSee Also‚Äù section of the the above functions‚Äô documentation is a good place to discover additional functions."
  },
  {
    "objectID": "slides/lec09.html#exercise-2",
    "href": "slides/lec09.html#exercise-2",
    "title": "Regular expressions",
    "section": "Exercise 2",
    "text": "Exercise 2\nThe power and ease of the terminal‚Ä¶\nUsing an appropriate regex and the terminal grep, find the secret message hidden in some of the files in the zip folder:\n\ndownload.file(\"https://sta323-sp23.github.io/data/secret-messages.zip\", \n              destfile = \"secret-messages.zip\")\n\nunzip(\"secret-messages.zip\", exdir = \"secret-messages\")\n\nAgain, look for sta323{message-here}."
  },
  {
    "objectID": "slides/lec09.html#base-r-regex",
    "href": "slides/lec09.html#base-r-regex",
    "title": "Regular expressions",
    "section": "base R regex",
    "text": "base R regex\n\ngrep(), grepl() - regular expression pattern matching, ‚Äúl‚Äù for return logical\nsub(), gsub() - regular expression pattern replacement (replace first, replace all)\nregmatches() - extract or replace matched strings\n\nExample\n\ntxt = c(\"Luffy: 'I'm going to be king of the pirates! !'\", \n        \"The straw hat crew set sail.\", \n        \"Nami: 'I'm Going to be the world's greatest navigator!'\")\n\n\ngrep/greplsub/gsubregmatches\n\n\n\ngrep(\":\", txt)\n\n[1] 1 3\n\ngrepl(\":\", txt)\n\n[1]  TRUE FALSE  TRUE\n\ngrep(\":\", txt, value = TRUE)\n\n[1] \"Luffy: 'I'm going to be king of the pirates! !'\"        \n[2] \"Nami: 'I'm Going to be the world's greatest navigator!'\"\n\n\n\n\n\nsub(\"!\", \"!!!\", txt) # first ! in a string, vectorized\n\n[1] \"Luffy: 'I'm going to be king of the pirates!!! !'\"        \n[2] \"The straw hat crew set sail.\"                             \n[3] \"Nami: 'I'm Going to be the world's greatest navigator!!!'\"\n\ngsub(\"!\", \"!!!\", txt) # all !, vectorized\n\n[1] \"Luffy: 'I'm going to be king of the pirates!!! !!!'\"      \n[2] \"The straw hat crew set sail.\"                             \n[3] \"Nami: 'I'm Going to be the world's greatest navigator!!!'\"\n\n\n\n\n\nregmatches(txt, regexpr(\".*:\", txt))\n\n[1] \"Luffy:\" \"Nami:\" \n\nregmatches(txt, regexpr(\"\\\\s[a-z]*ng\", txt))\n\n[1] \" going\"\n\nregmatches(txt, regexpr(\"\\\\s[A-Z\\\\|a-z]*ng\", txt))\n\n[1] \" going\" \" Going\""
  },
  {
    "objectID": "slides/lec09.html#stringr-regex",
    "href": "slides/lec09.html#stringr-regex",
    "title": "Regular expressions; unix toolkit",
    "section": "stringr regex",
    "text": "stringr regex\n\nstr_sub() -\nstr_subset()\nstr_detect()\nstr_replace()\nstr_replace_all() -"
  },
  {
    "objectID": "slides/lec09.html#additional-stringr-functions",
    "href": "slides/lec09.html#additional-stringr-functions",
    "title": "Regular expressions; unix toolkit",
    "section": "Additional stringr functions",
    "text": "Additional stringr functions\nstringr hosts a convenient set of tools to manipulate strings. All functions begin with the prefix str.\n\nstr_count - count the characters in a string\nstr_c() - concatenate string vectors\nstr_trim() - trim whitespace\nstr_length() - returns number of characters in string\nstr_to_lower() and str_to_upper() makes string all lower/uppercase\nstr_sort() - sort a string or vector of strings"
  },
  {
    "objectID": "slides/lec09.html#the-power-of-str_replace",
    "href": "slides/lec09.html#the-power-of-str_replace",
    "title": "Regular expressions",
    "section": "The power of str_replace",
    "text": "The power of str_replace\n\nno_bots = \"My number is one Two tHree 456 fOuR 3 2 1\"\n\n\nstr_to_lower(no_bots) %>%\n  str_replace_all(c(\"one\" = \"1\", \"two\" = \"2\", \n                    \"three\" = \"3\", \"four\" = \"4\")) %>%\n  str_extract_all(\"\\\\d\") %>% # simplify arg here could change pipeline\n  unlist() %>%\n  paste(collapse = \"\") # or use str_c(collapse = \"\")\n\n[1] \"1234564321\""
  },
  {
    "objectID": "slides/lec09.html#exercises",
    "href": "slides/lec09.html#exercises",
    "title": "Regular expressions",
    "section": "Exercises",
    "text": "Exercises\n\n\n\nDownload the files secret-message.txt and emails.txt using the command below in the console:\n\ndownload.file(\"https://sta323-sp23.github.io/data/secret-message.txt\", \n              destfile = \"secret-message.txt\")\n\nFor each of the following exercises, you can choose to use either terminal or R, or both if you have time. Note: if you are using R you might want to read in the file as a string with read_lines().\npart 1\nIn secret-message.txt, find the secret message. It will be of the form sta323{secret-message} where secret-message is replaced by some other text.\npart 2\nIn emails.txt extract the unique part of the email address (part before the ‚Äú@‚Äù) and count the number of each hosting domain, i.e.¬†count how many emails are Duke emails and how many are gmail."
  },
  {
    "objectID": "slides/lec09.html#base-r-string-toolkit",
    "href": "slides/lec09.html#base-r-string-toolkit",
    "title": "Regular expressions",
    "section": "base R string toolkit",
    "text": "base R string toolkit\nThe base language provides a number helper functions for additional manipulation of string objects:\n\npaste(), paste0() - concatenate strings\nsubstr(), substring() - extract or replace substrings\nsprintf() - C-like string construction\nnchar() - counts characters\nstrsplit() - split a string into substrings\ntolower() - make string all lowercase\ntoupper() - make string all uppercase\n\n‚Ä¶many more.\nthe ‚ÄúSee Also‚Äù section of the the above functions‚Äô documentation is a good place to discover additional functions."
  },
  {
    "objectID": "slides/lec09.html#basic-unix-toolkit",
    "href": "slides/lec09.html#basic-unix-toolkit",
    "title": "Regular expressions",
    "section": "basic unix toolkit",
    "text": "basic unix toolkit\nA ‚Äúfolder‚Äù aka a ‚Äúdirectory‚Äù is a container. A ‚Äúfile* is an element of a container, e.g.¬†lab-1.qmd is a file contained in a lab-1-username directory.\n\n\n\n\n\n\n\ncommand\naction\n\n\n\n\n$ ls\nlist files in current directory\n\n\n$ pwd\nprint working directory\n\n\n$ cd\nchange directory\nexample: $ cd .. to go to parent directory\n\n\n$ mkdir dname\nmake directory ‚Äúdname‚Äù\n\n\n$ mkdir s{1..5}\noverpowered file creation\n\n\n$ rm /path/to/file\nremove a file\n\n\n$ rm -rf dname\nrecursively remove a directory and its contents\n\n\n$ rm core*\nremove all objects in the current working directory that begin with ‚Äúcore‚Äù\n\n\n$ wc -l\nshow # lines in a file\n\n\n$ y > x.txt\npass printed output from command ‚Äúy‚Äù on the left to file ‚Äúx.txt‚Äù on the right\nexample: $ head -N file1.txt > file2.txt creates a new file called ‚Äúfile2‚Äù that is a replica of the first N lines of file 1\n\n\n\n$ echo 'text here' >> filename\nadd text to the end of a file\n\n\n$ man x\npull up documentation for command x, example: $ man ls\n\n\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec10.html#basic-tools",
    "href": "slides/lec10.html#basic-tools",
    "title": "Unix toolkit",
    "section": "basic tools",
    "text": "basic tools\nA ‚Äúfolder‚Äù aka a ‚Äúdirectory‚Äù is a container. A ‚Äúfile* is an element of a container, e.g.¬†lab-1.qmd is a file contained in a lab-1-username directory.\n\n\n\n\n\n\n\ncommand\naction\n\n\n\n\n$ ls\nlist files in current directory\n\n\n$ pwd\nprint working directory\n\n\n$ cd\nchange directory\nexample: $ cd .. to go to parent directory\n\n\n$ mkdir dname\nmake directory ‚Äúdname‚Äù\n\n\n$ mkdir s{1..5}\noverpowered file creation\n\n\n$ rm /path/to/file\nremove a file\n\n\n$ rm -rf dname\nrecursively remove a directory and its contents\n\n\n$ rm core*\nremove all objects in the current working directory that begin with ‚Äúcore‚Äù\n\n\n$ wc -l\nshow # lines in a file\n\n\n$ y > x.txt\npass printed output from command ‚Äúy‚Äù on the left to file ‚Äúx.txt‚Äù on the right\nexample: $ head -N file1.txt > file2.txt creates a new file called ‚Äúfile2‚Äù that is a replica of the first N lines of file 1\n\n\n\n$ echo 'text here' >> filename\nadd text to the end of a file\n\n\n$ man x\npull up documentation for command x, example: $ man ls"
  },
  {
    "objectID": "slides/lec10.html#paths",
    "href": "slides/lec10.html#paths",
    "title": "Unix toolkit",
    "section": "paths",
    "text": "paths"
  },
  {
    "objectID": "slides/lec10.html#pathfinding",
    "href": "slides/lec10.html#pathfinding",
    "title": "Unix toolkit",
    "section": "pathfinding",
    "text": "pathfinding\nabsolute paths\nrelative paths"
  },
  {
    "objectID": "slides/lec10.html#exercise",
    "href": "slides/lec10.html#exercise",
    "title": "Unix toolkit",
    "section": "Exercise",
    "text": "Exercise"
  },
  {
    "objectID": "slides/lec10.html#word-count",
    "href": "slides/lec10.html#word-count",
    "title": "Unix toolkit",
    "section": "word count",
    "text": "word count"
  },
  {
    "objectID": "slides/lec10.html#pdfcrop",
    "href": "slides/lec10.html#pdfcrop",
    "title": "Unix toolkit",
    "section": "pdfcrop",
    "text": "pdfcrop"
  },
  {
    "objectID": "slides/lec10.html#combine-pdfs-or-pngs",
    "href": "slides/lec10.html#combine-pdfs-or-pngs",
    "title": "Unix toolkit",
    "section": "combine pdfs or pngs",
    "text": "combine pdfs or pngs"
  },
  {
    "objectID": "slides/lec10.html#awk",
    "href": "slides/lec10.html#awk",
    "title": "Unix toolkit",
    "section": "awk",
    "text": "awk"
  },
  {
    "objectID": "slides/lec10.html#exercise-1",
    "href": "slides/lec10.html#exercise-1",
    "title": "Unix toolkit",
    "section": "Exercise",
    "text": "Exercise\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec10.html#simple-cheat-sheet",
    "href": "slides/lec10.html#simple-cheat-sheet",
    "title": "Unix toolkit",
    "section": "simple cheat sheet",
    "text": "simple cheat sheet\nA ‚Äúfolder‚Äù aka a ‚Äúdirectory‚Äù is a container. A ‚Äúfile* is an element of a container, e.g.¬†lab-1.qmd is a file contained in a lab-1-username directory.\n\n\n\n\n\n\n\ncommand\naction\n\n\n\n\n$ ls\nlist files in current directory\n\n\n$ pwd\nprint working directory\n\n\n$ cd\nchange directory\nexample: $ cd .. to go to parent directory\n\n\n$ mkdir dname\nmake directory ‚Äúdname‚Äù\n\n\n$ mkdir s{1..5}\noverpowered file creation\n\n\n$ rm /path/to/file\nremove a file\n\n\n$ rm -rf dname\nrecursively remove a directory and its contents\n\n\n$ rm core*\nremove all objects in the current working directory that begin with ‚Äúcore‚Äù\n\n\n$ wc -l\nshow # lines in a file\n\n\n$ y > x.txt\npass printed output from command ‚Äúy‚Äù on the left to file ‚Äúx.txt‚Äù on the right\nexample: $ head -N file1.txt > file2.txt creates a new file called ‚Äúfile2‚Äù that is a replica of the first N lines of file 1\n\n\n\n$ echo 'text here' >> filename\nadd text to the end of a file\n\n\n$ man x\npull up documentation for command x, example: $ man ls"
  },
  {
    "objectID": "slides/lec09.html#basic-principles",
    "href": "slides/lec09.html#basic-principles",
    "title": "Regular expressions",
    "section": "Basic principles",
    "text": "Basic principles\n\nTo match a string exactly, just write those characters.\nTo match a single character from a set of possibilities, use square brackets, e.g.¬†[0123456789] matches any digit.\nTo group characters together into an expression, use parentheses, ()\n\n\nRepeaters: * , + and { }: the preceding character is to be used for more than once\n\n* match zero or more occurrences of the preceding expression.\n+ match one or more occurrences of the preceding expression.\n{} match the preceding expression for as many times as the value inside this bracket.\n\n\n\nSome repeater examples:\n\n\n\n\n\n\n\n\n\nregexp\nexplanation\n\n\n\n\na*\nmatch 0 or more occurences of ‚Äúa‚Äù\n\n\na+\nmatch 1 more occurences of ‚Äúa‚Äù\n\n\n(abc)+\nmatch 1 or more back-to-back occurence of the group ‚Äúabc‚Äù\n\n\na{3}\nmatch a 3 times\n\n\na{3,}\nmatch a 3 or more times\n\n\na{3,5}\nmatch ‚Äúa‚Äù 3, 4 or 5 times\n\n\n\n{citation: https://www.geeksforgeeks.org/write-regular-expressions/}"
  },
  {
    "objectID": "slides/lec09.html#a-hierarchical-view-of-character-classes",
    "href": "slides/lec09.html#a-hierarchical-view-of-character-classes",
    "title": "Regular expressions",
    "section": "A hierarchical view of character classes",
    "text": "A hierarchical view of character classes\n\n{citation: http://perso.ens-lyon.fr/lise.vaudor/strings-et-expressions-regulieres/}"
  },
  {
    "objectID": "slides/lec09.html#symbols",
    "href": "slides/lec09.html#symbols",
    "title": "Regular expressions",
    "section": "Symbols",
    "text": "Symbols\n\n. symbol for wildcard. The dot symbol can take place of any other symbol.\n? symbol for optional character. The preceding character may or may not be present in the string to be matched. Example: docx? will match both docx and doc\n$ symbol for position match end. Tells the computer that the match must occur at the end of the string or before \\n at the end of the line or string.\n\\ symbol for escaping characters. If you want to match for the actual + or ., etc. add a backslash \\ before that character.\n| symbol for ‚Äúor‚Äù. Match any one element separated by the vertical bar | character. Example: th(e|is|at) will match words ‚Äúthe‚Äù, ‚Äúthis‚Äù and ‚Äúthat‚Äù.\n^ symbol has two meanings.\n\nBy itself, ^ sets the position of the match to the beginning of the string or line. Example: ^\\d{3} says to match the first three digits at the beginning of the string and will return 919 from 919-123-4567.\nTogether with brackets, [^set_of_characters] implies exclusion. Example: [^abc] will match any character except a, b, c."
  },
  {
    "objectID": "slides/lec09.html#character-classes",
    "href": "slides/lec09.html#character-classes",
    "title": "Regular expressions",
    "section": "Character classes",
    "text": "Character classes\nCharacter classes: match a character by its class, for example: letter, digit, space, and symbols.\n\n\\s : matches any whitespace characters such as space and tab\n\\S : matches any non-whitespace characters\n\\d : matches any digit character\n\\D : matches any non-digit characters\n\\w : matches any word character (basically alpha-numeric)\n\\W : matches any non-word character\n\\b : matches any word boundary (this would include spaces, dashes, commas, semi-colons, etc)\n\n{citation: https://www.geeksforgeeks.org/write-regular-expressions/}"
  },
  {
    "objectID": "slides/lec09.html#ranges-and-escaping",
    "href": "slides/lec09.html#ranges-and-escaping",
    "title": "Regular expressions",
    "section": "Ranges and escaping",
    "text": "Ranges and escaping\nRanges\n- can be used to interpolate between first and last and grab consecutive values. Example: [A-Z] matches any capital letters from ‚ÄúA‚Äù to ‚ÄúZ‚Äù. [1-4] matches any integer digit from 1 to 4.\n{citation: https://www.geeksforgeeks.org/write-regular-expressions/}\n\nEscapism\nYou have to ‚Äúescape‚Äù with a \\ quite a lot. More on this in the cheatsheet later. The short version is:\n. ^ $ * + ? { } [ ] \\ | ( )\nmust be escaped to match directly. Since regexps live on top of character escapes i.e.¬†has special classes like \\d, \\s etc., you need to use two levels of escape to escape a special character. Example:\n\ntxt = \"To be, [or] not to be that is the question.\"\n\n\ngrepl(\"[\", txt)\n\nWarning in grepl(\"[\", txt): TRE pattern compilation error 'Missing ']''\n\n\nError in grepl(\"[\", txt): invalid regular expression '[', reason 'Missing ']''\n\n\n\ngrepl(\"\\[\", txt)\n\nError: '\\[' is an unrecognized escape in character string starting \"\"\\[\"\n\n\n\ngrepl(\"\\\\[\", txt)\n\n[1] TRUE"
  },
  {
    "objectID": "labs/lab4.html",
    "href": "labs/lab4.html",
    "title": "Lab 4: wrangling the written word",
    "section": "",
    "text": "‚ÄúA [computer keyboard] is to me as a beak is to a hen.‚Äù ‚Äî J. R. R. Tolkien (loosely)\nBy the end of the lab, you will‚Ä¶"
  },
  {
    "objectID": "labs/lab4.html#exercises",
    "href": "labs/lab4.html#exercises",
    "title": "Lab 4: wrangling the written word",
    "section": "Exercises",
    "text": "Exercises\nFor all exercises, you should respond in the space provided in the template lab-4.qmd. Any task that says ‚Äúprint to the screen‚Äù, or ‚Äúglimpse the data frame‚Äù etc. should be reproduced in your qmd and be visible upon rendering.\n\n\n\n\n\n\nNote\n\n\n\nIn this lab, there is only one exercise."
  },
  {
    "objectID": "labs/lab4.html#exercise-1",
    "href": "labs/lab4.html#exercise-1",
    "title": "Lab 4:",
    "section": "Exercise 1",
    "text": "Exercise 1\nWe will go through 12013 documents and create a single workable data frame from them for use in a future lab."
  },
  {
    "objectID": "labs/lab4.html#style-guidelines",
    "href": "labs/lab4.html#style-guidelines",
    "title": "Lab 4: wrangling the written word",
    "section": "Style guidelines",
    "text": "Style guidelines\nAll assignments in this course must employ proper coding style, as outlined below:\n\nAll code should obey the 80 character limit per line (i.e.¬†no code should run off the page when rendering or require scrolling). To enable a vertical line in the RStudio IDE that helps guide this, see the style guidelines from lab 0 or ask a member of the teaching team for help.\nAll commas should be followed by a space.\nAll binary operators should be surrounded by space. For example x + y is appropriate. x+y is not.\nAll pipes %>% or |> as well as ggplot layers + should be followed by a new line.\nYou should be consistent with stylistic choices, e.g.¬†only use 1 of = vs <- and %>% vs |>\nYour name should be at the top (in the YAML) of each document under ‚Äúauthor:‚Äù\nAll code chunks should be named (with names that don‚Äôt have spaces, e.g.¬†ex-1, ex-2 etc.)\nFile names in your GitHub repo such as lab-x.qmd must not be changed and left as provided. Additionally, your repo must pass certain basic checks. The results of these checks are visible on GitHub via the badges at the top of your README and the actions tab. These are meant to give you feedback around the structure and reproducibility of your repository and assignment - they do not assess the correctness of your work. You should consider them a necessary but not sufficient condition when turning in your work - passing all of the checks simply means your have met a minimum standard of reproducibility for the assignment.\n\nFundamentally, the check is making sure 1) you only have the files you should in your repository, 2) your .qmd renders.\nIf you have any questions about style, please ask a member of the teaching team."
  },
  {
    "objectID": "labs/lab4.html#submitting-your-lab",
    "href": "labs/lab4.html#submitting-your-lab",
    "title": "Lab 4: wrangling the written word",
    "section": "Submitting your lab",
    "text": "Submitting your lab\nTo submit your assignment, simply commit and push your completed lab-x.qmd to your GitHub repo. Your most recent commit 48 hours after the assignment deadline will be graded, and any applicable late penalty will be applied (see the syllabus). For this reason, do not push commits after you are satisfied with your work, or a late penalty will be applied."
  },
  {
    "objectID": "labs/lab5.html",
    "href": "labs/lab5.html",
    "title": "Lab 5: Where‚Äôs zero?",
    "section": "",
    "text": "By the end of the lab, you will‚Ä¶"
  },
  {
    "objectID": "labs/lab5.html#exercises",
    "href": "labs/lab5.html#exercises",
    "title": "Lab 5: Where‚Äôs zero?",
    "section": "Exercises",
    "text": "Exercises\nFor all exercises, you should respond in the space provided in the template lab-5.qmd and show all your work. In all answers of type double, three significant figures suffices.\n\n1. Weibull MLE\n\nx = c(1.811328, 0.9210481, 1.753609, 0.1971982, 1.957823, 0.9607706, 0.3611815,\n      0.9710981, 1.684854, 1.49811, 0.4599071, 1.18149, 0.04501055, 0.2688005,\n      0.9070787, 0.1067991, 0.8979944, 0.1442192, 0.3690044, 1.250377,\n      0.7919656, 0.2785386, 1.312061, 1.794021, 1.867813, 1.374013, 0.7282234,\n      0.6067082, 1.062187, 0.08889603, 0.5668522, 0.743226, 0.6237324,\n      0.2951361, 0.2185725, 0.8271643, 0.4682848, 0.7791434, 0.2655503,\n      0.5545753, 0.7419484, 0.1427752, 0.3778655, 1.327472, 0.93939,\n      0.9402052, 0.8784793, 0.605618, 0.7390297, 0.7402008)\n\nAssume\n\\[\nx_i\n\\overset{\\mathrm{iid}}{\\sim}\nWeibull(\\lambda, k)\n\\]\nFind the maximum likelihood estimates \\(\\hat{k}_{MLE}\\) and \\(\\hat{\\lambda}_{MLE}\\) using Newton‚Äôs method. In your solution, code Newton‚Äôs method and all derivatives yourself. Do not use a package or library for this. Show all your work (including writing down any relevant math).\nInitialize your algorithm with \\(k = 2\\). Set your stopping tolerance to 0.001 and maximum iterations to 500.\nReport your estimates \\(\\hat{k}_{MLE}\\) and \\(\\hat{\\lambda}_{MLE}\\).\n\n\n\n\n\n\nHint\n\n\n\n\nYou only need to perform Newton‚Äôs method on the parameter \\(k\\) here.\n\n\n\n\n\n2. visualize Weibull gradient w.r.t \\(k\\)\nFollowing up on the previous exercise, let‚Äôs gain insight into when and how Newton‚Äôs method can fail.\n\nSet your starting \\(k = 4\\). What value \\(k\\) converge to? Is this a valid value of \\(k\\)?\nTo gain insight into this, plot the derivative of the log-likelihood of \\(k\\) from 0.01 to 5. Why does starting at 4 change the result?\nNext plot the derivative of the log-likelihood from -5 to -0.01. Be sure to appropriately label your plots, add relevant titles, etc. Combine your plots using patchwork.\nFinally, edit your Newton-Raphson algorithm to ‚Äúreflect‚Äù negative values, i.e.¬†if the updated iterate is negative, force it to be positive. Re-run your Newton‚Äôs method starting at \\(k=4\\). What does \\(k\\) converge to? Why?\n\n\n\n\n\n\n\nHint\n\n\n\nWrite the gradient with respect to \\(k\\) as a function of \\(k\\) alone (as in lecture).\n\n\n\n\n3. zero-inflated Poisson\nZero-inflated models allow for frequent zero-valued observations. You observe 100 people at the beach fishing. The number of fish each individual catches is reported in the data fishing_count below.\n\nfishing_count = c(0, 0, 0, 3, 0, 3, 5, 0, 8, 1,\n                  0, 0, 0, 0, 3, 4, 0, 4, 8, 0,\n                  0, 0, 4, 0, 0, 6, 4, 0, 4, 0,\n                  0, 0, 0, 0, 4, 8, 4, 0, 0, 0,\n                  7, 3, 0, 2, 0, 0, 7, 7, 5, 0,\n                  0, 0, 7, 6, 0, 3, 0, 0, 0, 5,\n                  4, 1, 0, 0, 0, 0, 0, 0, 0, 8,\n                  0, 5, 0, 3, 0, 0, 3, 0, 0, 2,\n                  0, 5, 0, 7, 7, 0, 1, 0, 2, 7,\n                  0, 2, 4, 0, 0, 1, 5, 0, 0, 0)\n\n\nVisualize the distribution of the data using an appropriate visualization. Label axes and describe your plot.\n\nThe data can be described as being generated from a zero-inflated mixture model. Let \\(Y_i\\) be the number of fish an individual catches at the beach,\n\\[\n\\begin{aligned}\np(Y_i = 0) &= p + (1-p) e^{-\\lambda}\\\\\np(Y_i = y_i) &= \\frac{(1 - p)\\lambda^{y_i}e^{-\\lambda}}{y_i!}, \\ \\ y_i = 1, 2, 3, \\ldots\n\\end{aligned}\n\\]\n\nAssume observations \\(\\{Y_i\\}\\) are independent. Write down the log-likelihood and visualize the log-likelihood as a function of \\(p\\) while fixing \\(\\lambda = 5\\). Repeat for \\(\\lambda = 4\\) (on the same plot). Based on your plot, which value of \\(\\lambda\\) is more likely? Also, assuming these \\(\\lambda\\) are sufficiently close to the true \\(\\lambda\\), what is (approximately) the MLE of \\(p\\) based on your plot?\n\nUsing this mixture model, compute the maximum likelihood estimates \\(\\hat{p}_{MLE}\\) and \\(\\hat{\\lambda}_{MLE}\\) using Newton‚Äôs method. In your solution, code Newton‚Äôs method and all derivatives yourself. Do not use a package or library for this. Show all your work (including writing down any relevant math).\nInitialize your algorithm with \\(\\lambda = 2\\). Set your stopping tolerance to 0.001 and maximum iterations to 500.\n\n\n\n\n\n\nHint\n\n\n\n\nTo begin, write the likelihood of the data. This is your objective function that you wish to maximize.\nYou only need to perform Newton‚Äôs method on the parameter \\(\\lambda\\) here."
  },
  {
    "objectID": "labs/lab5.html#style-guidelines",
    "href": "labs/lab5.html#style-guidelines",
    "title": "Lab 5: Where‚Äôs zero?",
    "section": "Style guidelines",
    "text": "Style guidelines\nAll assignments in this course must employ proper coding style, as outlined below:\n\nAll code should obey the 80 character limit per line (i.e.¬†no code should run off the page when rendering or require scrolling). To enable a vertical line in the RStudio IDE that helps guide this, see the style guidelines from lab 0 or ask a member of the teaching team for help.\nAll commas should be followed by a space.\nAll binary operators should be surrounded by space. For example x + y is appropriate. x+y is not.\nAll pipes %>% or |> as well as ggplot layers + should be followed by a new line.\nYou should be consistent with stylistic choices, e.g.¬†only use 1 of = vs <- and %>% vs |>\nYour name should be at the top (in the YAML) of each document under ‚Äúauthor:‚Äù\nAll code chunks should be named (with names that don‚Äôt have spaces, e.g.¬†ex-1, ex-2 etc.)\nFile names in your GitHub repo such as lab-x.qmd must not be changed and left as provided. Additionally, your repo must pass certain basic checks. The results of these checks are visible on GitHub via the badges at the top of your README and the actions tab. These are meant to give you feedback around the structure and reproducibility of your repository and assignment - they do not assess the correctness of your work. You should consider them a necessary but not sufficient condition when turning in your work - passing all of the checks simply means your have met a minimum standard of reproducibility for the assignment.\n\nFundamentally, the check is making sure 1) you only have the files you should in your repository, 2) your .qmd renders.\nIf you have any questions about style, please ask a member of the teaching team."
  },
  {
    "objectID": "labs/lab5.html#submitting-your-lab",
    "href": "labs/lab5.html#submitting-your-lab",
    "title": "Lab 5: Where‚Äôs zero?",
    "section": "Submitting your lab",
    "text": "Submitting your lab\nTo submit your assignment, simply commit and push your completed lab-x.qmd to your GitHub repo. Your most recent commit 48 hours after the assignment deadline will be graded, and any applicable late penalty will be applied (see the syllabus). For this reason, do not push commits after you are satisfied with your work, or a late penalty will be applied."
  },
  {
    "objectID": "labs/lab4.html#exercise",
    "href": "labs/lab4.html#exercise",
    "title": "Lab 4: wrangling the written word",
    "section": "Exercise",
    "text": "Exercise\n\nGoal\nThe goal of this exercise is to build a data set for use in a future lab. The ultimate goal is to build an algorithm to classify which ‚Äúclass‚Äù each document belongs to.\n\n\nData\nDownload the data for this lab by pasting the code below into the console:\n\ndownload.file(\"sta323-sp23.github.io/data/newsgroups_5.zip\", \n              destfile = \"ng_5.zip\")\n\nunzip(\"ng_5.zip\", exdir = \".\")\n\nThere are 4989 documents. Each document is an email from one of 5 email listservs (news groups), that, as far as I can tell, were all hosted at Carnegie Mellon University in the early 90s. The original data set (with a total of 20 news groups) can be found here. This data set is a popular choice for experiments in text classification and clustering. Please note the following warning: similar to many modern forums on the internet, the emails in this data set may contain profanity and offensive language. I do not condone, endorse nor promote any language, views or content expressed within this data set.\nThe five document classes (newsgroups) are as follows:\n\ncomp.graphics\ncomp.sys.mac.hardware\nrec.autos\nrec.sport.baseball\nsci.space\n\n\n\nTask\nWe will comb through 4989 documents and construct a single data frame from these documents for use in a future lab. Our goal is to create a data frame that looks like the following:\n\n\n\n\n\nwhere the column Document contains the documents name or #, Newsgroup contains the category the document belongs to, total_words contains the total words in the document, word_1, word_2 up to word_v contains every word in every document and the values represent the number of occurrences of each given word in the document.\nTo make this task more manageable, let‚Äôs break this into smaller tasks below:\n\npart 1\nRead in the data from the file 37916 with readLines, e.g.¬†x = readLines(\"pathToFile/37916\"). Write a regular expression to identify the ‚ÄúNewsgroup‚Äù from the text. Save the result as an object called newsgroup_id. Print newsgroup_id to the screen.\n\n\n\n\n\n\nHint\n\n\n\nSome documents (emails) are featured in multiple newsgroups, separated by a comma ,. You should return a character vector of the newsgroups and can handle this like below:\n\n\"rec.autos,rec.autos.tech\" %>%\n  str_split(\",\") %>% \n  unlist()\n\n[1] \"rec.autos\"      \"rec.autos.tech\"\n\n\n\n\n\n\npart 2\nIdentify which part of the document is the body of the email. Write a regular expression to extract each word (alphanumeric) from the body of the email. Save a character vector of words in the email as an object called words_in_email. Print the first 10 words_in_email to the screen. The first three should be\n\"I\" \"recently\" \"got\"\n\n\n\n\n\n\nHint\n\n\n\n\nFind which entry has ‚ÄúLines:‚Äù\nSubset the document x to only be what occurs after this entry.\nExtract each word followed by a break.\n\n\n\n\n\npart 3\nSave your result from part 1 and 2 into a list like so:\n\ni = 37916\n\ndoc_i = list(\n  \"doc_id\" = paste(\"doc\", i, sep = \"_\"),\n  \"Newsgroup\" = newsgroup_id,\n  \"words\" = words_in_email\n)\n\nand then write a for loop, using the template code below as a starting point to make a list of lists for each document.\n\nall_docs = list.files(\"/data/newsgroups_5\")\n  \ndoc_words = list()\n# begin for loop over i in all_docs \n\n  # read in doc i\n  # create newsgroup_id\n  # create words_in_email\n  # put both together in a list called doc_i\n\n  doc_words[[paste(\"doc\", i, sep = \"_\")]] = doc_i\n  \n# end for loop\n\nPrint the first three lists inside of doc_words using the code below:\n\ndoc_words[1:3] %>% \n  str()\n\n\n\n\n\n\n\nHint\n\n\n\nUse paste or paste0 to concatenate the filepath and filenames as you read them in.\n\n\n\n\npart 4\nUsing the appropriate lookup functions from purrr (see lecture on functional programming) turn your list of lists doc_words into a tibble called doc_words_df that looks like the data frame pictured below. While building your data frame, remove all documents for which there are multiple newsgroups.\n  Document   Newsgroup          total_words words      \n  <chr>      <chr>                    <int> <list>     \n1 doc_100521 rec.sport.baseball         261 <chr [261]>\n2 doc_101551 rec.autos                  439 <chr [439]>\n3 doc_101552 rec.autos                  147 <chr [147]>\n\nPrint the first 10 rows to the screen and glimpse your resulting data frame. There should be 3924 rows and 4 columns.\n\nFinally, print a count of how many observations of each Newsgroup is in the data set.\n\n\n\n\n\n\n\nWarning\n\n\n\nDo not unnest the words column. This operation is too expensive to play with and may freeze your container/computer."
  },
  {
    "objectID": "slides/lec09.html#ranges",
    "href": "slides/lec09.html#ranges",
    "title": "Regular expressions",
    "section": "Ranges",
    "text": "Ranges\n- can be used to interpolate between first and last and grab consecutive values. Example: [A-Z] matches any capital letters from ‚ÄúA‚Äù to ‚ÄúZ‚Äù. [1-4] matches any integer digit from 1 to 4.\nTo match an alphabetical character (upper or lower case ‚ÄúA-Z‚Äù or ‚Äúa-z‚Äù) but not numbers, you can use the regular expression ([A-Z]|[a-z])\nTo match everything but capital ‚ÄúF‚Äù through ‚ÄúN‚Äù, you can use the regular expression [^F-N]"
  },
  {
    "objectID": "slides/lec09.html#escapism",
    "href": "slides/lec09.html#escapism",
    "title": "Regular expressions",
    "section": "Escapism",
    "text": "Escapism\nWhen to escape?\n. ^ $ * + ? { } [ ] \\ | ( )\nAre all special and perform as described on the previous slides by default. Therefore, these special characters must be escaped to match directly. You need to use two levels of escape to escape a special character. Example:\n\ntxt = \"To be, [or] not to be that is the question.\"\n\n\nstr_detect(txt, \"[\")\n\nError in stri_detect_regex(string, pattern, negate = negate, opts_regex = opts(pattern)): Missing closing bracket on a bracket expression. (U_REGEX_MISSING_CLOSE_BRACKET, context=`[`)\n\n\n\nstr_detect(txt, \"\\[\")\n\nError: '\\[' is an unrecognized escape in character string starting \"\"\\[\"\n\n\n\nstr_detect(txt, \"\\\\[\")\n\n[1] TRUE"
  },
  {
    "objectID": "slides/lec09.html#there-is-no-escaping-escapes",
    "href": "slides/lec09.html#there-is-no-escaping-escapes",
    "title": "Regular expressions",
    "section": "There is no escaping escapes",
    "text": "There is no escaping escapes\nIn order to access the presumed functionality of character classes, you need to use a double escape as well. Example:\n\ntxt = c(\"A1\", \"B2\", \"CC\", \"DD\", \"EE2\")\n\n\nWhich strings end with a digit?\n\n\nstr_detect(txt, \"\\d$\")\n\nError: '\\d' is an unrecognized escape in character string starting \"\"\\d\"\n\n\n\nstr_detect(txt, \"\\\\d$\")\n\n[1]  TRUE  TRUE FALSE FALSE  TRUE\n\n\n\nWhich strings contain 3 alphanumeric characters?\n\n\nstr_detect(txt, \"\\\\w{3}\")\n\n[1] FALSE FALSE FALSE FALSE  TRUE\n\n\n\n\n\n\n\n\n\ntl;dr\n\n\nto match a symbol or character class, use double escapes"
  },
  {
    "objectID": "slides/lec09.html#examples-2",
    "href": "slides/lec09.html#examples-2",
    "title": "Regular expressions",
    "section": "Examples",
    "text": "Examples\nLuffy's phone number is 123 456 7890\nZoro doesn't have a phone number\nNami's number is 012-345-6789\nUsopp's number is (919)000 0000\nSanji's telephone number is (919) 123 4567\n0000000000 is Robin's number.\nChopper doesn't have a phone number, but his lucky number is 1.\nregex extraction\nTest these regular expressions with $ grep -o \"insert regex\" pirate-phone.txt.\n\nregexoutputprinciples\n\n\n\"(\\d\\{3\\})\\.*\\d\\{3\\}\\s\\d\\{4\\}\"\n\n\n(919)000 0000\n\n\nmatching (xxx)xxx xxxx using character classes (\\d for digit, \\s for whitespace) and repeaters\n\n\n\n\nregexoutputprinciples\n\n\n\"(\\d\\{3\\}).\\?\\d\\{3\\}\\s[0-9]\\{4\\}\"\n\n\n(919)000 0000\n(919) 123 4567\n\n\nmatching (xxx)*xxx xxxx using character classes, wildcard (.) and optional chracter (?)\n\n\n\n\nregexoutputprinciples\n\n\n\"(\\?\\d\\{3\\})\\?.\\?\\d\\{3\\}.\\?[0-9]\\{4\\}\"\n\n\n123 456 7890\n012-345-6789\n(919)000 0000\n(919) 123 4567\n0000000000\n\n\nMultiple optional matching"
  },
  {
    "objectID": "slides/lec09.html#definition-and-utility",
    "href": "slides/lec09.html#definition-and-utility",
    "title": "Regular expressions",
    "section": "Definition and utility",
    "text": "Definition and utility\nA regular expression (aka regex or regexp) is a custom defined string matching pattern. A regular expression lets you:\n\nextract only the phone number from this string: ‚ÄúMy phone number is (123) 456-7890, not to be confused with my birth month which is 0‚Äù\nsearch and replace multiple spellings of the word gray (grey, 6R3Y) in a document simultaneously\nsearch through all files in a directory for the one that contains a specific string\nfind the specific line number from a file that contains a string\nfind and replace through multiple files simultaneously\n\nAnd much, much more!"
  },
  {
    "objectID": "slides/lec09.html#quick-example",
    "href": "slides/lec09.html#quick-example",
    "title": "Regular expressions",
    "section": "Quick example",
    "text": "Quick example\ngrep and grepl are base R functions that return the index of a match and the logical value of a match respectively.\n\ntext = c(\"Wealth, fame, power. Gold Roger, the King of the Pirates, attained\",\n         \"everything this world has to offer.\")\ntext\n\n[1] \"Wealth, fame, power. Gold Roger, the King of the Pirates, attained\"\n[2] \"everything this world has to offer.\"                               \n\n\n\ngrep(\"Pirate\", text)\n\n[1] 1\n\ngrepl(\"Pirate\", text)\n\n[1]  TRUE FALSE\n\n\n\nregular expressions are case-sensitive\n\ngrep(\"pirate\", text)\n\ninteger(0)\n\ngrepl(\"pirate\", text)\n\n[1] FALSE FALSE"
  },
  {
    "objectID": "slides/lec09.html#stringr-1",
    "href": "slides/lec09.html#stringr-1",
    "title": "Regular expressions",
    "section": "stringr",
    "text": "stringr\n\n\n\nstringr hosts a convenient set of tools to manipulate strings and extract regular expressions. All functions begin with the prefix str.\nThe best summary of stringr functions is on this cheatsheet\nNotice below that the string comes first in these functions (in contrast with grep/sub)\nExample\n\ntxt = c(\"Luffy: 'I'm going to be king of the pirates! !'\", \n        \"The straw hat crew set sail.\", \n        \"Nami: 'I'm Going to be the world's greatest navigator!'\")\n\n\nstr_detect()str_extract()str_replace\n\n\n\nlike grepl\n\n\nstr_detect(txt, \":\")\n\n[1]  TRUE FALSE  TRUE\n\n\n\n\n\nstr_extract(txt, \"\\\\s[A-Z\\\\|a-z]*ng\") # first instance\n\n[1] \" going\" NA       \" Going\"\n\nstr_extract_all(txt, \"\\\\s[A-Z\\\\|a-z]*ng\") %>% str()\n\nList of 3\n $ : chr [1:2] \" going\" \" king\"\n $ : chr(0) \n $ : chr \" Going\"\n\n\n\n\n\nstr_replace(txt, \"Nami\", \"Zoro\") %>%\n  str_replace(\"navigator\", \"swordsman\")\n\n[1] \"Luffy: 'I'm going to be king of the pirates! !'\"        \n[2] \"The straw hat crew set sail.\"                           \n[3] \"Zoro: 'I'm Going to be the world's greatest swordsman!'\""
  },
  {
    "objectID": "slides/lec09.html#introducing-stringr",
    "href": "slides/lec09.html#introducing-stringr",
    "title": "Regular expressions",
    "section": "introducing stringr",
    "text": "introducing stringr\n\n\n\nstringr hosts a convenient set of tools to manipulate strings and extract regular expressions. All functions begin with the prefix str.\nThe best summary of stringr functions is on this cheatsheet\nNotice below that the string comes first in these functions (in contrast with grep)\nExample\n\ntxt = c(\"Luffy: 'I'm going to be king of the pirates! !'\", \n        \"The straw hat crew set sail.\", \n        \"Nami: 'I'm Going to be the world's greatest navigator!'\")\n\n\nstr_detect()str_extract()str_replace\n\n\n\nlike grepl\n\n\nstr_detect(txt, \":\")\n\n[1]  TRUE FALSE  TRUE\n\n\n\n\n\nreturn the match\n\n\nstr_extract(txt, \"\\\\s([A-Z]|[a-z])*ng\") # first instance\n\n[1] \" going\" NA       \" Going\"\n\nstr_extract_all(txt, \"\\\\s([A-Z]|[a-z])*ng\") %>% str()\n\nList of 3\n $ : chr [1:2] \" going\" \" king\"\n $ : chr(0) \n $ : chr \" Going\"\n\n\n\n\n\nstr_replace(txt, \"Nami\", \"Zoro\") %>%\n  str_replace(\"navigator\", \"swordsman\")\n\n[1] \"Luffy: 'I'm going to be king of the pirates! !'\"        \n[2] \"The straw hat crew set sail.\"                           \n[3] \"Zoro: 'I'm Going to be the world's greatest swordsman!'\""
  },
  {
    "objectID": "slides/lec09.html#there-is-no-escaping-escaping",
    "href": "slides/lec09.html#there-is-no-escaping-escaping",
    "title": "Regular expressions",
    "section": "There is no escaping \\escaping",
    "text": "There is no escaping \\escaping\nIn order to access the presumed functionality of character classes, you need to use a double escape as well. Example:\n\ntxt = c(\"A1\", \"B2\", \"CC\", \"DD\", \"EE2\")\n\n\nWhich strings end with a digit?\n\n\nstr_detect(txt, \"\\d$\")\n\nError: '\\d' is an unrecognized escape in character string starting \"\"\\d\"\n\n\n\nstr_detect(txt, \"\\\\d$\")\n\n[1]  TRUE  TRUE FALSE FALSE  TRUE\n\n\n\nWhich strings contain 3 alphanumeric characters?\n\n\nstr_detect(txt, \"\\\\w{3}\")\n\n[1] FALSE FALSE FALSE FALSE  TRUE\n\n\n\n\n\n\n\n\n\ntl;dr\n\n\nto match a symbol or character class, use double escapes"
  },
  {
    "objectID": "slides/lec09.html#escape-classes",
    "href": "slides/lec09.html#escape-classes",
    "title": "Regular expressions",
    "section": "Escape classes",
    "text": "Escape classes\nIn order to access the presumed functionality of character classes, you need to use a double escape as well. Example:\n\ntxt = c(\"A1\", \"B2\", \"CC\", \"DD\", \"EE2\")\n\n\nWhich strings end with a digit?\n\n\nstr_detect(txt, \"\\d$\")\n\nError: '\\d' is an unrecognized escape in character string starting \"\"\\d\"\n\n\n\nstr_detect(txt, \"\\\\d$\")\n\n[1]  TRUE  TRUE FALSE FALSE  TRUE\n\n\n\nWhich strings contain 3 alphanumeric characters?\n\n\nstr_detect(txt, \"\\\\w{3}\")\n\n[1] FALSE FALSE FALSE FALSE  TRUE\n\n\n\n\n\n\n\n\n\ntl;dr\n\n\nto match a symbol or character class, use double escapes"
  },
  {
    "objectID": "slides/lec09.html#greedy-vs-ungreedy-matching",
    "href": "slides/lec09.html#greedy-vs-ungreedy-matching",
    "title": "Regular expressions",
    "section": "Greedy vs ungreedy matching",
    "text": "Greedy vs ungreedy matching\nWhat went wrong here?\n\ntext = \"<div class='main'> <div> <a href='here.pdf'>Here!</a> </div> </div>\"\n\n\nstr_extract(text, \"<div>.*</div>\")\n\n[1] \"<div> <a href='here.pdf'>Here!</a> </div> </div>\"\n\n\n\nIf you add ? after a repeater, the matching will be non-greedy (find the shortest possible match, not the longest).\n\nstr_extract(text, \"<div>.*?</div>\")\n\n[1] \"<div> <a href='here.pdf'>Here!</a> </div>\""
  },
  {
    "objectID": "quizzes/quiz04.html",
    "href": "quizzes/quiz04.html",
    "title": "Quiz 4",
    "section": "",
    "text": "Exercise 1 (2pts)\ntrue or false: Newton‚Äôs method, \\(x_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)}\\), iterates to find extrema of function \\(f\\).\n\n\nExercise 2 (2pts)\ntrue or false: Newton‚Äôs method always converges to the same point, regardless of starting position \\(x_0\\).\n\n\n\n04:00"
  },
  {
    "objectID": "exams/exam01.html",
    "href": "exams/exam01.html",
    "title": "Exam 01 Instructions",
    "section": "",
    "text": "Important\n\n\n\nThe exam is due 5:00PM Tuesday February 21st"
  },
  {
    "objectID": "exams/exam01.html#rules",
    "href": "exams/exam01.html#rules",
    "title": "Exam 01 Instructions",
    "section": "Rules",
    "text": "Rules\n\nThis is an individual assignment.\nYou may not collaborate or communicate anything about this exam to anyone except the instructor. For example, you may not communicate with other students or post/solicit help on the internet, email or via any other method of communication.\nYou may use R, as well as any notes, books, or existing internet resources to answer exam questions. If you use a resource outside of those we used for class, you should cite it by providing the URL in your rendered PDF and a brief explanation of what the code does.\nYou must cite any code you use as inspiration. A failure to cite is plagiarism. Cite any sources by providing a link to the original source in your exam write-up.\nIf you have questions email the instructor or, preferably, message in slack. Questions should only be about understanding the data or the exam‚Äôs instructions. You may not ask questions on any topics from past assignments or material related to the exam.\nThe instructor will NOT provide code debugging on exam problems. If you are unable to debug yourself, you should comment out code, insert #| eval: false etc. as necessary to get your final html to render and receive partial credit. Note: ask questions early. Questions asked the day the exam is due may not be answered.\n\nWith the exception of major emergencies, late submissions will not be accepted. In the case of a major emergency, you should have your Dean send the instructor an excuse. Start and submit the exam early in order to avoid any last-minute technical issues."
  },
  {
    "objectID": "exams/exam01.html#render-frequently",
    "href": "exams/exam01.html#render-frequently",
    "title": "Exam 01 Instructions",
    "section": "Render frequently",
    "text": "Render frequently\nCommit and push to GitHub frequently. At least after every exercise.\nIn the event that you run into last minute technical difficulties, whatever is in your GitHub repo at the deadline is what will be graded."
  },
  {
    "objectID": "exams/exam01.html#academic-integrity",
    "href": "exams/exam01.html#academic-integrity",
    "title": "Exam 01 Instructions",
    "section": "Academic Integrity",
    "text": "Academic Integrity\nBy taking this exam, you pledge to uphold the Duke Community Standard:\n\nI will not lie, cheat, or steal in my academic endeavors;\nI will conduct myself honorably in all my endeavors; and\nI will act if the Standard is compromised."
  },
  {
    "objectID": "slides/lec11.html#overview",
    "href": "slides/lec11.html#overview",
    "title": "Intro to optimization",
    "section": "Overview",
    "text": "Overview\nTo to develop a statistical model means to propose a mechanism by which data are generated.\nFor example, a company wants to gain understanding of how different age demographics interact with their product. The company releases a survey that contains the following prompt:\nSelect your age category:\n\n1. <18\n2. 18-24\n3. 25-35\n4. 36-49\n5. 50-64\n6. 65+ \nThere are six possible selections.\nImagine each survey subject rolls a six-sided die and then answers with the category the die lands. This is an example of a data-generative model: a proposed mechanism by which the data is generated."
  },
  {
    "objectID": "slides/lec11.html#parametric-distributions",
    "href": "slides/lec11.html#parametric-distributions",
    "title": "Intro to optimization",
    "section": "Parametric distributions",
    "text": "Parametric distributions"
  },
  {
    "objectID": "slides/lec11.html#deterministic-and-stochastic-components",
    "href": "slides/lec11.html#deterministic-and-stochastic-components",
    "title": "Intro to optimization",
    "section": "Deterministic and stochastic components",
    "text": "Deterministic and stochastic components"
  },
  {
    "objectID": "slides/lec11.html#structure-of-the-data",
    "href": "slides/lec11.html#structure-of-the-data",
    "title": "Intro to optimization",
    "section": "Structure of the data",
    "text": "Structure of the data"
  },
  {
    "objectID": "slides/lec11.html#regression",
    "href": "slides/lec11.html#regression",
    "title": "Intro to optimization",
    "section": "Regression",
    "text": "Regression"
  },
  {
    "objectID": "slides/lec11.html#least-squares",
    "href": "slides/lec11.html#least-squares",
    "title": "Intro to optimization",
    "section": "Least squares",
    "text": "Least squares\nIn ordinary least squares regression, the goal is to minimize the sum of squared residuals.\n\\[\n\\text{argmin} \\beta\n\\]\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec10.html#measuring-efficiency",
    "href": "slides/lec10.html#measuring-efficiency",
    "title": "Complexity and parallelization",
    "section": "Measuring efficiency",
    "text": "Measuring efficiency\nflops or floating point operations measure the efficiency of an algorithm. flops consist of the binary floating point operations: addition, subtraction, multiplication, division and comparison. Individual floating point operations are performed by a single ‚Äúcore‚Äù of your computer‚Äôs CPU or GPU.\nWe use ‚Äúbig O‚Äù \\(\\mathcal{O}(n)\\) notation to denote the complexity of an algorithm. For example,\n\nmatrix-vector multiplication A %*% b, where \\(A\\) is \\(m \\times n\\) and \\(b\\) is \\(n \\times 1\\) takes \\(2mn\\) or \\(\\mathcal{O}(mn)\\) flops.\nmatrix-matrix multiplication A %*% B, where \\(A\\) is \\(m \\times n\\) and \\(B\\) is \\(n \\times p\\) takes \\(2mnp\\) or \\(\\mathcal{O}(mnp)\\) flops.\n\nNotice that in reporting complexity of each example we drop the leading constant ‚Äú2‚Äù.\nA hierarchy of computational complexity (let \\(n\\) be the problem size):\n\n\n\n\n\nexponential order: \\(\\mathcal{O}(b^n)\\)\nNP-hard (horrible)\n\n\npolynomial order: \\(\\mathcal{O}(n^q)\\)\ndoable\n\n\n\\(\\mathcal{O}(n \\log n)\\)\nfast\n\n\nlinear order: \\(\\mathcal{O}(n)\\)\nfast\n\n\nlog order: \\(\\mathcal{O}(\\log n)\\)\nsuper fast\n\n\n\n\n\n\n\n\n\nNote\n\n\nSome references count multiplication followed by an addition (fused multiply-add, FMA) as one flop.\n\n\n\n{This slide adapted from notes by Dr.¬†Hua Zhou}"
  },
  {
    "objectID": "slides/lec10.html#measuring-efficiency-example",
    "href": "slides/lec10.html#measuring-efficiency-example",
    "title": "Complexity and parallelization",
    "section": "Measuring efficiency (example)",
    "text": "Measuring efficiency (example)\nSuppose you wish to calculate a likelihood \\(L(x|\\theta)\\) for \\(n\\) iid observations: \\(x = \\{x_i\\}; i \\in \\{1, \\ldots, n \\}\\). The likelihood looks like\n\\[\nL(x|\\theta) = \\prod_i^n f(x_i | \\theta)\n\\] where \\(f\\) is some density function dependent on parameters \\(\\theta\\).\n\\(L(x|\\theta)\\) has \\(\\mathcal{O}(n)\\) complexity, i.e.¬†scales linearly with the number of data points."
  },
  {
    "objectID": "slides/lec10.html#evaluation-matters",
    "href": "slides/lec10.html#evaluation-matters",
    "title": "Complexity, profiling, parallelization",
    "section": "Evaluation matters",
    "text": "Evaluation matters\nThe form of a mathematical expression and the way the expression should be evaluated in actual practice may be quite different.\nFor example, compare flops of the two mathematically equivalent expressions:\n\nA %*% B %*% x\nA %*% (B %*% x)\n\nwhere A and B are matrices and x is a vector. Which method is faster?\n\n\nN = 1300\nset.seed(1)\nA = matrix(rnorm(N ^ 2), nrow= N)\nB = matrix(rnorm(N ^ 2), nrow = N)\nx = matrix(rnorm(N ^ 2), nrow = N)\n\nbench::mark(\n{C = A %*% B %*% x},\n{A %*% (B %*% x)}\n)\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec10.html#bench",
    "href": "slides/lec10.html#bench",
    "title": "Complexity and parallelization",
    "section": "bench",
    "text": "bench\n\n\n\n\nd = tibble(\n  x = runif(10000),\n  y=runif(10000)\n)\n(b = bench::mark(\n  d[d$x > 0.5, ],\n  d[which(d$x > 0.5), ],\n  subset(d, x > 0.5),\n  filter(d, x > 0.5)\n))\n\n# A tibble: 4 √ó 6\n  expression                 min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>            <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 d[d$x > 0.5, ]        102.92¬µs 116.71¬µs     7998.  252.16KB     21.7\n2 d[which(d$x > 0.5), ]  88.08¬µs     99¬µs     9353.   271.9KB     51.1\n3 subset(d, x > 0.5)    145.17¬µs 160.38¬µs     5938.   288.2KB     35.0\n4 filter(d, x > 0.5)      2.05ms   2.15ms      454.    2.01MB     12.7"
  },
  {
    "objectID": "slides/lec10.html#bench---relative-results",
    "href": "slides/lec10.html#bench---relative-results",
    "title": "Complexity and parallelization",
    "section": "bench - relative results",
    "text": "bench - relative results\n\nsummary(b, relative = TRUE)\n\n# A tibble: 4 √ó 6\n  expression              min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>            <dbl>  <dbl>     <dbl>     <dbl>    <dbl>\n1 d[d$x > 0.5, ]         1.17   1.18      17.6      1        1.71\n2 d[which(d$x > 0.5), ]  1      1         20.6      1.08     4.03\n3 subset(d, x > 0.5)     1.65   1.62      13.1      1.14     2.76\n4 filter(d, x > 0.5)    23.2   21.7        1        8.17     1"
  },
  {
    "objectID": "slides/lec10.html#parallel-base-r",
    "href": "slides/lec10.html#parallel-base-r",
    "title": "Complexity, profiling, parallelization",
    "section": "parallel (base R)",
    "text": "parallel (base R)\n\ntools for the forking of R processes (some functions do not work on Windows)\nCore functions:\n\ndetectCores\npvec\nmclapply\nmcparallel & mccollect"
  },
  {
    "objectID": "slides/lec10.html#parallel",
    "href": "slides/lec10.html#parallel",
    "title": "Complexity, profiling, parallelization",
    "section": "parallel",
    "text": "parallel\n\nbase R package\ntools for the forking of R processes (some functions do not work on Windows)\nCore functions:\n\ndetectCores\npvec\nmclapply\nmcparallel & mccollect"
  },
  {
    "objectID": "slides/lec10.html#pvec",
    "href": "slides/lec10.html#pvec",
    "title": "Complexity and parallelization",
    "section": "pvec",
    "text": "pvec\nParallelization of a vectorized function call. Forking takes time.\n\nlibrary(parallel)\nsystem.time(pvec(1:1e7, sqrt, mc.cores = 1))\n\n## user  system elapsed \n## 0.031   0.032   0.063 \n\nsystem.time(pvec(1:1e7, sqrt, mc.cores = 4))\n\n## user  system elapsed \n## 0.249   0.197   0.323 \n\nsystem.time(pvec(1:1e7, sqrt, mc.cores = 8))\n\n## user  system elapsed \n## 0.156   0.225   0.204 \n\n\n?proc.time for info\nUser CPU time: the CPU time spent by the current process, in our case, the R session\nSystem CPU time: the CPU time spent by the OS on behalf of the current running process\n\nNote that the wall time may be the less than the sum total (user + system) since parallelized processes accumulate user/system time at the same time."
  },
  {
    "objectID": "slides/lec10.html#pvec---benchsystem_time",
    "href": "slides/lec10.html#pvec---benchsystem_time",
    "title": "Complexity and parallelization",
    "section": "pvec - bench::system_time",
    "text": "pvec - bench::system_time\n\nlibrary(bench)\nsystem_time(pvec(1:1e7, sqrt, mc.cores = 1))\n\n## process    real \n## 83.5ms  83.2ms \n\nsystem_time(pvec(1:1e7, sqrt, mc.cores = 4))\n\n## process    real \n## 266ms   312ms \n\nsystem_time(pvec(1:1e7, sqrt, mc.cores = 8))\n\n## process    real \n## 249ms   262ms"
  },
  {
    "objectID": "slides/lec10.html#mclapply",
    "href": "slides/lec10.html#mclapply",
    "title": "Complexity and parallelization",
    "section": "mclapply",
    "text": "mclapply\n\nParallelized lapply\n\n\nsystem.time(rnorm(1e6))\n\n## user  system elapsed \n## 0.047   0.004   0.051 \n\nsystem.time(unlist(mclapply(1:10, function(x) rnorm(1e5), mc.cores = 2)))\n\n## user  system elapsed \n## 0.055   0.032   0.049 \n\nsystem.time(unlist(mclapply(1:10, function(x) rnorm(1e5), mc.cores = 4)))\n\n## user  system elapsed \n## 0.058   0.039   0.036"
  },
  {
    "objectID": "slides/lec10.html#mclapply-1",
    "href": "slides/lec10.html#mclapply-1",
    "title": "Complexity and parallelization",
    "section": "mclapply",
    "text": "mclapply\n\nsystem.time(unlist(mclapply(1:10, function(x) rnorm(1e5), mc.cores = 8)))\n\n## user  system elapsed \n## 0.064   0.068   0.039 \n\nsystem.time(unlist(mclapply(1:10, function(x) rnorm(1e5), mc.cores = 10)))\n\n## user  system elapsed \n## 0.068   0.084   0.046 \n\nsystem.time(unlist(mclapply(1:10, function(x) rnorm(1e5), mc.cores = 12)))\n\n## user  system elapsed \n## 0.067   0.078   0.045"
  },
  {
    "objectID": "slides/lec10.html#what-is-parallelization",
    "href": "slides/lec10.html#what-is-parallelization",
    "title": "Complexity and parallelization",
    "section": "What is parallelization?",
    "text": "What is parallelization?\n\n‚Äúparallelization‚Äù or ‚Äúparallel computing‚Äù means deploying an algorithm‚Äôs calculations across several cores of a computer to perform computation at the same time\n\nTerminology\n\nCPU: central processing unit, primary component of a computer that processes instructions\nCore: an individual processor within a CPU, more cores can improve performance and efficiency\nForking: a copy of the current R session is moved to new cores.\n\nNot available on Windows\nLess overhead and easy to implement\n\nSockets: a new R session is launched on each core.\n\nAvailable on all systems\nEach process on each core is unique"
  },
  {
    "objectID": "slides/lec10.html#package-parallel",
    "href": "slides/lec10.html#package-parallel",
    "title": "Complexity and parallelization",
    "section": "Package parallel",
    "text": "Package parallel\n\nbase R package\ntools for the forking of R processes (some functions do not work on Windows)\nCore functions:\n\ndetectCores\npvec\nmclapply\nmcparallel & mccollect"
  },
  {
    "objectID": "slides/lec10.html#mcparallel",
    "href": "slides/lec10.html#mcparallel",
    "title": "Complexity and parallelization",
    "section": "mcparallel",
    "text": "mcparallel\nAsynchronously evaluation of an R expression in a separate process\n\nm = mcparallel(rnorm(1e6))\nn = mcparallel(rbeta(1e6,1,1))\no = mcparallel(rgamma(1e6,1,1))\n\nstr(m)\n\nList of 2\n $ pid: int 12106\n $ fd : int [1:2] 4 7\n - attr(*, \"class\")= chr [1:3] \"parallelJob\" \"childProcess\" \"process\"\n\nstr(n)\n\nList of 2\n $ pid: int 12107\n $ fd : int [1:2] 5 9\n - attr(*, \"class\")= chr [1:3] \"parallelJob\" \"childProcess\" \"process\""
  },
  {
    "objectID": "slides/lec10.html#mccollect",
    "href": "slides/lec10.html#mccollect",
    "title": "Complexity and parallelization",
    "section": "mccollect",
    "text": "mccollect\nChecks mcparallel objects for completion\n\nstr(mccollect(list(m,n,o)))\n\nList of 3\n $ 12106: num [1:1000000] 1.62 0.904 -1.865 -2.384 -0.16 ...\n $ 12107: num [1:1000000] 0.224 0.241 0.733 0.532 0.129 ...\n $ 12108: num [1:1000000] 0.2199 0.0562 0.3705 0.998 6.7013 ...\n\n\n\nmccollect - waiting\n\np = mcparallel(mean(rnorm(1e5)))\nmccollect(p, wait = FALSE, 10) # will retrieve the result (since it's fast)\n\n$`12109`\n[1] 0.001003654\n\nmccollect(p, wait = FALSE) # will signal the job as terminating\n\nWarning in selectChildren(jobs, timeout): cannot wait for child 12109 as it does\nnot exist\n\n\nNULL"
  },
  {
    "objectID": "slides/lec10.html#domc-foreach-1",
    "href": "slides/lec10.html#domc-foreach-1",
    "title": "Complexity and parallelization",
    "section": "doMC & foreach",
    "text": "doMC & foreach\nPackages by Revolution Analytics that provides the foreach function which is a parallelizable for loop.\nPackage doMC is a parallel backend for the foreach package - a package that allows you to execute for loops in parallel.\n\nlibrary(doMC)\n\nLoading required package: foreach\n\n\n\nAttaching package: 'foreach'\n\n\nThe following objects are masked from 'package:purrr':\n\n    accumulate, when\n\n\nLoading required package: iterators\n\n\nCore functions:\n\ndoMC::registerDoMC sets the number of cores for the parallel backend to be used with foreach\nforeach, %dopar%, %do%\n\ndoMC serves as an interface between foreach and parallel Since parallel only works with systems that support forking, these functions will not work properly on Windows."
  },
  {
    "objectID": "slides/lec10.html#set-workers",
    "href": "slides/lec10.html#set-workers",
    "title": "Complexity and parallelization",
    "section": "Set workers",
    "text": "Set workers\nTo get started, set the number of cores with registerDoMC().\n\n# check cores set up\ngetDoParWorkers()\n\n[1] 1\n\n# set 4 cores\nregisterDoMC(4)\ngetDoParWorkers()\n\n[1] 4"
  },
  {
    "objectID": "slides/lec10.html#serial-and-parallel-with-foreach",
    "href": "slides/lec10.html#serial-and-parallel-with-foreach",
    "title": "Complexity and parallelization",
    "section": "Serial and parallel with foreach()",
    "text": "Serial and parallel with foreach()\n\n\nSequential\n\n%do% single execution\n\n\nforeach(i = 1:4) %do% \n  sort(runif(n = 1e7, max = i))[1]\n\n[[1]]\n[1] 1.653098e-08\n\n[[2]]\n[1] 1.634471e-07\n\n[[3]]\n[1] 2.214219e-07\n\n[[4]]\n[1] 2.998859e-07\n\ntimes(2) %do%\n  sort(runif(n = 1e7))[1]\n\n[1] 1.515727e-07 8.847564e-09\n\n\n\nParallel\n\n%dopar% multicore execution\n\n\nforeach(i = 1:4) %dopar%\n  sort(runif(n = 1e7, max = i))[1]\n\n[[1]]\n[1] 1.001172e-08\n\n[[2]]\n[1] 1.653098e-07\n\n[[3]]\n[1] 5.587935e-09\n\n[[4]]\n[1] 1.529232e-06\n\ntimes(2) %dopar%\n  sort(runif(n = 1e7))[1]\n\n[1] 2.444722e-08 1.024455e-08"
  },
  {
    "objectID": "slides/lec10.html#time-comparison",
    "href": "slides/lec10.html#time-comparison",
    "title": "Complexity and parallelization",
    "section": "Time comparison",
    "text": "Time comparison\n\n\nSequential\n\nsystem.time({\nforeach(i = 1:4) %do% \n  sort(runif(n = 1e7, max = i))[1]\n\ntimes(2) %do%\n  sort(runif(n = 1e7))[1]\n})\n\n##  user  system elapsed \n## 3.371   0.143   3.507 \n\n\nParallel\n\nsystem.time({\nforeach(i = 1:4) %dopar% \n  sort(runif(n = 1e7, max = i))[1]\n\ntimes(2) %dopar%\n  sort(runif(n = 1e7))[1]\n})\n\n##  user  system elapsed \n## 2.917   0.603   1.376"
  },
  {
    "objectID": "slides/lec10.html#things-to-know-about-foreach",
    "href": "slides/lec10.html#things-to-know-about-foreach",
    "title": "Complexity and parallelization",
    "section": "Things to know about foreach",
    "text": "Things to know about foreach\nforeach can iterate across more than one value, but it doesn‚Äôt do length coercion.\n\n\nNote: foreach is iterating over both simultaneously. This is not a nested for loop.\n\nforeach(i = 1:3, j = 1:3) %do% {\n  sqrt(i^2+j^2)   \n}\n\n[[1]]\n[1] 1.414214\n\n[[2]]\n[1] 2.828427\n\n[[3]]\n[1] 4.242641\n\n\n\nNote: foreach coerces the longer vector to be shorter!\n\nforeach(i = 1:5, j = 1:2) %do% {\n  sqrt(i^2+j^2)   \n}\n\n[[1]]\n[1] 1.414214\n\n[[2]]\n[1] 2.828427"
  },
  {
    "objectID": "slides/lec10.html#foreach-bookkeeping",
    "href": "slides/lec10.html#foreach-bookkeeping",
    "title": "Complexity and parallelization",
    "section": "foreach bookkeeping",
    "text": "foreach bookkeeping\n\nforeach does some bookkeeping for you and returns a list by default. Compare this to the traditional for loop that does no bookkeeping.\nyou can easily customize the bookkeeping.\n\n\nforeach(i = 1:5, .combine='c') %do% {\n  sqrt(i)\n}\n\n[1] 1.000000 1.414214 1.732051 2.000000 2.236068\n\nforeach(i = 1:5, .combine='cbind') %do% {\n  sqrt(i)\n}\n\n     result.1 result.2 result.3 result.4 result.5\n[1,]        1 1.414214 1.732051        2 2.236068\n\nforeach(i = 1:5, .combine='+') %do% {\n  sqrt(i)\n}\n\n[1] 8.382332"
  },
  {
    "objectID": "slides/lec10.html#nested-foreach",
    "href": "slides/lec10.html#nested-foreach",
    "title": "Complexity and parallelization",
    "section": "nested foreach",
    "text": "nested foreach\n\nThe %:% operator is the nesting operator, used for creating nested foreach loops.\n\n\nforeach(i = 1:4, .combine = \"c\") %:% \n  foreach(j = 0:1, .combine = \"c\") %dopar% \n    {i ^ j}\n\n[1] 1 1 1 2 1 3 1 4\n\n\n\n\nforeach(i = 1:4, .combine = \"data.frame\") %:% \n  foreach(j = 0:1, .combine = \"c\") %dopar% \n    {i ^ j}\n\n  result.1 result.2 result.3 result.4\n1        1        1        1        1\n2        1        2        3        4\n\n\n\n\n\nforeach(i = 1:4, .combine = \"c\") %:% \n  foreach(j = 0:1, .combine = \"+\") %dopar% \n    {i ^ j}\n\n[1] 2 3 4 5"
  },
  {
    "objectID": "slides/lec10.html#section",
    "href": "slides/lec10.html#section",
    "title": "Complexity and parallelization",
    "section": "",
    "text": "plan(multisession, workers = 8)\nfuture_map_dbl(mtcars, mean)\n\n       mpg        cyl       disp         hp       drat         wt       qsec \n 20.090625   6.187500 230.721875 146.687500   3.596563   3.217250  17.848750 \n        vs         am       gear       carb \n  0.437500   0.406250   3.687500   2.812500 \n\n\n\nNot sure we are running in parallel?\n\n\n\nsystem.time({map_dbl(mtcars, ~ {Sys.sleep(.1); mean(.x)})})\n\n   user  system elapsed \n  0.004   0.000   1.138 \n\n\n\nsystem.time({future_map_dbl(mtcars, ~ {Sys.sleep(.1); mean(.x)})})\n\n   user  system elapsed \n  0.043   0.002   0.258 \n\n\n\n\n\nplan(sequential)"
  },
  {
    "objectID": "slides/lec10.html#future",
    "href": "slides/lec10.html#future",
    "title": "Complexity and parallelization",
    "section": "future",
    "text": "future\nA ‚Äúfuture‚Äù is an abstraction for a value that may be available at some point in the future.\nThe purpose of the future package is to provide a very simple and uniform way of evaluating R expressions asynchronously using various resources available to the user.\n\nSee the CRAN future documentation for further reading."
  },
  {
    "objectID": "slides/lec10.html#furrr-and-purrr",
    "href": "slides/lec10.html#furrr-and-purrr",
    "title": "Complexity and parallelization",
    "section": "furrr and purrr",
    "text": "furrr and purrr\n\nfurrr functions are just like purrr functions but begin with future_\n\nExample\n\nlibrary(furrr)\nlibrary(tidyverse)\n\n\nmap_dbl(mtcars, mean)\n\n       mpg        cyl       disp         hp       drat         wt       qsec \n 20.090625   6.187500 230.721875 146.687500   3.596563   3.217250  17.848750 \n        vs         am       gear       carb \n  0.437500   0.406250   3.687500   2.812500 \n\nfuture_map_dbl(mtcars, mean)\n\n       mpg        cyl       disp         hp       drat         wt       qsec \n 20.090625   6.187500 230.721875 146.687500   3.596563   3.217250  17.848750 \n        vs         am       gear       carb \n  0.437500   0.406250   3.687500   2.812500"
  },
  {
    "objectID": "slides/lec10.html#example-1",
    "href": "slides/lec10.html#example-1",
    "title": "Complexity and parallelization",
    "section": "Example",
    "text": "Example\n\nHow could you parallelize the text mining of lab 4?\nDemo\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "labs/lab6.html",
    "href": "labs/lab6.html",
    "title": "Lab 6: ascend the likelihood mountain",
    "section": "",
    "text": "‚ÄúThere are two kinds of climbers: those who climb because their heart sings when they‚Äôre in the mountains, and all the rest.‚Äù - Alex Lowe\nBy the end of the lab, you will"
  },
  {
    "objectID": "labs/lab6.html#exercises",
    "href": "labs/lab6.html#exercises",
    "title": "Lab 6: ascend the likelihood mountain",
    "section": "Exercises",
    "text": "Exercises\nFor all exercises, you should respond in the space provided in the template lab-6.qmd and show all your work. In all answers of type double, three significant figures suffices.\n\n1. rank NBA teams\nFor this question, we will use the data set NBA that contains all 1230 regular season NBA games, from 2015-2016 and their outcome.\n\nNBA = read_csv(\"https://sta323-sp23.github.io/data/NBA_1516.csv\")\nteam_id = read_csv(\"https://sta323-sp23.github.io/data/teams.csv\")\n\n\nglimpse(NBA)\n\nCode book:\n\nHome: unique id for home team\nAway: unique id for away team\nY: whether the home team won (1) or lost (0)\n\nThe team_id data set contains a dictionary to map between the unique ids from NBA and the actual team name.\nAssuming the outcome of each game is independent, we can rank teams and jointly model a home-court advantage in the 2015-2016 season using the Bradley-Terry model described in class.\n\nImplement the MM algorithm, as described on this slide to estimate \\(\\hat{\\mathbf{p}}_{MLE}\\) and \\(\\hat{\\theta}_{MLE}\\). Your implementation should be able to be adapted to another data set of identical construction (i.e.¬†don‚Äôt hard-code data values into your functions). Start your algorithm mwith \\(\\theta_0 = 0.5\\) and \\(\\mathbf{p} = \\mathbf{1}\\) where \\(\\mathbf{1}\\) is a vector of 30 1s. Run the MM updates for 100 steps (i.e.¬†update each element of \\(\\mathbf{p}\\) and \\(\\theta\\) 100 times).\n\n\n\n\n\n\n\nHint\n\n\n\n\nUsing your NBA data frame, create matrix \\(A = \\{a_{ij}\\}\\) and matrix \\(B = \\{b_{ij}\\}\\), as defined on this slide from lecture.\n\n\n\n\nWhat are the ten highest ranked teams (in order) from the 2015-2016 season according to the Bradley Terry model? Report your estimates \\(\\hat{\\mathbf{p}}_{MLE}\\) together with the team name and id number for the top ten teams in a table.\nIs there a home-court advantage? What are the odds of winning at home vs away? What are the log-odds?\n\n\noptional extra credit\n\nFix \\(p_1 = 1\\) in your algorithm. Construct 100 bootstrap data sets (re-sample from the original NBA data set with replacement) and re-compute \\(\\hat{\\mathbf{p}}_{MLE}\\) and \\(\\hat{\\theta}_{MLE}\\) for each. Here we choose 100 for low-computational demand.\n\nReport the maximum likelihood estimates (based on the actual, original data set) together with a 95% confidence interval associated with each parameter in a 31 row table. Your table should label each row (except the row associated with \\(\\theta\\)) by the team‚Äôs actual name (not just the ID).\n\n\n\n2. text classifier\nIn this exercise we will work towards re-creating the classifier of Ogura, Amano and Kondo (2013) by using a gamma-Poisson distribution to model the frequency of words in a document. Read section 3.1 of the article for relevant background about this model.\n\n\n\n\n\nThe model\nLet \\(N_d\\) be the total number of documents and let \\(N_v\\) be the total number of unique words in all documents under study. In our model, we assert that the number of occurrences, \\(X_{ij}\\) of word \\(j\\) in document \\(i\\) is Poisson with mean \\(\\lambda_j w_i\\) where \\(w_i\\) is the number of words in document \\(i\\). Furthermore, we assert \\(\\lambda_j \\sim gamma(\\alpha_{jc}, \\beta_{jc})\\), where \\(\\alpha_{jc}\\) and \\(\\beta_{jc}\\) are parameters specific to word \\(j\\) in a document of class \\(c\\).\nAssuming each document is independent, we write the likelihood\n\\[\nL(\\mathbf{\\alpha}, \\beta) = \\prod_{i = 1}^{N_d} \\prod_{j = 1}^{N_{v}}\n\\frac{\\beta_{cj}^{\\alpha_{cj}} \\Gamma(x_{ij} + \\alpha_{cj})w_i^{x_{ij}}}{\n\\Gamma(\\alpha_{cj}) (w_i + \\beta_{cj})^{x_{ij} + \\alpha_{cj}} \\cdot x_{ij}!\n}.\n\\]\nNote that each document \\(i \\in \\{1, \\ldots, N_d \\}\\) has one of five class labels (e.g.¬†comp.sci) and so \\(c \\in \\{1, \\ldots 5 \\}\\). Effectively, this is the same as fitting five different models of the following form to five sets of data (1 data set for each class):\n\\[\nL(\\mathbf{\\alpha}, \\beta) = \\prod_{i = 1}^{N_d} \\prod_{j = 1}^{N_{v}}\n\\frac{\\beta_{j}^{\\alpha_{j}} \\Gamma(x_{ij} + \\alpha_{j})w_i^{x_{ij}}}{\n\\Gamma(\\alpha_{j}) (w_i + \\beta_{j})^{x_{ij} + \\alpha_{j}} \\cdot x_{ij}!\n}.\n\\]\nNote that \\(\\alpha\\) and \\(\\beta\\) are vectors. Since we wish to compute the maximum likelihood estimates \\(\\hat{\\alpha}_{MLE}\\) and \\(\\hat{\\beta}_{MLE}\\), we need to find a function \\(g\\) that minorizes \\(L(\\alpha, \\beta)\\).\n\npart 1\n\nTo begin, expand the \\(\\Gamma\\) function using the property: \\(\\Gamma(x) = (x-1)!\\). Next, write the log-likelihood.\n\n\n\npart 2\n\nUse Jensen‚Äôs inequality and the supporting line minorization to construct \\(g\\). Write down \\(g(\\alpha, \\beta | \\alpha_n, \\beta_n)\\).\n\n\n\n\n\n\n\nHint\n\n\n\nIn the slides above on Jensen‚Äôs inequality and the supporting line minorization, \\(f(x) = -\\log x\\)\n\n\n\n\npart 3\nShow that the MM update of \\(\\beta_j\\) is\n\\[\n\\beta_{n+1, j} = \\frac{N_d \\cdot \\alpha_{nj}}{\n\\sum_{i=1}^{N_d} \\frac{x_{ij} + \\alpha_{nj}}{w_i + \\beta_{nj}}\n}\n\\]\nand that the MM update of \\(\\alpha_j\\) is\n\\[\n\\alpha_{n+1, j} = \\frac{\\sum_{i=1}^{N_d} \\sum_{k = 0}^{x_{ij} - 1} \\frac{\\alpha_{nj}}{\\alpha_{nj} + k}}{\n\\sum_{i = 1}^{N_d} \\log \\left(\\frac{w_i + \\beta_{nj}}{\\beta_{nj}}\\right)\n}\n\\]\n\n\n\n\n\n\nNote\n\n\n\nThis exercise ends just shy of implementation. If you were to proceed from here, you would compute the MLEs \\(\\hat{\\alpha}, \\hat{\\beta}\\) for each class of documents. Next, when observing a new document \\(d\\), you would compute the probability document \\(d\\) is of class \\(c\\): \\(p(c | d) \\propto p(c) \\cdot p(d | \\alpha_c, \\beta_c)\\). Repeat this for each class \\(c\\) and subsequently label document \\(d\\) as the most probable class."
  },
  {
    "objectID": "labs/lab6.html#style-guidelines",
    "href": "labs/lab6.html#style-guidelines",
    "title": "Lab 6: ascend the likelihood mountain",
    "section": "Style guidelines",
    "text": "Style guidelines\nAll assignments in this course must employ proper coding style, as outlined below:\n\nAll code should obey the 80 character limit per line (i.e.¬†no code should run off the page when rendering or require scrolling). To enable a vertical line in the RStudio IDE that helps guide this, see the style guidelines from lab 0 or ask a member of the teaching team for help.\nAll commas should be followed by a space.\nAll binary operators should be surrounded by space. For example x + y is appropriate. x+y is not.\nAll pipes %>% or |> as well as ggplot layers + should be followed by a new line.\nYou should be consistent with stylistic choices, e.g.¬†only use 1 of = vs <- and %>% vs |>\nYour name should be at the top (in the YAML) of each document under ‚Äúauthor:‚Äù\nAll code chunks should be named (with names that don‚Äôt have spaces, e.g.¬†ex-1, ex-2 etc.)\nFile names in your GitHub repo such as lab-x.qmd must not be changed and left as provided. Additionally, your repo must pass certain basic checks. The results of these checks are visible on GitHub via the badges at the top of your README and the actions tab. These are meant to give you feedback around the structure and reproducibility of your repository and assignment - they do not assess the correctness of your work. You should consider them a necessary but not sufficient condition when turning in your work - passing all of the checks simply means your have met a minimum standard of reproducibility for the assignment.\n\nFundamentally, the check is making sure 1) you only have the files you should in your repository, 2) your .qmd renders.\nIf you have any questions about style, please ask a member of the teaching team."
  },
  {
    "objectID": "labs/lab6.html#submitting-your-lab",
    "href": "labs/lab6.html#submitting-your-lab",
    "title": "Lab 6: ascend the likelihood mountain",
    "section": "Submitting your lab",
    "text": "Submitting your lab\nTo submit your assignment, simply commit and push your completed lab-x.qmd to your GitHub repo. Your most recent commit 48 hours after the assignment deadline will be graded, and any applicable late penalty will be applied (see the syllabus). For this reason, do not push commits after you are satisfied with your work, or a late penalty will be applied."
  },
  {
    "objectID": "labs/lab7.html",
    "href": "labs/lab7.html",
    "title": "Lab 7:",
    "section": "",
    "text": "By the end of the lab, you will‚Ä¶"
  },
  {
    "objectID": "labs/lab7.html#exercises",
    "href": "labs/lab7.html#exercises",
    "title": "Lab 7:",
    "section": "Exercises",
    "text": "Exercises\nFor all exercises, you should respond in the space provided in the template lab-5.qmd and show all your work. In all answers of type double, three significant figures suffices.\n\n1.\n\n\n2."
  },
  {
    "objectID": "labs/lab7.html#style-guidelines",
    "href": "labs/lab7.html#style-guidelines",
    "title": "Lab 7:",
    "section": "Style guidelines",
    "text": "Style guidelines\nAll assignments in this course must employ proper coding style, as outlined below:\n\nAll code should obey the 80 character limit per line (i.e.¬†no code should run off the page when rendering or require scrolling). To enable a vertical line in the RStudio IDE that helps guide this, see the style guidelines from lab 0 or ask a member of the teaching team for help.\nAll commas should be followed by a space.\nAll binary operators should be surrounded by space. For example x + y is appropriate. x+y is not.\nAll pipes %>% or |> as well as ggplot layers + should be followed by a new line.\nYou should be consistent with stylistic choices, e.g.¬†only use 1 of = vs <- and %>% vs |>\nYour name should be at the top (in the YAML) of each document under ‚Äúauthor:‚Äù\nAll code chunks should be named (with names that don‚Äôt have spaces, e.g.¬†ex-1, ex-2 etc.)\nFile names in your GitHub repo such as lab-x.qmd must not be changed and left as provided. Additionally, your repo must pass certain basic checks. The results of these checks are visible on GitHub via the badges at the top of your README and the actions tab. These are meant to give you feedback around the structure and reproducibility of your repository and assignment - they do not assess the correctness of your work. You should consider them a necessary but not sufficient condition when turning in your work - passing all of the checks simply means your have met a minimum standard of reproducibility for the assignment.\n\nFundamentally, the check is making sure 1) you only have the files you should in your repository, 2) your .qmd renders.\nIf you have any questions about style, please ask a member of the teaching team."
  },
  {
    "objectID": "labs/lab7.html#submitting-your-lab",
    "href": "labs/lab7.html#submitting-your-lab",
    "title": "Lab 7:",
    "section": "Submitting your lab",
    "text": "Submitting your lab\nTo submit your assignment, simply commit and push your completed lab-x.qmd to your GitHub repo. Your most recent commit 48 hours after the assignment deadline will be graded, and any applicable late penalty will be applied (see the syllabus). For this reason, do not push commits after you are satisfied with your work, or a late penalty will be applied."
  },
  {
    "objectID": "slides/lec11.html#motivation",
    "href": "slides/lec11.html#motivation",
    "title": "Intro to optimization",
    "section": "Motivation",
    "text": "Motivation\n\n\n\nIn statistics, common themes for optimization include\n\nMaximum likelihood estimate (MLE)\nMaximum a posterior probability (MAP) estimate\nMinimize a loss function, e.g.¬†least squares, least absolute value regression, multi-dimensional scaling, KL-divergence etc."
  },
  {
    "objectID": "slides/lec11.html#example",
    "href": "slides/lec11.html#example",
    "title": "Intro to optimization",
    "section": "Example",
    "text": "Example\nLet \\(X\\) be the resting heart rate (RHR) in beats per minute of a student in this class.\nAssume RHR is normally distributed with some mean \\(\\mu\\) and standard deviation \\(8\\).\n\n\\[\n\\textbf{Data-generative model: } X_i \\overset{\\mathrm{iid}}{\\sim} N(\\mu, 64)$\n\\]\n\n\nIf we observe two student heart rates, {75, 58} then our likelihood\n\\[L(\\mu) = f_x(75 |\\mu) \\cdot f_x(58|\\mu).\\]\nThat is, the product of the density function evaluated at each data point.\n\n\n\ndataX = data.frame(x = c(75,58))\n\n\n\n\n\n\n\n\n\ndataX = data.frame(x = c(75,58))\n\n# manual encoding\nnormalEval = function(x, mu) {\n  sigma2 = 64\n  constant = 1 / sqrt(2*pi*sigma2)\n  expTerm = exp(-1*((x-mu)^2)/(2*sigma2))\n  return(constant * expTerm)\n}\n\nlikelihood = function(mu) {\n  n = nrow(dataX)\n  total = 1\n  for(i in 1:n){\n    total = total * normalEval(dataX$x[i], mu)\n  }\n  return(total)\n}\n\n# using dnorm()\nlikelihood2 = function(mu) {\n   n = nrow(dataX)\n  total = 1\n  for(i in 1:n){\n    total = total * dnorm(dataX$x[i], mean = mu, sd = 1)\n  }\n  return(total)\n}\n\nggplot() +\n  xlim(-1, 5) +\n  geom_function(fun = likelihood2) +\n  theme_bw() +\n  labs(x = expression(mu), y = \"likelihood\")\n\n\n\n\nThe maximum likelihood estimate \\(\\hat{\\mu} = \\frac{1 + 3}{2} = 2\\)."
  },
  {
    "objectID": "slides/lec11.html#notes",
    "href": "slides/lec11.html#notes",
    "title": "Intro to optimization",
    "section": "Notes",
    "text": "Notes\n\nNotice how small the y-axis is. Previously explain numerical representation on computer and instability for very small/large values. This is motivation to take the log-likelihood. Mention that log() is monotonic, i.e.¬†log(x) > log(y) iff x > y."
  },
  {
    "objectID": "slides/lec11.html#how-do-you-maximizeminimize-a-function",
    "href": "slides/lec11.html#how-do-you-maximizeminimize-a-function",
    "title": "Intro to optimization",
    "section": "How do you maximize/minimize a function?",
    "text": "How do you maximize/minimize a function?\n\nIf \\(f\\) is differentiable, then maxima/minima will satisfy \\(Df = 0\\). We reduce the problem to ‚Äúroot-finding‚Äù.\nRoot-finding: \\(a\\) is said to be a ‚Äúroot‚Äù or a ‚Äúfixed point‚Äù of \\(f\\) if \\(f(a) = 0\\).\n\nIn examples like the previous problem, we can solve analytically. But sometimes, we won‚Äôt be able to‚Ä¶"
  },
  {
    "objectID": "slides/lec11.html#newton-raphson",
    "href": "slides/lec11.html#newton-raphson",
    "title": "Intro to optimization",
    "section": "Newton-Raphson",
    "text": "Newton-Raphson\n\nIf \\(a\\) satisfies \\(f(a) = 0\\), \\(a\\) is said to be a ‚Äúfixed point‚Äù or ‚Äúroot‚Äù of the function\nNewton-Raphson is a ‚Äúroot-finding‚Äù method\nBased on first order approximation of a function, \\(\\ f(a) \\approx f(x) + f'(x)(a - x)\\)\n\nNear fixed points, the first order approximation is:\n\\[\n0 \\approx f(x) + f'(x)(a - x).\n\\]\nWe are trying to find \\(a\\), so if \\(f'(x)\\) invertible, we rearrange\n\\[\na = x - \\frac{f(x)}{f'(x)}\n\\]\n\nand the procedural update is\n\\[\nx_{n+1} = x_n - \\frac{f(x)}{f'(x)}\n\\]"
  },
  {
    "objectID": "slides/lec11.html#code-example",
    "href": "slides/lec11.html#code-example",
    "title": "Intro to optimization",
    "section": "Code example",
    "text": "Code example\nIn practice, we tolerate close solutions, i.e.¬†\\(a\\) such that \\(f(a) \\approx 0\\).\n\nnewton = function(f, fp, x, tol) {\n  for (i in 1:100) {\n    x = x - f(x) / fp(x)\n    if (abs(f(x)) < tol) {\n      return(x)\n    }\n  }\n  return(x)\n}\n\n\nf = function(x) {\n  return(x ^ 3 - 5 * x + 1)\n}\n\nfp = function(x) {\n  return(3 * x ^ 2 - 5.0)\n}\nnewton(f, fp, 0.0, 1e-14)\n\n[1] 0.2016397"
  },
  {
    "objectID": "slides/lec11.html#practice-mle",
    "href": "slides/lec11.html#practice-mle",
    "title": "Intro to optimization",
    "section": "Practice: MLE",
    "text": "Practice: MLE"
  },
  {
    "objectID": "slides/lec11.html#negative-binomial-regression",
    "href": "slides/lec11.html#negative-binomial-regression",
    "title": "Intro to optimization",
    "section": "Negative-binomial regression",
    "text": "Negative-binomial regression\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec11.html#example-likelihoods",
    "href": "slides/lec11.html#example-likelihoods",
    "title": "Intro to optimization",
    "section": "Example: likelihoods",
    "text": "Example: likelihoods\nLet \\(X\\) be the resting heart rate (RHR) in beats per minute of a student in this class.\nAssume RHR is normally distributed with some mean \\(\\mu\\) and standard deviation \\(8\\).\n\n\\[\n\\textbf{Data-generative model: } X_i \\overset{\\mathrm{iid}}{\\sim} N(\\mu, 64)\n\\]\n\n\nIf we observe three student heart rates, {75, 58, 68} then our likelihood\n\\[L(\\mu) = f_x(75 |\\mu) \\cdot f_x(58|\\mu) \\cdot f_x(68|\\mu).\\]\n\n\n\ndatalikelihood functionplotplot code\n\n\n\nx = c(75, 58, 68)\n\n\n\n\nL = function(mu, x) {\n  stopifnot(is.numeric(x))\n  n = length(x)\n  likelihood = 1\n  for(i in 1:n){\n    likelihood = likelihood * dnorm(x[i], mean = mu, sd = 8)\n  }\n  return(likelihood)\n}\n\n\n\n\n\n\n\n\n\n\n\nmu = seq(50, 80, by = 0.01) # range\ndf = data.frame(mu)\n\nggplot() +\n  xlim(c(50, 80)) +\n  geom_function(fun = L, args = list(x = x)) +\n  theme_bw() +\n  labs(x = expression(mu), y = \"likelihood\")\n\n\n\n\n\n\nThe maximum likelihood estimate \\(\\hat{\\mu} = \\frac{75 + 58 + 68}{3} = 67\\)."
  },
  {
    "objectID": "slides/lec11.html#example-normal-likelihood",
    "href": "slides/lec11.html#example-normal-likelihood",
    "title": "Intro to optimization",
    "section": "Example: normal likelihood",
    "text": "Example: normal likelihood\nLet \\(X\\) be the resting heart rate (RHR) in beats per minute of a student in this class.\nAssume RHR is normally distributed with some mean \\(\\mu\\) and standard deviation \\(8\\).\n\n\\[\n\\textbf{Data-generative model: } X_i \\overset{\\mathrm{iid}}{\\sim} N(\\mu, 64)\n\\]\n\n\nIf we observe three student heart rates, {75, 58, 68} then our likelihood\n\\[L(\\mu) = f_x(75 |\\mu) \\cdot f_x(58|\\mu) \\cdot f_x(68|\\mu).\\]\nThat is, the joint density function of the observed data as a function of the parameter.\n\n\n\n\n\n\n\n\nImportant\n\n\nThe likelihood itself is not a density function."
  },
  {
    "objectID": "slides/lec11.html#normal-likelihood-continued",
    "href": "slides/lec11.html#normal-likelihood-continued",
    "title": "Intro to optimization",
    "section": "normal likelihood continued",
    "text": "normal likelihood continued\n\\[L(\\mu) = f_x(75 |\\mu) \\cdot f_x(58|\\mu) \\cdot f_x(68|\\mu).\\]\n\ndatalikelihood functionplotplot code\n\n\n\nx = c(75, 58, 68)\n\n\n\n\nL = function(mu, x) {\n  stopifnot(is.numeric(x))\n  n = length(x)\n  likelihood = 1\n  for(i in 1:n){\n    likelihood = likelihood * dnorm(x[i], mean = mu, sd = 8)\n  }\n  return(likelihood)\n}\n\n\n\n\n\n\n\n\n\n\n\nggplot() +\n  xlim(c(50, 83)) +\n  geom_function(fun = L, args = list(x = x)) +\n  theme_bw() +\n  labs(x = expression(mu), y = \"likelihood\")\n\n\n\n\n\nThe maximum likelihood estimate \\(\\hat{\\mu} = \\frac{75 + 58 + 68}{3} = 67\\)."
  },
  {
    "objectID": "slides/lec11.html#what-mu-maximizes-the-likelihood",
    "href": "slides/lec11.html#what-mu-maximizes-the-likelihood",
    "title": "Intro to optimization",
    "section": "What \\(\\mu\\) maximizes the likelihood?",
    "text": "What \\(\\mu\\) maximizes the likelihood?\n\\[L(\\mu) = f_x(75 |\\mu) \\cdot f_x(58|\\mu) \\cdot f_x(68|\\mu).\\]\n\ndatalikelihood functionplotplot code\n\n\n\nx = c(75, 58, 68)\n\n\n\n\nL = function(mu, x) {\n  stopifnot(is.numeric(x))\n  n = length(x)\n  likelihood = 1\n  for(i in 1:n){\n    likelihood = likelihood * dnorm(x[i], mean = mu, sd = 8)\n  }\n  return(likelihood)\n}\n\n\n\n\n\n\n\n\n\n\n\nggplot() +\n  xlim(c(50, 83)) +\n  geom_function(fun = L, args = list(x = x)) +\n  theme_bw() +\n  labs(x = expression(mu), y = \"likelihood\")\n\n\n\n\n\nThe maximum likelihood estimate \\(\\hat{\\mu} = \\frac{75 + 58 + 68}{3} = 67\\)."
  },
  {
    "objectID": "slides/lec11.html#how-do-you-maximizeminimize-a-function-1",
    "href": "slides/lec11.html#how-do-you-maximizeminimize-a-function-1",
    "title": "Intro to optimization",
    "section": "How do you maximize/minimize a function?",
    "text": "How do you maximize/minimize a function?\n\nIf \\(f\\) is differentiable, then maxima/minima will satisfy \\(Df = 0\\)"
  },
  {
    "objectID": "slides/lec11.html#the-log-likelihood",
    "href": "slides/lec11.html#the-log-likelihood",
    "title": "Intro to optimization",
    "section": "The log-likelihood",
    "text": "The log-likelihood\nNotice how small the y-axis is on the previous slide. What happens to the scale of the likelihood as we add additional data points?\n\\[\nL(\\mu) = \\prod_{i = 1}^{n} f_x(x_i |\\mu)\n\\]\n\nSince densities evaluate between 0 and 1, multiplying many together (as we often do in likelihoods) can quickly result in floating point underflow. That is, numbers smaller than the computer can actually represent in memory.\n\n\nlog to the rescue!\n\nlog is a monotonic function, i.e.¬†\\(x > y\\) implies \\(\\log(x) > \\log(y)\\), because of this the maximum of \\(f\\) is the same as the maximum of \\(\\log f\\).\nadditionally, log turns products into sums\n\nin practice, we always work with the log-likelihood,\n\\[\n\\log L(\\mu) = \\sum_{i = 1}^n \\log f_x(x_i | \\mu).\n\\]"
  },
  {
    "objectID": "slides/lec11.html#visualizing-the-likelihood",
    "href": "slides/lec11.html#visualizing-the-likelihood",
    "title": "Intro to optimization",
    "section": "Visualizing the likelihood",
    "text": "Visualizing the likelihood\n\\[L(\\mu) = f_x(75 |\\mu) \\cdot f_x(58|\\mu) \\cdot f_x(68|\\mu).\\]\n\ndatalikelihood functionplotplot code\n\n\n\nx = c(75, 58, 68)\n\n\n\n\nL = function(mu, x) {\n  stopifnot(is.numeric(x))\n  n = length(x)\n  likelihood = 1\n  for(i in 1:n){\n    likelihood = likelihood * dnorm(x[i], mean = mu, sd = 8)\n  }\n  return(likelihood)\n}\n\n\n\n\n\n\n\n\n\n\n\nggplot() +\n  xlim(c(50, 83)) +\n  geom_function(fun = L, args = list(x = x)) +\n  theme_bw() +\n  labs(x = expression(mu), y = \"likelihood\")\n\n\n\n\n\nThe maximum likelihood estimate \\(\\hat{\\mu} = \\frac{75 + 58 + 68}{3} = 67\\).\nThe maximum likelihood estimate is the parameter value that maximizes the likelihood function."
  },
  {
    "objectID": "slides/lec11.html#exercise-1",
    "href": "slides/lec11.html#exercise-1",
    "title": "Intro to optimization",
    "section": "Exercise",
    "text": "Exercise\n\nx = c(1.470695, 0.3575424, 0.9695413, 1.075623, 0.6361029,\n      0.6329211, 1.630696, 1.143087, 0.6703566, 0.5963144,\n      0.765227, 0.7756703, 0.7327915, 0.699267, 0.2717423,\n      0.3266376, 1.688557, 0.4979863, 0.2270031, 1.175155)\n\n\nFind the maximum likelihood estimates \\(\\hat{k}\\) and \\(\\hat{\\lambda}\\) using Newton‚Äôs method.\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec11.html#weibull-distribution",
    "href": "slides/lec11.html#weibull-distribution",
    "title": "Intro to optimization",
    "section": "Weibull distribution",
    "text": "Weibull distribution\n\nA Weibull distribution is a generalized gamma distribution (a gamma distribution with two shape parameters) where both shape parameters are equal to \\(k\\).\n\nThe Weibull density function,\n\\[\nf_x(x | \\lambda, k) = \\begin{cases}\n\\frac{k}{\\lambda} \\left(\\frac{x}{\\lambda} \\right)^{k-1} e^{-(x/\\lambda)^k} & x >0\\\\\n0 & x <0\n\\end{cases}\n\\]\nwhere \\(k>0\\) is the shape parameter and \\(\\lambda > 0\\) is the scale parameter.\nAll the usual R functions:\n\ndweibull\npweibull\nqweibull\nrweibull\n\n\nWhy can‚Äôt we find MLEs \\((\\hat{k}, \\hat{\\lambda})\\) analytically?"
  },
  {
    "objectID": "slides/lec11.html#gradient-of-likelihood-of-n-independent-weibull-draws",
    "href": "slides/lec11.html#gradient-of-likelihood-of-n-independent-weibull-draws",
    "title": "Intro to optimization",
    "section": "Gradient of likelihood of n independent Weibull draws",
    "text": "Gradient of likelihood of n independent Weibull draws\nLet \\(X_i \\sim \\text{Weibull}(\\lambda, k)\\) and we have \\(n\\) samples: \\(x = \\{x_1, \\ldots, x_n\\}\\).\n\\[\n\\begin{aligned}\n\\log L(\\lambda, k) &= \\sum_{i = 1}^{n} \\log f_x(x_i |\\lambda, k)\\\\\n&= \\sum_{i=1}^n \\log \\frac{k}{\\lambda} + (k-1) \\log \\frac{x_i}{\\lambda} - \\left(\\frac{x_i}{\\lambda} \\right)^k\n\\end{aligned}\n\\]\n\n\\[\n\\frac{\\partial}{\\partial \\lambda} \\log L(\\lambda, k) = 0 \\implies\\\\\n\\hat{\\lambda} = \\left(\\frac{\\sum_{i = 1}^n (x_i^k)}{n}\\right)^{1/k}\n\\]\n\n\nSetting\n\\[\n\\frac{\\partial}{\\partial k} \\log L(\\lambda, k) = 0,\n\\]\nand plugging in \\(\\hat{\\lambda}\\) from above implies \\(\\hat{k}\\) is the value of \\(k\\) that satisfies\n\\[\n\\frac{\\sum_{i = 1}^n x_i^k \\log x_i}{\\sum_{i = 1}^n x_i^k} - \\frac{1}{k} - \\frac{1}{n} \\sum_{i=1}^n \\log x_i = 0\n\\]"
  },
  {
    "objectID": "slides/lec11.html#exercise-2",
    "href": "slides/lec11.html#exercise-2",
    "title": "Intro to optimization",
    "section": "Exercise 2",
    "text": "Exercise 2\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec11.html#exercise",
    "href": "slides/lec11.html#exercise",
    "title": "Intro to optimization",
    "section": "Exercise",
    "text": "Exercise\n\nWrite a function in R that returns the log-likelihood for the previous example without using dnorm\nPlot your log-likelihood function.\nAdd a red vertical line at \\(\\mu = \\bar{x}\\).\nWhat‚Äôs the range of the y-axis?"
  },
  {
    "objectID": "slides/lec11.html#univariate-newton-raphson",
    "href": "slides/lec11.html#univariate-newton-raphson",
    "title": "Intro to optimization",
    "section": "univariate Newton-Raphson",
    "text": "univariate Newton-Raphson\n\nIf \\(a\\) satisfies \\(f(a) = 0\\), \\(a\\) is said to be a ‚Äúfixed point‚Äù or ‚Äúroot‚Äù of the function\nNewton-Raphson is a ‚Äúroot-finding‚Äù method\nBased on first order approximation of a function, \\(\\ f(a) \\approx f(x) + f'(x)(a - x)\\)\n\nNear fixed points, the first order approximation is:\n\\[\n0 \\approx f(x) + f'(x)(a - x).\n\\]\nWe are trying to find \\(a\\), so if \\(f'(x)\\) invertible, we rearrange\n\\[\na = x - \\frac{f(x)}{f'(x)}\n\\]\n\nand the procedural update is\n\\[\nx_{n+1} = x_n - \\frac{f(x)}{f'(x)}\n\\]"
  },
  {
    "objectID": "slides/lec12.html#negative-binomial-regression",
    "href": "slides/lec12.html#negative-binomial-regression",
    "title": "Univariate Newton‚Äôs method",
    "section": "Negative binomial regression",
    "text": "Negative binomial regression"
  },
  {
    "objectID": "slides/lec12.html#find-the-mle",
    "href": "slides/lec12.html#find-the-mle",
    "title": "Newton-Raphson",
    "section": "Find the MLE",
    "text": "Find the MLE\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec12.html#univariate-newton-raphson",
    "href": "slides/lec12.html#univariate-newton-raphson",
    "title": "Newton-Raphson",
    "section": "univariate Newton-Raphson",
    "text": "univariate Newton-Raphson\n\nIf \\(a\\) satisfies \\(f(a) = 0\\), \\(a\\) is said to be a ‚Äúfixed point‚Äù or ‚Äúroot‚Äù of the function\nNewton-Raphson is a ‚Äúroot-finding‚Äù method\nBased on first order approximation of a function, \\(\\ f(a) \\approx f(x) + f'(x)(a - x)\\)\n\nNear fixed points, the first order approximation is:\n\\[\n0 \\approx f(x) + f'(x)(a - x).\n\\]\nWe are trying to find \\(a\\), so if \\(f'(x)\\) invertible, we rearrange\n\\[\na = x - \\frac{f(x)}{f'(x)}\n\\]\n\nand the procedural update is\n\\[\nx_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)}\n\\]"
  },
  {
    "objectID": "slides/lec12.html#code-example",
    "href": "slides/lec12.html#code-example",
    "title": "Newton-Raphson",
    "section": "Code example",
    "text": "Code example\n\n\n\nIn practice, we tolerate close solutions, i.e.¬†\\(a\\) such that \\(f(a) \\approx 0\\).\n\nnewton = function(f, fp, x, tol) {\n  for (i in 1:100) {\n    x = x - f(x) / fp(x)\n    if (abs(f(x)) < tol) {\n      return(x)\n    }\n  }\n  return(x)\n}\n\n\nf = function(x) {\n  return(x ^ 3 - 5 * x + 1)\n}\n\nfp = function(x) {\n  return(3 * (x ^ 2) - 5.0)\n}\nnewton(f, fp, -2.0, 1e-14)\n\n[1] -2.330059\n\n\n\nf is the function we are finding a root of."
  },
  {
    "objectID": "slides/lec12.html#where-we-start-matters",
    "href": "slides/lec12.html#where-we-start-matters",
    "title": "Newton-Raphson",
    "section": "Where we start matters",
    "text": "Where we start matters"
  },
  {
    "objectID": "slides/lec12.html#what-can-go-wrong",
    "href": "slides/lec12.html#what-can-go-wrong",
    "title": "Newton-Raphson",
    "section": "What can go wrong",
    "text": "What can go wrong\n\nderivative not continuous at the root\nIf \\(f'(x_n)=0\\), can‚Äôt proceed\niterates can ‚Äúcycle‚Äù rather than converge to the solution\nIf \\(f'(x_n)\\) is small, but not zero, approximate solutions can diverge to infinity.\nSensitive to initial point \\(x_0\\)"
  },
  {
    "objectID": "slides/lec12.html#beta-binomial-mle",
    "href": "slides/lec12.html#beta-binomial-mle",
    "title": "Univariate Newton‚Äôs method",
    "section": "Beta-binomial MLE",
    "text": "Beta-binomial MLE\n\\[\nX \\sim Binomial(n, p)\n\\]\n\\[\np \\sim Beta(\\alpha, \\beta)\n\\]\nThis data-generative process models a set of \\(N\\) binomial experiments that each have their own local \\(p_i\\), for \\(i \\in \\{1, \\ldots N\\}\\).\n\nExample:\n\nSchuckers, ME ‚ÄúUsing the Beta-binomial distribution to assess performance of a biometric identification device‚Äù International Journal of Image and Graphics, vol.¬†3, no. 3, July 2003\n\n\n\nData:\n\n\n\n\n\nid\nn\nsuccess\n\n\n\n\n1\n9\n3\n\n\n2\n9\n0\n\n\n3\n8\n8\n\n\n4\n6\n6\n\n\n5\n9\n8"
  },
  {
    "objectID": "slides/lec12.html#good-starting-guess",
    "href": "slides/lec12.html#good-starting-guess",
    "title": "Newton-Raphson",
    "section": "Good starting guess",
    "text": "Good starting guess\n\nMethod of Moments"
  },
  {
    "objectID": "slides/lec12.html#beta-binomial",
    "href": "slides/lec12.html#beta-binomial",
    "title": "Newton-Raphson",
    "section": "Beta-binomial",
    "text": "Beta-binomial\n\\[\nX \\sim Binomial(n, p)\n\\]\n\\[\np \\sim Beta(\\alpha, \\beta)\n\\]\nThis data-generative process models a set of \\(N\\) binomial experiments, each possibly having their own local \\(p_i\\), and local \\(n_i\\) for \\(i \\in \\{1, \\ldots N\\}\\).\n\nExample:\n\nSchuckers, ME ‚ÄúUsing the Beta-binomial distribution to assess performance of a biometric identification device‚Äù International Journal of Image and Graphics, vol.¬†3, no. 3, July 2003\n\n\n\nData:\n\n\n\n\n\nid\nn\nsuccess\n\n\n\n\n1\n9\n3\n\n\n2\n9\n0\n\n\n3\n8\n8\n\n\n4\n6\n6\n\n\n5\n9\n8"
  },
  {
    "objectID": "slides/lec12.html#beta-binomial-likelihood",
    "href": "slides/lec12.html#beta-binomial-likelihood",
    "title": "Univariate Newton‚Äôs method",
    "section": "Beta-binomial likelihood",
    "text": "Beta-binomial likelihood\n\\[\nL(\\mathbf{p}, \\alpha, \\beta) =  \\prod_{i=1}^N p(X_i = x_i|n_i, p_i) \\cdot p(p_i |\\alpha, \\beta)\n\\]\n\n\\[\nL(\\mathbf{p}, \\alpha, \\beta) =\n\\prod_{i = 1}^{N} {n_i \\choose{x_i}} p_i^{x_i}(1-p_i)^{n_i-x_i}  \n\\frac{p_i^{\\alpha - 1} (1-p_i)^{\\beta - 1}}{B(\\alpha, \\beta)}\n\\]\nwhere \\(\\mathbf{p} = \\{p_i \\}\\) and \\(B(\\alpha, \\beta) = \\frac{\\Gamma(\\alpha) \\Gamma(\\beta)}{\\Gamma(\\alpha+\\beta)}\\).\n\n\n\n\n\n\nNote\n\n\n\n\\(\\Gamma\\) is the gamma function (read ?gamma and wikipedia).\nbeta() is the R function for \\(B(\\alpha, \\beta)\\).\n\n\n\n\n\n\nCombining terms above,\n\\[\nL(\\mathbf{p}, \\alpha, \\beta) =\n\\prod_{i = 1}^{N} {n_i \\choose{x_i}}\n\\frac{p_i^{x_i + \\alpha - 1} (1-p_i)^{n_i-x_i +\\beta - 1}}{B(\\alpha, \\beta)}\n\\]"
  },
  {
    "objectID": "slides/lec12.html#beta-binomial-log-likelihood",
    "href": "slides/lec12.html#beta-binomial-log-likelihood",
    "title": "Univariate Newton‚Äôs method",
    "section": "Beta-binomial log-likelihood",
    "text": "Beta-binomial log-likelihood\n$$\n$$"
  },
  {
    "objectID": "slides/lec12.html#beta-binomial-1",
    "href": "slides/lec12.html#beta-binomial-1",
    "title": "Newton-Raphson",
    "section": "Beta-binomial",
    "text": "Beta-binomial\n\\[\nf_x(\\mathbf{x}|\\mathbf{p}, \\mathbf{n}) =\n\\prod_{i = 1}^{N} {n_i \\choose{x_i}} p_i^{x_i}(1-p_i)^{n_i-x_i}  \n\\]\nwhere \\(\\mathbf{x} = \\{x_i \\}\\), \\(\\mathbf{p} = \\{ p_i \\}\\) and \\(\\mathbf{n} = \\{n_i \\}\\).\n\\[\nf_p(\\mathbf{p} | \\alpha, \\beta) = \\prod_{i = 1}^{N} \\frac{p_i^{\\alpha - 1} (1-p_i)^{\\beta - 1}}{B(\\alpha, \\beta)}\n\\]\nwhere \\(B(\\alpha, \\beta) = \\frac{\\Gamma(\\alpha) \\Gamma(\\beta)}{\\Gamma(\\alpha+\\beta)}\\).\n\n\n\n\n\n\nNote\n\n\n\n\\(\\Gamma\\) is the gamma function (read ?gamma and wikipedia).\nbeta() is the R function for \\(B(\\alpha, \\beta)\\).\n\n\n\n\n\nFundamentally, we are interested in the underlying Beta distribution that the \\(p_i\\) are drawn from. We don‚Äôt care about the individual \\(p_i\\) themselves. We integrate out \\(\\mathbf{p}\\),\n\\[\n\\begin{aligned}\nf_x(\\mathbf{x}|\\mathbf{n}, \\alpha, \\beta) &= \\int f_x(\\mathbf{x}, \\mathbf{p} | \\mathbf{n}, \\alpha, \\beta)\n\\ d\\mathbf{p}\\\\\n&=\n\\int\nf_x(\\mathbf{x}|\\mathbf{p}, \\mathbf{n}) f_p(\\mathbf{p} | \\alpha, \\beta)\n\\ d\\mathbf{p}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "slides/lec12.html#integrating-out-the-nuisance-parameters",
    "href": "slides/lec12.html#integrating-out-the-nuisance-parameters",
    "title": "Univariate Newton‚Äôs method",
    "section": "Integrating out the nuisance parameters",
    "text": "Integrating out the nuisance parameters\nFundamentally, we are interested in the underlying Beta distribution that the \\(p_i\\) are drawn from. We don‚Äôt care about the individual \\(p_i\\) themselves. We integrate out \\(p_i\\),\n\\[\nf_x(\\mathbf{x}|\\alpha, \\beta) = \\int f_x(\\mathbf{x}, \\mathbf{p} | \\alpha, \\beta) d\\mathbf{p} =\n\\]\n\\[\n\\log L = \\sum_{i = 1}^N \\log {n_i \\choose x_i} +\n(x_i + \\alpha - 1) \\log p_i + (n_i - x_i + \\beta - 1) \\log (1 - p_i) -\n\\log B(\\alpha, \\beta)\n\\]\n\\[\n\\frac{\\partial \\log L}{\\partial p_i} = \\sum_{i=1}^n\n\\frac{(x_i + \\alpha - 1)}{p_i} - \\frac{(n_i - x_i + \\beta - 1)}{1-p_i}\n\\]"
  },
  {
    "objectID": "slides/lec12.html#integrating-out-the-nuisance-parameters-continued",
    "href": "slides/lec12.html#integrating-out-the-nuisance-parameters-continued",
    "title": "Newton-Raphson",
    "section": "Integrating out the nuisance parameters continued",
    "text": "Integrating out the nuisance parameters continued\n\\[\n\\begin{aligned}\n\\int\nf_x(\\mathbf{x}|\\mathbf{p}, \\mathbf{n}) f_p(\\mathbf{p} | \\alpha, \\beta)\n\\ d\\mathbf{p} &=\n\\int\n\\prod_{i = 1}^{N} {n_i \\choose{x_i}}\n\\frac{p_i^{x_i + \\alpha - 1} (1-p_i)^{n_i - x_i +\\beta - 1}}{B(\\alpha, \\beta)}\n\\end{aligned}\nd \\mathbf{p}\n\\]\nConjugacy! This is proportional to a Beta distribution, hence\n\\[\n\\begin{aligned}\nf_x(\\mathbf{x}|\\mathbf{n}, \\alpha, \\beta) &=\n\\prod_{i = 1}^N {n_i \\choose x_i}\n\\frac{B(x_i + \\alpha, n_i - x_i +\\beta)}{B(\\alpha, \\beta)}\\\\\n&= \\prod_{i = 1}^N {n_i \\choose x_i}\n\\frac{\\Gamma(\\alpha+\\beta)}{\\Gamma(\\alpha) \\Gamma(\\beta)}\n\\frac{\\Gamma(x_i + \\alpha)\\Gamma(n_i -x_i + \\beta)}{\\Gamma(n_i + \\alpha + \\beta)}\n\\end{aligned}\n\\]\n\nThis in fact our likelihood! We can still simplify by pulling out the part that isn‚Äôt indexed by \\(i\\),\n\\[\nL(\\alpha, \\beta) =\n\\left(\\frac{\\Gamma(\\alpha+\\beta)}{\\Gamma(\\alpha) \\Gamma(\\beta)}\\right)^N \\cdot\n\\prod_{i = 1}^N {n_i \\choose x_i}\n\\frac{\\Gamma(x_i + \\alpha)\\Gamma(n_i -x_i + \\beta)}{\\Gamma(n_i + \\alpha + \\beta)}\n\\]"
  },
  {
    "objectID": "slides/lec12.html#log-likelihood",
    "href": "slides/lec12.html#log-likelihood",
    "title": "Newton-Raphson",
    "section": "Log-likelihood",
    "text": "Log-likelihood\n\\[\n\\log L = N \\left(\\log \\Gamma(\\alpha+\\beta) - \\log \\Gamma(\\alpha) -\\log\\Gamma(\\beta) \\right)+\\\\\n\\sum_{i=1}^N \\log {n_i \\choose x_i} + \\log \\Gamma(x_i + \\alpha) +\n\\log \\Gamma(n_i -x_i + \\beta) - \\log {\\Gamma(n_i + \\alpha + \\beta)}\n\\]\n\nWe want to maximize the log-likelihood.\n\n\nGradient of log-likelihood\n\nderivative of log-Gamma function is the digamma function, often denoted by the Greek \\(\\psi\\) (‚Äúpsi‚Äù).\n\n\\[\n\\frac{\\partial}{\\partial \\alpha} \\log L = N \\left[\\psi(\\alpha + \\beta) - \\psi(\\alpha)\\right] +\n\\sum_{i=1}^N \\psi(x_i + \\alpha) - \\psi(n_i + \\alpha + \\beta)\n\\]\n\\[\n\\frac{\\partial}{\\partial \\beta}\\log L =\nN \\left[\\psi(\\alpha + \\beta) - \\psi(\\beta)\\right] + \\sum_{i=1}^N\n\\psi(n_i - x_i + \\beta) - \\psi(n_i + \\alpha + \\beta)\n\\]"
  },
  {
    "objectID": "slides/lec12.html#jacobian",
    "href": "slides/lec12.html#jacobian",
    "title": "Newton-Raphson",
    "section": "Jacobian",
    "text": "Jacobian\n\nsecond derivative of log-Gamma function is the trigamma function, often denoted by the Greek \\(\\psi_1\\) (‚Äúpsi‚Äù) with a subscript ‚Äú1‚Äù.\n\n\\[\n\\frac{\\partial^2}{\\partial \\alpha^2} \\log L = N \\left[\\psi_1(\\alpha + \\beta) - \\psi_1(\\alpha)\\right] +\n\\sum_{i=1}^N \\psi_1(x_i + \\alpha) - \\psi_1(n_i + \\alpha + \\beta)\n\\]\n\\[\n\\frac{\\partial^2}{\\partial \\beta^2}\\log L =\nN \\left[\\psi_1(\\alpha + \\beta) - \\psi_1(\\beta)\\right] + \\sum_{i=1}^N\n\\psi_1(n_i - x_i + \\beta) - \\psi_1(n_i + \\alpha + \\beta)\n\\]\n\nSame thing but with trigamma functions!\n\n\n\\[\n\\frac{\\partial^2}{\\partial \\alpha \\partial \\beta}\\log L =\nN \\left[\\psi_1(\\alpha + \\beta)\\right] - \\sum_{i=1}^N \\psi_1(n_i + \\alpha + \\beta)\n\\]\nIn general, the Jacobian,\n\\[\nJ=\\left[\\begin{array}{ccc}\n\\dfrac{\\partial f_{1}(\\mathbf{x})}{\\partial x_{1}} & \\cdots & \\dfrac{\\partial f_{1}(\\mathbf{x})}{\\partial x_{n}} \\\\\n\\vdots & \\ddots & \\vdots \\\\\n\\dfrac{\\partial f_{m}(\\mathbf{x})}{\\partial x_{1}} & \\cdots & \\dfrac{\\partial f_{m}(\\mathbf{x})}{\\partial x_{n}}\n\\end{array}\\right]\n\\]"
  },
  {
    "objectID": "slides/lec12.html#multivariate-newton-raphson",
    "href": "slides/lec12.html#multivariate-newton-raphson",
    "title": "Newton-Raphson",
    "section": "multivariate Newton-Raphson",
    "text": "multivariate Newton-Raphson\nThe same intuition applies, but in higher dimensions.\nLet \\(\\mathbf{a}\\) satisfy \\(f(\\mathbf{a}) = 0\\).\n\nBased on first order approximation of a function, \\(\\ f(\\mathbf{a}) \\approx f(\\mathbf{x}) + f'(\\mathbf{x})(\\mathbf{a}- \\mathbf{x})\\)\n\nNear fixed points, the first order approximation is:\n\\[\n0 \\approx f(\\mathbf{x}) + Df(\\mathbf{x})(\\mathbf{a} - \\mathbf{x}).\n\\]\nTo find the root, we rearrange (solve for \\(\\mathbf{a}\\)) again and iterate\n\\[\n\\mathbf{x}_{n+1} = \\mathbf{x}_n - J^{-1}(\\mathbf{x}_n) f(\\mathbf{x}_n)\n\\]"
  },
  {
    "objectID": "slides/lec12.html#a-good-starting-point",
    "href": "slides/lec12.html#a-good-starting-point",
    "title": "Newton-Raphson",
    "section": "A good starting point",
    "text": "A good starting point\nMethod of moments.\nSet the first and second moments (\\(\\mathbb{E} [x]\\) and \\(\\mathbb{E} [x^2]\\) respectively) equal to the sample first and second moments.\n\nSample first moment (the sample mean): \\(m_1 = \\frac{1}{N}\\sum_{i = 1}^N x_i\\)\nSample second moment (non-central): \\(m_2 = \\frac{1}{N} \\sum_{i = 1}^N x_i^2\\)\n\n\\[\n\\hat{\\alpha} = \\frac{n m_1 - m_2}{n (\\frac{m_2}{m_1} - m_1 - 1) + m_1}\n\\]\n\\[\n\\hat{\\beta} = \\frac{(n- m_1) (n - \\frac{m_2}{m_1})}{\nn (\\frac{m_2}{m_1} - m_1 - 1) + m_1\n}\n\\]"
  },
  {
    "objectID": "slides/lec12.html#exercise-find-the-mle",
    "href": "slides/lec12.html#exercise-find-the-mle",
    "title": "Newton-Raphson",
    "section": "Exercise: find the MLE",
    "text": "Exercise: find the MLE\n\nCode Newton-Raphson to find \\(\\hat{\\alpha}_{MLE}\\) and \\(\\hat{\\beta}_{MLE}\\) for the 19th century hospital record example here.\n\n\nx = data.frame(families = c(3, 24, 104, 286, 670, 1033, 1343, 1112,\n                            829, 478, 181, 45, 7),\n               m = seq(0, 12))\n\ny = rep(x$m, x$families) # data as we will use it\nN = sum(x$families)\nn = 12\n\n\nSolution:\n\ndownload.file(\"https://sta323-sp23.github.io/scripts/betabinomial.R\",\n              destfile = \"betabinomial.R\")\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "quizzes/quiz-regexp.html",
    "href": "quizzes/quiz-regexp.html",
    "title": "Quiz regexp",
    "section": "",
    "text": "Exercise 1\nIn a regexp, * is used to repeat what comes before it __ or more times.\n\n\nExercise 2\nThe regexp \"a{4}\" will match‚Ä¶ [short response]\n\n\nExercise 3\nFunctions in stringr begin with the prefix ___.\n\n\nExercise 4\nWhat‚Äôs wrong with the regexp below? Note: you are trying to match the ?\n\n\n\n\ntxt = \"Can you match this?\"\n\nstr_detect(txt, \"?\")\n\n\n\n\n04:00"
  },
  {
    "objectID": "slides/lec13.html#univariate-newton-raphson",
    "href": "slides/lec13.html#univariate-newton-raphson",
    "title": "Newton-Raphson",
    "section": "univariate Newton-Raphson",
    "text": "univariate Newton-Raphson\n\nIf \\(a\\) satisfies \\(f(a) = 0\\), \\(a\\) is said to be a ‚Äúfixed point‚Äù or ‚Äúroot‚Äù of the function\nNewton-Raphson is a ‚Äúroot-finding‚Äù method\nBased on first order approximation of a function, \\(\\ f(a) \\approx f(x) + f'(x)(a - x)\\)\n\nNear fixed points, the first order approximation is:\n\\[\n0 \\approx f(x) + f'(x)(a - x).\n\\]\nWe are trying to find \\(a\\), so if \\(f'(x)\\) invertible, we rearrange\n\\[\na = x - \\frac{f(x)}{f'(x)}\n\\]\n\nand the procedural update is\n\\[\nx_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)}\n\\]"
  },
  {
    "objectID": "slides/lec13.html#code-example",
    "href": "slides/lec13.html#code-example",
    "title": "Newton-Raphson",
    "section": "Code example",
    "text": "Code example\n\n\n\nIn practice, we tolerate close solutions, i.e.¬†\\(a\\) such that \\(f(a) \\approx 0\\).\n\nnewton = function(f, fp, x, tol) {\n  for (i in 1:100) {\n    x = x - f(x) / fp(x)\n    if (abs(f(x)) < tol) {\n      return(x)\n    }\n  }\n  return(x)\n}\n\n\nf = function(x) {\n  return(x ^ 3 - 5 * x + 1)\n}\n\nfp = function(x) {\n  return(3 * (x ^ 2) - 5.0)\n}\nnewton(f, fp, -2.0, 1e-14)\n\n[1] -2.330059\n\n\n\nf is the function we are finding a root of."
  },
  {
    "objectID": "slides/lec13.html#where-we-start-matters",
    "href": "slides/lec13.html#where-we-start-matters",
    "title": "Newton-Raphson",
    "section": "Where we start matters",
    "text": "Where we start matters"
  },
  {
    "objectID": "slides/lec13.html#what-can-go-wrong",
    "href": "slides/lec13.html#what-can-go-wrong",
    "title": "Newton-Raphson",
    "section": "What can go wrong",
    "text": "What can go wrong\n\nderivative not continuous at the root\nIf \\(f'(x_n)=0\\), can‚Äôt proceed\niterates can ‚Äúcycle‚Äù rather than converge to the solution\nIf \\(f'(x_n)\\) is small, but not zero, approximate solutions can diverge to infinity.\nSensitive to initial point \\(x_0\\)"
  },
  {
    "objectID": "slides/lec13.html#beta-binomial",
    "href": "slides/lec13.html#beta-binomial",
    "title": "Newton-Raphson",
    "section": "Beta-binomial",
    "text": "Beta-binomial\n\\[\nX \\sim Binomial(n, p)\n\\]\n\\[\np \\sim Beta(\\alpha, \\beta)\n\\]\nThis data-generative process models a set of \\(N\\) binomial experiments, each possibly having their own local \\(p_i\\), and local \\(n_i\\) for \\(i \\in \\{1, \\ldots N\\}\\).\n\nExample:\n\nSchuckers, ME ‚ÄúUsing the Beta-binomial distribution to assess performance of a biometric identification device‚Äù International Journal of Image and Graphics, vol.¬†3, no. 3, July 2003\n\n\n\nData:\n\n\n\n\n\nid\nn\nsuccess\n\n\n\n\n1\n9\n3\n\n\n2\n9\n0\n\n\n3\n8\n8\n\n\n4\n6\n6\n\n\n5\n9\n8"
  },
  {
    "objectID": "slides/lec13.html#beta-binomial-1",
    "href": "slides/lec13.html#beta-binomial-1",
    "title": "Newton-Raphson",
    "section": "Beta-binomial",
    "text": "Beta-binomial\n\\[\nf_x(\\mathbf{x}|\\mathbf{p}, \\mathbf{n}) =\n\\prod_{i = 1}^{N} {n_i \\choose{x_i}} p_i^{x_i}(1-p_i)^{n_i-x_i}  \n\\]\nwhere \\(\\mathbf{x} = \\{x_i \\}\\), \\(\\mathbf{p} = \\{ p_i \\}\\) and \\(\\mathbf{n} = \\{n_i \\}\\).\n\\[\nf_p(\\mathbf{p} | \\alpha, \\beta) = \\prod_{i = 1}^{N} \\frac{p_i^{\\alpha - 1} (1-p_i)^{\\beta - 1}}{B(\\alpha, \\beta)}\n\\]\nwhere \\(B(\\alpha, \\beta) = \\frac{\\Gamma(\\alpha) \\Gamma(\\beta)}{\\Gamma(\\alpha+\\beta)}\\).\n\n\n\n\n\n\nNote\n\n\n\n\\(\\Gamma\\) is the gamma function (read ?gamma and wikipedia).\nbeta() is the R function for \\(B(\\alpha, \\beta)\\).\n\n\n\n\n\nFundamentally, we are interested in the underlying Beta distribution that the \\(p_i\\) are drawn from. We don‚Äôt care about the individual \\(p_i\\) themselves. We integrate out \\(\\mathbf{p}\\),\n\\[\n\\begin{aligned}\nf_x(\\mathbf{x}|\\mathbf{n}, \\alpha, \\beta) &= \\int f_x(\\mathbf{x}, \\mathbf{p} | \\mathbf{n}, \\alpha, \\beta)\n\\ d\\mathbf{p}\\\\\n&=\n\\int\nf_x(\\mathbf{x}|\\mathbf{p}, \\mathbf{n}) f_p(\\mathbf{p} | \\alpha, \\beta)\n\\ d\\mathbf{p}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "slides/lec13.html#integrating-out-the-nuisance-parameters-continued",
    "href": "slides/lec13.html#integrating-out-the-nuisance-parameters-continued",
    "title": "Newton-Raphson",
    "section": "Integrating out the nuisance parameters continued",
    "text": "Integrating out the nuisance parameters continued\n\\[\n\\begin{aligned}\n\\int\nf_x(\\mathbf{x}|\\mathbf{p}, \\mathbf{n}) f_p(\\mathbf{p} | \\alpha, \\beta)\n\\ d\\mathbf{p} &=\n\\int\n\\prod_{i = 1}^{N} {n_i \\choose{x_i}}\n\\frac{p_i^{x_i + \\alpha - 1} (1-p_i)^{n_i - x_i +\\beta - 1}}{B(\\alpha, \\beta)}\n\\end{aligned}\nd \\mathbf{p}\n\\]\nConjugacy! This is proportional to a Beta distribution, hence\n\\[\n\\begin{aligned}\nf_x(\\mathbf{x}|\\mathbf{n}, \\alpha, \\beta) &=\n\\prod_{i = 1}^N {n_i \\choose x_i}\n\\frac{B(x_i + \\alpha, n_i - x_i +\\beta)}{B(\\alpha, \\beta)}\\\\\n&= \\prod_{i = 1}^N {n_i \\choose x_i}\n\\frac{\\Gamma(\\alpha+\\beta)}{\\Gamma(\\alpha) \\Gamma(\\beta)}\n\\frac{\\Gamma(x_i + \\alpha)\\Gamma(n_i -x_i + \\beta)}{\\Gamma(n_i + \\alpha + \\beta)}\n\\end{aligned}\n\\]\n\nThis in fact our likelihood! We can still simplify by pulling out the part that isn‚Äôt indexed by \\(i\\),\n\\[\nL(\\alpha, \\beta) =\n\\left(\\frac{\\Gamma(\\alpha+\\beta)}{\\Gamma(\\alpha) \\Gamma(\\beta)}\\right)^N \\cdot\n\\prod_{i = 1}^N {n_i \\choose x_i}\n\\frac{\\Gamma(x_i + \\alpha)\\Gamma(n_i -x_i + \\beta)}{\\Gamma(n_i + \\alpha + \\beta)}\n\\]"
  },
  {
    "objectID": "slides/lec13.html#log-likelihood",
    "href": "slides/lec13.html#log-likelihood",
    "title": "Newton-Raphson",
    "section": "Log-likelihood",
    "text": "Log-likelihood\n\\[\n\\log L = N \\left(\\log \\Gamma(\\alpha+\\beta) + \\log \\Gamma(\\alpha) -\\log\\Gamma(\\beta) \\right)+\\\\\n\\sum_{i=1}^N \\log {n_i \\choose x_i} + \\log \\Gamma(x_i + \\alpha) +\n\\log \\Gamma(n_i -x_i + \\beta) - \\log {\\Gamma(n_i + \\alpha + \\beta)}\n\\]\n\nWe want to maximize the log-likelihood.\n\n\nGradient of log-likelihood\n\nderivative of log-Gamma function is the [digamma(https://en.wikipedia.org/wiki/Digamma_function) function], often denoted by the Greek \\(\\psi\\) (‚Äúpsi‚Äù).\n\n\\[\n\\frac{\\partial}{\\partial \\alpha} \\log L = N \\left[\\psi(\\alpha + \\beta) + \\psi(\\alpha)\\right] +\n\\sum_{i=1}^N \\psi(x_i + \\alpha) - \\psi(n_i + \\alpha + \\beta)\n\\]\n\\[\n\\frac{\\partial}{\\partial \\beta}\\log L =\nN \\left[\\psi(\\alpha + \\beta) + \\psi(\\beta)\\right] + \\sum_{i=1}^N\n\\psi(n_i - x_i + \\beta) - \\psi(n_i + \\alpha + \\beta)\n\\]"
  },
  {
    "objectID": "slides/lec13.html#jacobian",
    "href": "slides/lec13.html#jacobian",
    "title": "Newton-Raphson",
    "section": "Jacobian",
    "text": "Jacobian\n\nsecond derivative of log-Gamma function is the trigamma function, often denoted by the Greek \\(\\psi_1\\) (‚Äúpsi‚Äù) with a subscript ‚Äú1‚Äù.\n\n\\[\n\\frac{\\partial^2}{\\partial \\alpha^2} \\log L = N \\left[\\psi_1(\\alpha + \\beta) + \\psi_1(\\alpha)\\right] +\n\\sum_{i=1}^N \\psi_1(x_i + \\alpha) - \\psi_1(n_i + \\alpha + \\beta)\n\\]\n\\[\n\\frac{\\partial^2}{\\partial \\beta^2}\\log L =\nN \\left[\\psi_1(\\alpha + \\beta) + \\psi_1(\\beta)\\right] + \\sum_{i=1}^N\n\\psi_1(n_i - x_i + \\beta) - \\psi_1(n_i + \\alpha + \\beta)\n\\]\n\nSame thing but with trigamma functions!\n\n\n\\[\n\\frac{\\partial^2}{\\partial \\alpha \\partial \\beta}\\log L =\nN \\left[\\psi_1(\\alpha + \\beta)\\right] - \\sum_{i=1}^N \\psi_1(n_i + \\alpha + \\beta)\n\\]\nIn general, the Jacobian,\n\\[\nJ=\\left[\\begin{array}{ccc}\n\\dfrac{\\partial f_{1}(\\mathbf{x})}{\\partial x_{1}} & \\cdots & \\dfrac{\\partial f_{1}(\\mathbf{x})}{\\partial x_{n}} \\\\\n\\vdots & \\ddots & \\vdots \\\\\n\\dfrac{\\partial f_{m}(\\mathbf{x})}{\\partial x_{1}} & \\cdots & \\dfrac{\\partial f_{m}(\\mathbf{x})}{\\partial x_{n}}\n\\end{array}\\right]\n\\]"
  },
  {
    "objectID": "slides/lec13.html#multivariate-newton-raphson",
    "href": "slides/lec13.html#multivariate-newton-raphson",
    "title": "Newton-Raphson",
    "section": "multivariate Newton-Raphson",
    "text": "multivariate Newton-Raphson\nThe same intuition applies, but in higher dimensions.\nLet \\(\\mathbf{a}\\) satisfy \\(f(\\mathbf{a}) = 0\\). - Based on first order approximation of a function, \\(\\ f(\\mathbf{a}) \\approx f(\\mathbf{x}) + f'(\\mathbf{x})(\\mathbf{a}- \\mathbf{x})\\)\nNear fixed points, the first order approximation is:\n\\[\n0 \\approx f(\\mathbf{x}) + Df(\\mathbf{x})(\\mathbf{a} - \\mathbf{x}).\n\\]\nTo find the root, we rearrange (solve for \\(\\mathbf{a}\\)) again and iterate\n\\[\n\\mathbf{x}_{n+1} = \\mathbf{x}_n - J^{-1}(\\mathbf{x}_n) f(\\mathbf{x}_n)\n\\]"
  },
  {
    "objectID": "slides/lec13.html#a-good-starting-point",
    "href": "slides/lec13.html#a-good-starting-point",
    "title": "Newton-Raphson",
    "section": "A good starting point",
    "text": "A good starting point\nMethod of moments.\nSet the moments equal to the sample mean, \\(\\bar{x}\\) and sample variance \\(s^2\\).\n\\[\n\\hat{\\alpha} = \\frac{n m_1 - m_2}{n (\\frac{m_2}{m_1} - m_1 - 1) + m_1}\n\\]\n\\[\n\\hat{\\beta} = \\frac{(n- m_1) (n - \\frac{m_2}{m_1})}{\nn (\\frac{m_2}{m_1} - m_1 - 1 + m_1)\n}\n\\]"
  },
  {
    "objectID": "slides/lec13.html#exercise-find-the-mle",
    "href": "slides/lec13.html#exercise-find-the-mle",
    "title": "Newton-Raphson",
    "section": "Exercise: find the MLE",
    "text": "Exercise: find the MLE\n\nCode Newton-Raphson to find \\(\\hat{\\alpha}_{MLE}\\) and \\(\\hat{\\beta}_{MLE}\\) for the 19th century hospital record example here.\n\n\nx = data.frame(families = c(3, 24, 104, 286, 670, 1033, 1343, 1112,\n                            829, 478, 181, 45, 7),\n               m = seq(0, 12),\n               n = rep(12, 13)) %>%\n  mutate(p = m / n)\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec13.html#definition",
    "href": "slides/lec13.html#definition",
    "title": "MM Algorithm Principles",
    "section": "Definition",
    "text": "Definition\n\n\n\n\nMM stands for ‚Äúmajorize-minimize‚Äù and ‚Äúminorize-maximize‚Äù.\nKey idea: it‚Äôs easier to optimize a surrogate function than the true objective.\n\n\nLet \\(f(\\theta)\\) be a function we wish to maximize. \\(g(\\theta | \\theta_n)\\) is a surrogate function for \\(f\\), anchored at current iterate \\(\\theta_n\\), if\n\n\\(g\\) ‚Äúminorizes‚Äù \\(f\\): \\(g(\\theta | \\theta_n) \\leq f(\\theta) \\ \\  \\forall \\ \\theta\\)\n\\(g(\\theta_n | \\theta_n) = f(\\theta_n)\\) (‚Äútangency‚Äù).\n\n\n\nEquivalently, if we wish to minimize \\(f(\\theta)\\), \\(g(\\theta | \\theta_n)\\) is a surrogate function for \\(f\\), anchored at current iterate \\(\\theta_n\\), if\n\n\\(g\\) ‚Äúmajorizes‚Äù \\(f\\): \\(g(\\theta | \\theta_n) \\geq f(\\theta) \\ \\  \\forall \\ \\theta\\)\n\\(g(\\theta_n | \\theta_n) = f(\\theta_n)\\) (‚Äútangency‚Äù)."
  },
  {
    "objectID": "slides/lec13.html#section",
    "href": "slides/lec13.html#section",
    "title": "MM Algorithm Principles",
    "section": "",
    "text": "üîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec13.html#toy-example",
    "href": "slides/lec13.html#toy-example",
    "title": "MM Algorithm",
    "section": "Toy example",
    "text": "Toy example\nWe wish to minimize \\(f(\\theta) = cos(\\theta)\\).\n\nWe need a surrogate \\(g\\) that majorizes \\(f\\).\n\n\n\n$g(| _n) = $\n\n\nggplot() +\n  xlim(0, 2*pi) +\n  geom_function(fun = cos) +\n  labs(x = expression(theta), y = \"f\") +\n  theme_bw()\n\n\n\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec13.html#toy-conceptual-example",
    "href": "slides/lec13.html#toy-conceptual-example",
    "title": "MM Algorithm Principles",
    "section": "Toy (conceptual) example",
    "text": "Toy (conceptual) example\nWe wish to minimize \\(f(x) = cos(x)\\).\n\nWe need a surrogate \\(g\\) that majorizes \\(f\\).\n\n\n\\[\ng(x | x_n) = cos(x_n) - sin(x_n)(x - x_n) +\n\\frac{1}{2}(x - x_n)^2\n\\]\n\n\nWe can minimize \\(g\\) easily, \\(\\frac{d}{dx}g(x | x_n) = -sin(x_n) + (x - x_n)\\).\nNext, set equal to zero and set \\(x_{n+1} = x\\), \\(x_{n+1} = x_n + sin(x_n)\\)."
  },
  {
    "objectID": "slides/lec13.html#how-did-we-find-g",
    "href": "slides/lec13.html#how-did-we-find-g",
    "title": "MM Algorithm Principles",
    "section": "How did we find \\(g\\)?",
    "text": "How did we find \\(g\\)?\nFinding \\(g\\) is an art. Still, there are widely applicable and powerful tools everyone should have in their toolkit."
  },
  {
    "objectID": "slides/lec13.html#tool-for-convex-functions",
    "href": "slides/lec13.html#tool-for-convex-functions",
    "title": "MM Algorithm",
    "section": "Tool for convex functions",
    "text": "Tool for convex functions\n\nA twice-differentiable function is convex iff \\(f''(x) \\geq 0\\). Common examples include \\(f(x) = x^2\\) and \\(f(x) = e^x\\).\n\n\nEquivalently, a function is convex if its epigraph (the points in the region above the graph of the function) form a convex set. For example, \\(f(x) = |x|\\) is convex by the epigraph test.\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec13.html#jensens-inequality",
    "href": "slides/lec13.html#jensens-inequality",
    "title": "MM Algorithm Principles",
    "section": "Jensen‚Äôs inequality",
    "text": "Jensen‚Äôs inequality\nFor a convex function \\(f\\), Jensen‚Äôs inequality states\n\\[\nf(\\alpha x + (1 - \\alpha) y) \\leq \\alpha f(x) + (1-\\alpha) f(y), \\ \\  \\alpha \\in [0, 1]\n\\]\n\n\n\nBig use: majorizing functions of the form \\(f(u(x) + v(x))\\) where \\(u\\) and \\(v\\) are positive functions of parameter \\(x\\).\n\n\\[\nf(u + v) \\leq \\frac{u_n}{u_n + v_n} f\\left(\\frac{u_n + v_n}{u_n} u\\right) +\n\\frac{v_n}{u_n + v_n} f\\left(\\frac{u_n + v_n}{v_n}v\\right)\n\\]"
  },
  {
    "objectID": "slides/lec13.html#convex-functions",
    "href": "slides/lec13.html#convex-functions",
    "title": "MM Algorithm Principles",
    "section": "Convex functions",
    "text": "Convex functions\n\nA twice-differentiable function is convex iff \\(f''(x) \\geq 0\\). Common examples include \\(f(x) = x^2\\), \\(f(x) = e^x\\) and \\(f(x) = -\\ln(x)\\).\n\n\nEquivalently, a function is convex if its epigraph (the points in the region above the graph of the function) form a convex set. For example, \\(f(x) = |x|\\) is convex by the epigraph test.\n\n\n\n\n\n\n\n\n\n\n\nA function is concave iff its negative is convex."
  },
  {
    "objectID": "slides/lec13.html#quadratic-upper-bound-principle",
    "href": "slides/lec13.html#quadratic-upper-bound-principle",
    "title": "MM Algorithm Principles",
    "section": "Quadratic upper bound principle",
    "text": "Quadratic upper bound principle\nObjective function: \\(f(x)\\)\n\nsecond order Taylor expansion of \\(f\\) around \\(x_n\\):\n\\[\nf(x) = f(x_n) + f'(x_n) (x-x_n) + \\frac{1}{2} f''(y) (x - x_n)^2\n\\]\nHere, \\(y\\) lies between \\(x\\) and \\(x_n\\). If \\(f''(y) \\leq B\\) where \\(B\\) is a positive constant, then\n\\[\ng(x|x_n) = f(x_n) + f'(x_n) (x - x_n) + \\frac{1}{2} B (x - x_n)^2\n\\]\nThis is the ‚Äúquadratic upper bound‚Äù.\n\n\nCheck your understanding\n\nQuestionsAnswers\n\n\n\ndoes \\(g\\) satisfy the tangency condition?\ndoes \\(g\\) majorize or minorize \\(f\\)?\nwhat is \\(B\\) in the previous (\\(f = cos(x)\\)) example?\nwhat is the general update \\(x_{n+1} =\\) to under the quadratic upper bound principle?\n\n\n\n\nyes\nmajorize\n1\n\\(x_{n+1} = x_n - f'(x_n) / B\\)"
  },
  {
    "objectID": "slides/lec13.html#supporting-line-minorization",
    "href": "slides/lec13.html#supporting-line-minorization",
    "title": "MM Algorithm Principles",
    "section": "Supporting line minorization",
    "text": "Supporting line minorization\n\n\n\\(f(x) \\geq f(x_n) + f'(x_n) (x - x_n)\\) because \\(f''(x_n) \\geq 0\\)\n\n\nCheck your understanding\n\nWrite the equation of the line in this example"
  },
  {
    "objectID": "slides/lec13.html#exercise",
    "href": "slides/lec13.html#exercise",
    "title": "MM Algorithm Principles",
    "section": "Exercise",
    "text": "Exercise\npart 1\n\nUsing \\(f(x) = -\\ln(x)\\) show that Jensen‚Äôs inequality let‚Äôs us derive a minorization that splits the log of a sum.\nNote: this minorization will be useful in maximum likelihood estimation under a mixture model\n\npart 2\nTo see why this will be useful, recall: in a mixture model we have a convex combination of density functions:\n\\[\nh(x | \\mathbf{w}, \\boldsymbol{\\theta}) = \\sum_{i = 1}^n w_i~f_i(x | \\theta_i).\n\\]\nwhere \\(w_i > 0\\) and \\(\\sum_i w_i = 1\\).\n\nAssume you observe \\(\\{x_1, \\ldots x_m\\}\\) where each \\(X_i\\) is iid from \\(h(\\mathbf{x})\\). Write down the log-likelihood of the data."
  },
  {
    "objectID": "slides/lec13.html#acknowledgements",
    "href": "slides/lec13.html#acknowledgements",
    "title": "MM Algorithm Principles",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nContent of this lecture based on chapter 1 of Dr.¬†Ken Lange‚Äôs MM Optimization Algorithms.\n\nLange, Kenneth. MM Optimization Algorithms. Society for Industrial and Applied Mathematics, 2016.\n\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "project",
    "section": "",
    "text": "Final project presentations will take place in-person in lab Tuesday April 25th\nThe report and completed GitHub repo is due Wednesday April 26th at 5:00pm\n\n\n\n\n\n\n\nImportant\n\n\n\nNo late work will be accepted."
  },
  {
    "objectID": "project.html#criteria",
    "href": "project.html#criteria",
    "title": "project",
    "section": "Criteria",
    "text": "Criteria\nThe final project has three deliverables:\n\na written report describing your project\na GitHub repo with clear instructions in the README to reproduce all of your results\na final presentation during the last lab session of the semester (slides, chalk-talk, up to you)\n\nThe project report should be no longer than 10 pages, including text, code, figures, and other output. If your report is longer, you need to make it shorter. There is no minimum report length or required section headers.\nYour report should be professionally formatted (e.g.¬†consistent citation style, no raw r code output and following formatting guidelines consistent with other assignments in the course)."
  },
  {
    "objectID": "project.html#project-description",
    "href": "project.html#project-description",
    "title": "project",
    "section": "Project description",
    "text": "Project description\nThe goal of the final project is to demonstrate mastery of material learned in this class. An additional goal of the final project is to give you experience working in a team-based development setting.\nThe final project is purposefully open-ended. You may choose to demonstrate mastery of any element of the course. Possible final projects include:\n\nFind a data set of interest, write down a data-generative model and fit the model to the data (e.g compute the MLEs of parameters using numerical methods discussed in class)\nBuild a shiny app that does something useful. For example your app may help you analyze data, illustrate an algorithm, etc.\nProcure or find a messy data set and write a hypothesis you can investigate with the data. Next tidy, clean and wrangle the data. Finally create effective visualization(s) using advanced ggplot methods discussed in class to answer your question.\nSomething not listed here, e.g.¬†implement an algorithm from a paper. Please reach out to Dr.¬†Fisher if you are unsure whether your proposed idea is a good fit for the final project.\n\n\n\n\n\n\n\nReminder\n\n\n\nAll team members should be prepared to describe all aspects of the project.\nTeam work policy from the syllabus:\n\nThe final project and several labs will be completed in teams. All group members are expected to participate equally. Commit history may be used to give individual team members different grades. Your grade may differ from the rest of your group."
  },
  {
    "objectID": "project.html#rubric",
    "href": "project.html#rubric",
    "title": "project",
    "section": "Rubric",
    "text": "Rubric\nThe project is graded out of a 100 point total\n\nreport 60pts\nThe report should clearly motivate the project, explain the aim, results and conclusions within a strict 10 page limit. In the written report be sure to:\n\nBe concise with your language. Say what you need to in as few words as possible to be effective.\nExplicitly write out any math (e.g.¬†likelihood or model etc.)\nCritique your own analyses and/or discuss future improvements\nList a brief (1 or 2 sentence) summary of the relative contributions of each team member. E.g. ‚ÄúAang built the models, Katara implemented them in R, and Sokka wrote the introduction and discussion.‚Äù\n\n\n\npresentation 25pts\nThe presentation should clearly motivate the project, explain the aim, results and conclusions within a strict 6 minute time-limit. Presentations should be between 5 and 6 minutes.\n\nChoices made (e.g.¬†using a specific model, using a specific plot geometry) should be defensible. You should be prepared to defend your choice of model/plot/etc. during Q&A.\n\n\n\nreproducibility 15pts\n\nREADME should describe the project briefly and detail how to reproduce the results\nAll files to reproduce the work should be in the GitHub repo\nNo rendered/generated files (pdf) should be in the repo unless necessary (shiny app, website html, etc.)"
  },
  {
    "objectID": "slides/lec14.html#announcements",
    "href": "slides/lec14.html#announcements",
    "title": "MM Algorithm Example",
    "section": "Announcements",
    "text": "Announcements\n\nproject instructions released"
  },
  {
    "objectID": "slides/lec14.html#constrained",
    "href": "slides/lec14.html#constrained",
    "title": "MM Algorithm Examples",
    "section": "Constrained",
    "text": "Constrained"
  },
  {
    "objectID": "slides/lec14.html#acknowledgements",
    "href": "slides/lec14.html#acknowledgements",
    "title": "MM Algorithm Example",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nContent of this lecture based on chapter 1 of Dr.¬†Ken Lange‚Äôs MM Optimization Algorithms.\n\nLange, Kenneth. MM Optimization Algorithms. Society for Industrial and Applied Mathematics, 2016."
  },
  {
    "objectID": "slides/lec14.html#bradley-terry-model",
    "href": "slides/lec14.html#bradley-terry-model",
    "title": "MM Algorithm Example",
    "section": "Bradley-Terry model",
    "text": "Bradley-Terry model\n\nPredicts the outcome of a paired comparison.\n\n\nGiven two individuals \\(i\\) and \\(j\\) drawn from some population, the Bradley-Terry model estimates the probability that the pairwise comparison \\(i > j\\) turns out true, as\n\\[\nPr(i > j) = \\frac{p_i}{p_i + p_j},\n\\]\nwhere \\(p_i\\) is a positive real-valued score assigned to individual i. The comparison \\(i > j\\) can be read as ‚Äú\\(i\\) is preferred to \\(j\\)‚Äù, ‚Äú\\(i\\) ranks higher than \\(j\\)‚Äù, or ‚Äú\\(i\\) beats \\(j\\)‚Äù, depending on the application."
  },
  {
    "objectID": "slides/lec14.html#bradley-terry-application",
    "href": "slides/lec14.html#bradley-terry-application",
    "title": "MM Algorithm Example",
    "section": "Bradley-Terry Application",
    "text": "Bradley-Terry Application\nOne popular application of the Bradley-Terry model is ranking sports teams. We are interested modeling the outcome of previous match ups.\nExample data:\n\n\n\nAll 1230 regular season NBA games (82 games per team, 30 teams: 82 * 30 /2) from 2015-2016.1\n\n\nRows: 1,230\nColumns: 3\n$ Home <dbl> 1, 5, 10, 22, 2, 3, 9, 16, 28, 11, 15, 17, 21, 24, 25, 26, 14, 12‚Ä¶\n$ Away <dbl> 9, 6, 19, 30, 23, 5, 29, 4, 12, 8, 6, 20, 27, 7, 19, 13, 18, 15, ‚Ä¶\n$ Y    <dbl> 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1,‚Ä¶\n\n\nCode book:\n\nHome: unique id for home team\nAway: unique id for away team\nY: whether the home team won (1) or lost (0)\n\n\nRead in this data:\n\nNBA = read_csv(\"https://sta323-sp23.github.io/data/NBA_1516.csv\")\nteam_id = read_csv(\"https://sta323-sp23.github.io/data/teams.csv\")\n\n\ndata sourced from Dr.¬†Zhou Fan‚Äôs inference course here"
  },
  {
    "objectID": "slides/lec14.html#bradley-terry-log-likelihood",
    "href": "slides/lec14.html#bradley-terry-log-likelihood",
    "title": "MM Algorithm Examples",
    "section": "Bradley-Terry log-likelihood",
    "text": "Bradley-Terry log-likelihood\nLet \\(L\\) be the ‚Äúlikelihood‚Äù.\n\\[\n\\log L(\\mathbf{p}) = \\sum_{i = 1}^n\n\\]"
  },
  {
    "objectID": "slides/lec14.html#next",
    "href": "slides/lec14.html#next",
    "title": "MM Algorithm Examples",
    "section": "Next",
    "text": "Next"
  },
  {
    "objectID": "slides/lec14.html#bradley-terry-with-home-court-advantage",
    "href": "slides/lec14.html#bradley-terry-with-home-court-advantage",
    "title": "MM Algorithm Example",
    "section": "Bradley-Terry with home-court advantage",
    "text": "Bradley-Terry with home-court advantage\nThe most basic Bradley-Terry model does not account for ties, which is fine for our basketball example. However, it would be nice to model and assess the contribution of home-court advantage.\n\\[\n\\text{Pr(i beats j at home)} = \\frac{\\theta p_i}{\\theta p_i + p_j}\n\\]\n\\[\n\\text{Pr(i loses to j at home)} = \\frac{p_j}{\\theta p_i + p_j}.\n\\]\nHere, \\(\\theta \\in \\mathbb{R}^+\\) corresponds to home-court advantage.\n\nCheck your understanding\n\nWhat does \\(\\theta = 0\\) and \\(\\theta = 1\\) correspond to?\nWhat assumptions have we made about home-court advantage in this model?"
  },
  {
    "objectID": "slides/lec14.html#bradley-terry-likelihood",
    "href": "slides/lec14.html#bradley-terry-likelihood",
    "title": "MM Algorithm Example",
    "section": "Bradley-Terry likelihood",
    "text": "Bradley-Terry likelihood\nLet \\(a_{ij}\\) be the number of times team \\(i\\) beats team \\(j\\) at home and let \\(b_{ij}\\) be the number of times team \\(i\\) loses to team \\(j\\) at home. Assuming all the games are independent, we write the log-likelihood of the Bradley Terry model with home-court advantage,\n\\[\n\\log L(\\mathbf{p}, \\theta) = \\sum_{i} \\sum_{j} a_{ij} \\log \\left( \\frac{\\theta p_i}{\\theta p_i + p_j} \\right)\n+ b_{ij} \\log \\left(\\frac{p_j}{\\theta p_i + p_j} \\right)\n\\]\n\nLet \\(w_i\\) be the total number of wins by team \\(i\\) and let \\(h = \\sum_{i} \\sum_{j} a_{ij}\\) be the total number of home-court wins across all teams.\nWe can re-formulate the log-likelihood,\n\\[\n\\log L(\\mathbf{p}, \\theta) = h \\log \\theta + \\sum_{i} w_i \\log p_i - \\sum_{i} \\sum_{j} (a_{ij} + b_{ij}) \\log (\\theta p_i + p_j)\n\\]\n\n\nHint for algebra: \\(\\sum_i w_i \\log p_i= \\sum_i \\sum_j \\left[a_{ij} \\log p_i + b_{ij} \\log p_j \\right]\\). To see this derived in extra detail, see here.\n\n\nReminder\n\nWe are interested in estimating the home-court advantage parameter \\(\\theta\\) and team ranking parameters \\(\\mathbf{p} = \\{p_1, \\ldots, p_n\\}\\) where \\(n\\) is the total number of teams. The team with the largest \\(\\hat{p_i}\\) will be the best team."
  },
  {
    "objectID": "slides/lec14.html#minorize-maximize-the-likelihood",
    "href": "slides/lec14.html#minorize-maximize-the-likelihood",
    "title": "MM Algorithm Example",
    "section": "Minorize-maximize the likelihood",
    "text": "Minorize-maximize the likelihood\nNotice\n\nAs a side note, notice that the team rank parameter \\(\\mathbf{p}\\) is invariant to re-scaling in the log-likelihood. In other words, we can scale all \\(p_i\\) by a constant and obtain the same rank order of the estimates. Without loss of generality, we can set \\(p_1\\) = c and then all other team rankings will be defined relative to the first team. This is a way we can eliminate 1 degree of freedom in our model parameters.\n\nBy the supporting line minorization\n\\[\n- \\log (\\theta p_i + p_j) \\geq - \\log (\\theta_n p_{ni} + p_{nj}) -\n\\frac{(\\theta p_i + p_j) - (\\theta_n p_{ni} + p_{nj})}{\\theta_n p_{ni} + p_{nj}}\n\\]\nIf we instead subtract the RHS, we are subtracting something ‚Äòsmaller‚Äô from our log-likelihood. In other words, the log-likelihood dominates \\(g\\) where\n\\[\ng(\\mathbf{p}, \\theta | \\mathbf{p}_n, \\theta_n) = h \\log \\theta + \\sum_i \\log p_i - \\sum_i \\sum_j\n\\frac{(a_{ij} + b_{ij}) (\\theta p_i + p_j)}{\\theta_n p_{ni} + p_{nj}}\n\\]\nwhere we‚Äôve dropped the irrelevant constant."
  },
  {
    "objectID": "slides/lec14.html#iterate",
    "href": "slides/lec14.html#iterate",
    "title": "MM Algorithm Example",
    "section": "Iterate",
    "text": "Iterate\nNow we can optimize our surrogate \\(g\\), instead of the objective function by setting the \\(\\nabla g = 0\\). The \\(\\theta p_i\\) term prevents direct optimization. Instead, we perform cyclic block ascent. That is, we update \\(\\theta\\) holding \\(\\mathbf{p}\\) fixed and we update each \\(p_i\\) holding all other parameters fixed.\n\nTo proceed, update\n\\[\n\\theta_{n + 1} = \\frac{h}{\\sum_i \\sum_j \\frac{p_{ni}(a_{ij} + b_{ij})}{\\theta_n p_{ni} + p_{nj}}}\n\\]\nand then update each\n\\[\np_{n+1, i} = \\frac{w_i}{\n\\sum_j \\frac{\\theta_{n+1}(a_{ij} + b_{ij})}{\\theta_{n+1} p_{ni} + p_{nj}}\n+ \\sum_j \\frac{(a_{ji} + b_{ji})}{\\theta_{n+1} p_{nj} + p_{ni}}\n}.\n\\]\nCrucially cyclic block ascent preserves the ascent property, that is, for objective function \\(f\\), iterates \\(f(x_{n+1}) \\geq f(x_n)\\) when \\(g\\) minorizes \\(f\\).\n\n\nCheck your understanding\n\nShow the ‚Äúascent‚Äù property of the Minorize-Maximize algorithm algebraically."
  },
  {
    "objectID": "slides/lec14.html#exercise",
    "href": "slides/lec14.html#exercise",
    "title": "MM Algorithm Example",
    "section": "Exercise",
    "text": "Exercise\nTo be completed in the next lab‚Ä¶ but we‚Äôll get started in class:\nImplement the MM algorithm as described on the previous slide for the NBA data. Your implementation should be able to be adapted to another data set of identical construction (i.e.¬†don‚Äôt hard-code values).\nWhat are the ten highest ranked teams (in order) from the 2015-2016 season according to the Bradley Terry model?\nIs there a home-court advantage? What are the odds of winning at home vs away?"
  },
  {
    "objectID": "slides/lec14.html#exercise-1",
    "href": "slides/lec14.html#exercise-1",
    "title": "MM Algorithm Example",
    "section": "Exercise 1",
    "text": "Exercise 1\n\nShow the ‚Äúascent‚Äù property of the Minorize-Maximize algorithm. That is, show that for objective function \\(f\\), iterates \\(f(x_{n+1}) \\geq f(x_n)\\) when \\(g\\) minorizes \\(f\\)."
  },
  {
    "objectID": "slides/lec14.html#exercise-2",
    "href": "slides/lec14.html#exercise-2",
    "title": "MM Algorithm Example",
    "section": "Exercise 2",
    "text": "Exercise 2\nTo be completed in the next lab‚Ä¶ but we‚Äôll get started in class:\nImplement the MM algorithm as described on the previous slide for NBA data.\nWhat are the ten highest ranked teams (in order) from the 2015-2016 season according to the Bradley Terry model?\nIs there a home-field advantage? What are the odds of winning at home vs away?"
  },
  {
    "objectID": "slides/lec14.html#test-hidden-slide",
    "href": "slides/lec14.html#test-hidden-slide",
    "title": "MM Algorithm Example",
    "section": "Test hidden slide",
    "text": "Test hidden slide\n\nMaterial here."
  },
  {
    "objectID": "slides/lec14.html#algebra-trick",
    "href": "slides/lec14.html#algebra-trick",
    "title": "MM Algorithm Example",
    "section": "Algebra trick",
    "text": "Algebra trick\n\\[\n\\begin{aligned}\n&\\sum_i \\sum_j a_{ij} \\log p_i + b_{ij} \\log p_j = \\sum_i \\log p_i \\sum_j a_{ij} + \\sum_j \\log p_j \\sum_i b_{ij}\\\\\n\\end{aligned}\n\\]\nNotice \\(\\sum_j a_{ij}\\) is the number of wins of team \\(i\\) at home. We‚Äôll call this term \\(\\alpha_i\\). Similarly, \\(\\sum_i b_{ij}\\) is the number of wins of team \\(j\\) away. We‚Äôll call this term \\(\\beta_j\\).\nSo we have,\n\\[\n\\sum_i \\alpha_i \\log p_i + \\sum_j \\beta_j \\log p_j\n\\]\nSince \\(i\\) and \\(j\\) are both summations from \\(1\\) to \\(n\\), where \\(n\\) is the number of teams, we can equivalently write these with the same index:\n\\[\n\\sum_i (\\alpha_i + \\beta_i) \\log p_i\n\\]\nwhere \\(\\alpha_i\\) is the number of wins of team \\(i\\) at home and \\(\\beta_i\\) is the number of wins of team \\(i\\) away. So \\(\\alpha_i + \\beta_i = w_i\\).\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec15.html#announcements",
    "href": "slides/lec15.html#announcements",
    "title": "EM algorithm",
    "section": "Announcements",
    "text": "Announcements\n\nReminder: project announced before spring break.\nExam 2 March 31st."
  },
  {
    "objectID": "slides/lec15.html#definition",
    "href": "slides/lec15.html#definition",
    "title": "EM algorithm",
    "section": "Definition",
    "text": "Definition\n\nExpectation-maximization ‚ÄúEM‚Äù is a special case of the MM algorithm.\nFundamentally, we still wish to maximize an objective function \\(f\\) and we need to come up with a surrogate \\(g\\) that minorizes \\(f\\).\nthe common example we‚Äôll re-visit is maximum likelihood estimation\n\n\nMLE\n\nLet \\(f_y(y | \\theta)\\) be the likelihood of observed data \\(y\\) given some vector of parameters \\(\\theta\\).\nLet \\(f_x(X|\\theta)\\) is the likelihood of the complete data \\(x\\) given \\(\\theta\\). Typically \\(y \\subset x\\). Under this paradigm, some data \\(z = x \\setminus y\\) are missing. Data may be missing in the ordinary sense of dropped observations or in an abstract sense that makes estimation easier.\n\nClaim:\n\\[\ng(\\theta | \\theta_n) = \\mathbb{E} [\\log f_x(X | \\theta) \\ | \\ Y = y, \\theta_n]\n\\]\nminorizes the log-likelihood \\(\\ell = \\log f_y(y | \\theta)\\)."
  },
  {
    "objectID": "slides/lec15.html#specialization-of-mm",
    "href": "slides/lec15.html#specialization-of-mm",
    "title": "EM algorithm",
    "section": "Specialization of MM",
    "text": "Specialization of MM"
  },
  {
    "objectID": "slides/lec15.html#toy-example",
    "href": "slides/lec15.html#toy-example",
    "title": "EM algorithm",
    "section": "Toy example",
    "text": "Toy example"
  },
  {
    "objectID": "slides/lec15.html#derivation",
    "href": "slides/lec15.html#derivation",
    "title": "EM algorithm",
    "section": "Derivation",
    "text": "Derivation\n\nlet \\(s(y | \\theta)\\) be the observed data likelihood.\nlet \\(r(x | \\theta)\\) be the complete data likelihood.\n\nThe conditional density of \\(x\\) given \\(y\\),\n\\[\n\\frac{r(x | \\theta)}{s(y|\\theta)}\n\\]"
  },
  {
    "objectID": "slides/lec15.html#section",
    "href": "slides/lec15.html#section",
    "title": "EM algorithm",
    "section": "",
    "text": "key idea\nSuppose some of our data is missing. Data may be missing in the ordinary sense of dropped observations or in an abstract sense that makes estimation easier.\nLet \\(\\ell\\) be the log-likelihood of the observed data \\(y\\). \\(\\ell(y | \\theta)\\).\nConsider observed data \\(y\\). Typically we write down the likelihood as \\(L(\\theta)\\) where \\(\\theta\\) represents the unknown vector of parameters we wish to estimate.\nidea\nLet \\(x\\) represent the complete data, i.e.¬†\\(y \\subset x\\). Under this paradigm, some data \\(z = x \\setminus y\\) are missing. Data may be missing in the ordinary sense of dropped observations or in an abstract sense that makes estimation easier.\nThe EM principle lets us maximize a surrogate function of the complete data log-likelihood instead of a surrogate function of the observed data log-likelihood."
  },
  {
    "objectID": "slides/lec15.html#intro-to-em",
    "href": "slides/lec15.html#intro-to-em",
    "title": "EM algorithm",
    "section": "Intro to EM",
    "text": "Intro to EM\n\nExpectation-maximization ‚ÄúEM‚Äù is a special case of the MM algorithm.\nFundamentally, we still wish to maximize an objective function \\(f\\) and we need to come up with a surrogate \\(g\\) that minorizes \\(f\\).\nthe common example we‚Äôll re-visit is maximum likelihood estimation\n\n\n\n\n\n\n\n\nNote\n\n\nIn the EM literature, the surrogate is often labeled ‚ÄúQ‚Äù. We will use ‚ÄúQ‚Äù as well."
  },
  {
    "objectID": "slides/lec15.html#deriving-the-minorization-background",
    "href": "slides/lec15.html#deriving-the-minorization-background",
    "title": "EM algorithm",
    "section": "Deriving the minorization: background",
    "text": "Deriving the minorization: background\nInformation inequality (Gibb‚Äôs inequality)\nSuppose \\(p(\\mathbf{x})\\) and \\(q(\\mathbf{x})\\) are probability densities.\n\\[\nD_{KL}(p || q)  = \\int\np(\\mathbf{x})\n\\ln \\frac{p(\\mathbf{x})}{q(\\mathbf{x})}\nd\\mathbf{x}\n\\geq 0\n\\]"
  },
  {
    "objectID": "slides/lec15.html#deriving-the-minorization",
    "href": "slides/lec15.html#deriving-the-minorization",
    "title": "EM algorithm",
    "section": "Deriving the minorization",
    "text": "Deriving the minorization\nkey idea\nSuppose some of our data is missing. Data may be missing in the ordinary sense of dropped observations or in an abstract sense that makes estimation easier.\nLet \\(\\ell\\) be the log-likelihood of the observed data \\(y\\). \\(\\ell(y | \\theta)\\).\nConsider observed data \\(y\\). Typically we write down the likelihood as \\(L(\\theta)\\) where \\(\\theta\\) represents the unknown vector of parameters we wish to estimate.\nidea\nLet \\(x\\) represent the complete data, i.e.¬†\\(y \\subset x\\). Under this paradigm, some data \\(z = x \\setminus y\\) are missing. Data may be missing in the ordinary sense of dropped observations or in an abstract sense that makes estimation easier.\nThe EM principle lets us maximize a surrogate function of the complete data log-likelihood instead of a surrogate function of the observed data log-likelihood."
  },
  {
    "objectID": "slides/lec15.html#information-inequality-gibbs-inequality",
    "href": "slides/lec15.html#information-inequality-gibbs-inequality",
    "title": "EM algorithm",
    "section": "Information inequality (Gibb‚Äôs inequality)",
    "text": "Information inequality (Gibb‚Äôs inequality)\nTo motivate the surrogate function, we‚Äôll need one additional inequality in our toolkit.\nSuppose \\(p(x)\\) and \\(q(x)\\) are probability densities.\n\\[\nD_{KL}(p || q)  = \\int\np(x)\n\\ln \\frac{p(x)}{q(x)}\ndx\n\\geq 0\n\\]\n\nSaid another way,\n\\[\n\\int p(x) \\ln p(x) dx - \\int p(x) \\ln q(x) dx \\geq 0.\n\\]\n\n\nSaid yet another way,\n\\[\n\\mathbb{E_p}\\left[\n\\ln p(x)\n\\right]\n\\geq\n\\mathbb{E_p}\\left[\n\\ln q(x)\n\\right]\n\\]"
  },
  {
    "objectID": "slides/lec15.html#checking-the-minorization",
    "href": "slides/lec15.html#checking-the-minorization",
    "title": "EM algorithm",
    "section": "Checking the minorization",
    "text": "Checking the minorization\nClaim\n\\[\ng(\\theta | \\theta_n) = \\mathbb{E} [\\log h(x | \\theta) \\ | \\ y, \\theta_n]\n\\]\nminorizes the log-likelihood \\(\\log L(\\theta) = \\log f(y | \\theta)\\).\n\nProof\n\\[\n\\mathbb{E} [\\log h(x | \\theta) \\ | \\ y, \\theta_n] =\n\\int h(x|\\theta) \\log h(x|\\theta) dx\n\\]"
  },
  {
    "objectID": "slides/lec15.html#em-mle",
    "href": "slides/lec15.html#em-mle",
    "title": "EM algorithm",
    "section": "EM MLE",
    "text": "EM MLE\n\nLet \\(f(y | \\theta)\\) be the likelihood of observed data \\(y\\) given some vector of parameters \\(\\theta\\).\nLet \\(h(x|\\theta)\\) be the likelihood of the complete data \\(x\\) given \\(\\theta\\). Typically \\(y \\subset x\\). Under this paradigm, some data \\(z = x \\setminus y\\) are missing. Data may be missing in the ordinary sense of dropped observations or in an abstract sense that makes estimation easier.\n\n\nSurrogate\n\\[\nQ(\\theta | \\theta_n) = \\mathbb{E} [\\log h(x | \\theta) \\ | \\ y, \\theta_n]\n\\]\nminorizes the log-likelihood \\(\\log L(\\theta) = \\log f(y | \\theta)\\).\n\n\n\n\n\n\n\n\nNote\n\n\nThe surrogate is defined as an expected alue.\n\n\n\nThe algorithm proceed by iterating two steps:\n\ncompute the expectation to find the surrogate function \\(Q(\\theta | \\theta_n)\\).\nmaximize the surrogate."
  },
  {
    "objectID": "slides/lec15.html#verifying-the-surrogate",
    "href": "slides/lec15.html#verifying-the-surrogate",
    "title": "EM algorithm",
    "section": "Verifying the surrogate",
    "text": "Verifying the surrogate\nClaim\n\\[\nQ(\\theta | \\theta_n) = \\mathbb{E} [\\log h(x | \\theta) \\ | \\ y, \\theta_n]\n\\]\nminorizes the log-likelihood \\(\\log L(\\theta) = \\log f(y | \\theta)\\).\nProof\n\n\nAssume the complete data \\(x = (y, z)\\), where \\(y\\) is observed and \\(z\\) is missing.\n\n\\[\nf(y|\\theta) = \\frac{h(y,z|\\theta)}{g(z|y, \\theta)}\n\\]\nby Bayes‚Äô theorem.\n\n\n\nLog both sides and take the expectation using current iterate \\(\\theta_n\\) to parameterize the density of the missing data.\n\n\\[\n\\underbrace{\\log f(y|\\theta)}_{L(\\theta)} = \\underbrace{\\int g(z|y, \\theta_n) \\log h(y,z |\\theta) dz}_{Q(\\theta|\\theta_n)} - \\underbrace{\\int g(z|y, \\theta_n) \\log g(z|y, \\theta) dz}_{R(\\theta|\\theta_n)}\n\\]\n\n\nSince true \\(\\forall \\  \\theta\\), also true for \\(\\theta_n\\),\n\\[\nL(\\theta_n) = {Q(\\theta_n|\\theta_n)} - {R(\\theta_n|\\theta_n)}\n\\]"
  },
  {
    "objectID": "slides/lec15.html#verification-continued",
    "href": "slides/lec15.html#verification-continued",
    "title": "EM algorithm",
    "section": "Verification continued",
    "text": "Verification continued\n\nForm the difference \\(L(\\theta) - L(\\theta_n)\\).\n\n\\[\nL(\\theta) - L(\\theta_n) = {Q(\\theta|\\theta_n)} - {Q(\\theta_n|\\theta_n)}\n\\underbrace{- \\left[{R(\\theta|\\theta_n)} - {R(\\theta_n|\\theta_n)}\\right]}_{\n\\geq~0 \\text{ by Gibb's inequality}\n}\n\\]\nnotice the negative sign is included here.\n\n\nDrop the positive term for inequality.\n\n\\[\nL(\\theta) - L(\\theta_n) \\geq {Q(\\theta|\\theta_n)} - {Q(\\theta_n|\\theta_n)}\n\\]\nand re-arrange\n\\[\nL(\\theta) \\geq {Q(\\theta|\\theta_n)} - {Q(\\theta_n|\\theta_n)} + L(\\theta_n)\n\\]\nto see that the log-likelihood dominates the surrogate up to an irrelevant constant."
  },
  {
    "objectID": "slides/lec15.html#allele-frequency-estimation",
    "href": "slides/lec15.html#allele-frequency-estimation",
    "title": "EM algorithm",
    "section": "Allele frequency estimation",
    "text": "Allele frequency estimation\n\n\nüîó sta323-sp23.github.io"
  },
  {
    "objectID": "slides/lec15.html#censored-data",
    "href": "slides/lec15.html#censored-data",
    "title": "EM algorithm",
    "section": "Censored data",
    "text": "Censored data\n\n\n\n\n\n\n\n\nMiles at which breaks fail (thousands)\n\n\n\n\n100.000\n\n\n37.044\n\n\n7.254\n\n\n40.211\n\n\n\n\n\nLet \\(x\\) be the number of miles (in thousands) at which a car‚Äôs breaks fail. Measurements stop after 100 thousand miles, thus the data is right-censored.\nWe model the lifetime of a car‚Äôs breaks as an exponential random variable with unknown rate of failure \\(\\lambda\\).\n\nLet \\(N\\) be the total number of observations. The complete data contains both observed and unobserved lifetimes. \\(N = N_o + N_c\\) where \\(N_o\\) is the number of break failures actually observed (\\(x < 100\\)) and \\(N_c\\) is the number of censored data points.\nComplete data likelihood\n\\[\n\\prod_{i = 1}^{N} \\lambda e^{-\\lambda x_i}\n\\]"
  },
  {
    "objectID": "slides/lec15.html#the-model",
    "href": "slides/lec15.html#the-model",
    "title": "EM algorithm",
    "section": "The model",
    "text": "The model\nComplete data log-likelihood\n\\[\nL(x |\\lambda) = N \\log \\lambda - \\lambda \\sum_{i = 1}^N x_i\n\\]\nSplitting the fully observed vs censored data,\n\\[\nL(x |\\lambda) = N \\log \\lambda - \\lambda \\left(\n\\sum_{i = 1}^{N_o} y_i + \\sum_{j = 1}^{N_c} z_j\n\\right)\n\\]\nwhere we‚Äôve split the \\(x\\) into the observed \\(y\\) and unobserved \\(z\\)."
  },
  {
    "objectID": "slides/lec15.html#surrogate",
    "href": "slides/lec15.html#surrogate",
    "title": "EM algorithm",
    "section": "Surrogate",
    "text": "Surrogate\n\\[\n\\begin{aligned}\nQ(\\lambda | \\lambda_n) &=\n\\mathbb{E}\\left[\nL(x |\\lambda) \\ | \\ y, \\lambda_n\n\\right]\\\\\n&=\nN \\log \\lambda - \\lambda \\left(\\sum_{i = 1}^{N_o} y_i -\n\\sum_{j = 1}^{N_c} \\underbrace{\\mathbb{E} [z_j]}_{\\text{w.r.t. } z_j |\\lambda_n}\n\\right)\n\\end{aligned}\n\\]\n\nNote: \\(z_j = x_j | x_j > c\\) where \\(c = 100\\) is the censoring cut-off. Therefore this is an expectation of a truncated exponential.\n\n\n\nE step:\n\n\\[\nQ(\\lambda | \\lambda_n) = N \\log \\lambda - \\lambda \\left(\\sum_{i = 1}^{N_o} y_i -\n\\sum_{j = 1}^{N_c} \\left(\nc + \\frac{1}{\\lambda_n} \\right)\n\\right)\n\\]\n\n\n\nM step:\n\n\\(\\frac{dQ}{d\\lambda} = 0 \\implies\\)\n\\[\n\\lambda_{n+1} = \\frac{N}{\\sum_{i = 1}^{N_o} y_i + N_c \\left( c + \\frac{1}{\\lambda_n}\n\\right)}\n\\]"
  },
  {
    "objectID": "slides/lec15.html#exercise",
    "href": "slides/lec15.html#exercise",
    "title": "EM algorithm",
    "section": "Exercise",
    "text": "Exercise\nCode the EM algorithm on the previous slide for the simulated data-set of break failures below:\n\nset.seed(5)\nN = 250 # number of observations\ntrueLambda = 0.01\nxcomplete = rexp(N, rate = trueLambda) %>% round(digits = 3)\nc = 100 # censor time\n\nx = xcomplete\nx[x >= 100] = 100\n\nNote: you only observe x.\n\nSolution:\n\ndownload.file(\"https://sta323-sp23.github.io/scripts/EM-example.R\",\n              destfile = \"EM-example.R\")\n\n\n\nüîó sta323-sp23.github.io"
  }
]