{
  "hash": "3eb25096f4f04e0f96fd5c46387704c2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Welcome to STA 323\"\nauthor: \"Dr. Alexander Fisher\"\nformat: \n    revealjs:\n      smaller: true\n---\n\n\n\n## Meet the professor\n\n\n\n::: {.cell}\n\n:::\n\n\n\n:::::: columns\n::: {.column width=\"50%\"}\n-   Alexander Fisher\n-   [alexander.fisher\\@duke.edu](alexander.fisher@duke.edu)\n-   [Office hours](https://docs.google.com/spreadsheets/d/16gf9dQ_41V628vKvFdS95JBOUKYSjuxJBo7OzPye-SI/edit?usp=sharing): Mo/Th: 2:00-3:00p in Old Chem 223B\n-   A little bit about my research...\n:::\n\n:::: {.column width=\"50%\"}\n::: fragment\n![](images/01-welcome/alignment.png){fig-align=\"center\" width=\"260\"}\n\n![](images/01-welcome/basic_tree.png){fig-align=\"center\" width=\"320\"}\n:::\n::::\n::::::\n\n## What is statistical computing?\n\nBroadly, it's turning data into knowledge using the computer.\n\n. . .\n\n###### Examples of things we'll do in this course:\n\n-   Scrape data off the web\n\n-   Interact with databases\n\n-   Extract useful parts of massive datasets in the blink of an eye using regular expressions\n\n-   Optimize code in R\n\n-   Model data with complicated likelihood functions and then write algorithms to maximize the likelihood\n\n-   Build shiny web apps\n\n##  {#slide3-id data-menu-title=\"Shiny App Example\"}\n\n![](images/01-welcome/NHLapp_demo.gif){.absolute bottom=\"2%\"}\n\n## Learning objectives\n\nBy the end of this course you will be able to...\n\n-   write efficient R code to (1) wrangle, explore and analyze data, (2) program algorithms to make inference under a variety of data generative models\n\n-   conduct independent data analysis and subsequently write and present results effectively\n\n## Assessments\n\n| Assignment          | Description                      |\n|---------------------|----------------------------------|\n| Labs (45%)          | Biweekly lab assignments.        |\n| Exams (35%)         | Two take-home open-notes exams.  |\n| Final Project (15%) | Written report and presentation. |\n| Quizzes (5%)        | In-class pop quizzes.            |\n\n# Course Policies\n\n## Community\n\nUphold the **Duke Community Standard**:\n\n> I will not lie, cheat, or steal in my academic endeavors;\n>\n> I will conduct myself honorably in all my endeavors; and\n>\n> I will act if the Standard is compromised.\n\nAny violations in academic honesty standards as outlined in the Duke Community Standard and those specific to this course will automatically result in a 0 for the assignment and will be reported to the Office of Student Conduct for further action.\n\n## Team work policy\n\nThe final project and several labs will be completed in teams. All group members are expected to participate equally. Commit history may be used to give individual team members different grades. Your grade may differ from the rest of your group.\n\n## Sharing / reusing code\n\n-   Unless explicitly stated otherwise, this course's policy is that you may make use of any online resources (e.g. Google, existing StackOverflow answers, etc.) but you must explicitly cite where you obtained any code you directly use or use as inspiration in your solution(s).\n\n-   Any recycled code that is discovered and is not explicitly cited will be treated as plagiarism, regardless of source.\n\n-   Narrative (non-code solutions) should always be entirely your own.\n\n## Late policy\n\n-   Homeworks and labs can be turned in within 48 hours of the deadline for grade penalty (5% off per day).\n\n-   Exams and the final project cannot be turned in late and can only be excused under exceptional circumstances.\n\n-   The Duke policy for illness requires a short-term illness report or a letter from the Dean; except in emergencies, all other absenteeism must be approved in advance (e.g., an athlete who must miss class may be excused by prior arrangement for specific days). For emergencies, email notification is needed at the first reasonable time.\n\n-   Last minute coding/rendering issues will not be granted extensions.\n\n## Course toolkit\n\n| Resource | Description |\n|------------------------|------------------------------------------------|\n| [course website](https://sta323-sp23.github.io/) | course notes, deadlines, assignments, office hours, syllabus |\n| [Canvas](https://go.canvas.duke.edu) | class recordings, solutions, announcements, Ed Discussion |\n| [course organization](https://github.com/sta323-sp23) | assignments, collaboration |\n| [RStudio containers](https://cmgr.oit.duke.edu/containers)\\* | online coding platform |\n\n\\*You are welcome to install R and RStudio locally on your computer. If working locally you should make sure that your environment meets the following requirements:\n\n-   latest R version\n\n-   latest RStudio\n\n-   working git installation\n\n-   ability to create ssh keys (for GitHub authentication)\n\n-   All R packages updated to their latest version from CRAN\n\n## Communication and missing class\n\nIf you have questions about homework/lab exercises, debugging, or any question about course materials\n\n-   come to office hours\n-   ask on Ed Discussion\n\n. . .\n\n::: callout-warning\nThe teaching team will not debug via email.\n:::\n\n. . .\n\nWhen you miss a class:\n\n-   watch the recorded lecture on Canvas\n-   come to office hours / post on Ed Discussion / ask a friend about missed content\n\n## Beginnings\n\n-   Post on Ed Discussion\n\n-   Create a GitHub account (unless you already have one) on <https://github.com/>\n\n    -   one day you might want to show off your work, so choose a username you will be proud to show to a future employer.\n\n-   Tell me your username by taking [this survey](https://forms.gle/TYQKNu9gJTE81ht8A). This is essential to receive credit on future assignments\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_54d27284\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1.5em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">04</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n# R fundamentals\n\n## Vectors\n\nThe fundamental building block of data in R is a vector (collections of related values, objects, other data structures, etc).\n\nR has two types of vectors:\n\n-   atomic vectors\n    -   homogeneous collections of the same type (e.g. all logical values, all numbers, or all character strings).\n-   generic vectors\n    -   heterogeneous collections of any type of R object, even other lists (meaning they can have a hierarchical/tree-like structure).\n\nI will use the term component or element when referring to a value inside a vector.\n\n## Vector relationships\n\n![](images/01-welcome/vectorRelationships.png){fig-align=\"center\" width=\"900\"}\n\nSource: <https://r4ds.had.co.nz/vectors.html>\n\n## Atomic vectors\n\nR has six atomic vector types:\n\n`logical, integer, double, character, complex, raw`\n\nIn this course we will mostly work with the first four. You will rarely work with the last two types - complex and raw.\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(T, F, TRUE, FALSE)\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- c(\"a\", \"few\", \"more\", \"slides\")\ntypeof(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\n`c()` is a function that combines arguments to form a vector. It's a quick way to make small vectors for testing and experimentation. Later, we'll see better ways to create vectors.\n:::\n\n## Coercion hierarchy\n\nIf you try to combine components of different types into a single atomic vector, R will try to coerce all elements so they can be represented as the simplest type. The ordering is `logical` \\< `integer` \\< `double` \\< `character`, where `logical` is considered the \"simplest\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(T, 5, F, 0, 1)\ny <- c(\"a\", 1, T)\nz <- c(3.0, 4L, 0L)\n```\n:::\n\n\n\n::::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 5 0 0 1\n```\n\n\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\"    \"1\"    \"TRUE\"\n```\n\n\n:::\n\n```{.r .cell-code}\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 4 0\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(z)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## Logical operations\n\n### Boolean operations\n\n| Operator | Definition   | Vectorized? |\n|----------|--------------|-------------|\n| x \\| y   | or           | yes         |\n| x & y    | and          | yes         |\n| !x       | not          | yes         |\n| x \\|\\| y | or           | no          |\n| x && y   | and          | no          |\n| xor(x,y) | exclusive or | yes         |\n\n## Logical operations 2\n\n### Comparison operations\n\n| Operator | Definition            | Vectorized?  |\n|----------|-----------------------|--------------|\n| x \\< y   | less than             | yes          |\n| x \\<= y  | less than or equal to | yes          |\n| x != y   | not equal to          | yes          |\n| x == y   | equal to              | yes          |\n| x %in% y | is x contained in y   | yes (over x) |\n\n## Length coercion (vector recycling)\n\nThe shorter of two atomic vectors in an operation is recycled until it is the same length as the longer atomic vector.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(2, 4, 6)\ny <- c(1, 1, 1, 2, 2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx > y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE  TRUE  TRUE FALSE  TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx == y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE FALSE  TRUE FALSE\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n10 / x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.000000 2.500000 1.666667\n```\n\n\n:::\n:::\n\n\n\n## Exercises\n\nWhat do each of the following return? Run the code to check your answer.\n\nExercise 1.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na = c(1,4)\nb = c(1,2,3,5)\na + b\n```\n:::\n\n\n\nExercise 2.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = c(1,2)\ny = c(5,10,15,20)\nz = c(2,4)\n(x * y) / z\n```\n:::\n\n\n\nExercise 3.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = c(1, TRUE, 0)\ntypeof(x)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}