{
  "hash": "f5fe9ac9a699ed38ba48d48291601f9c",
  "result": {
    "markdown": "---\ntitle: \"Regular expressions\"\nauthor: \"Dr. Alexander Fisher\"\nexecute:\n  warning: true\nformat: \n    revealjs:\n      smaller: true\n---\n\n\n# What is a regular expression?\n\n## Definition and utility\n\nA regular expression (aka regex or regexp) is a custom defined string matching pattern. A regular expression lets you:\n\n1.  extract *only* the phone number from this string: \"My phone number is (123) 456-7890, not to be confused with my birth month which is 0\"\n\n2.  search and replace multiple spellings of the word gray (grey, 6R3Y) in a document simultaneously\n\n3.  search through all files in a directory for the one that contains a specific string\n\n4.  find the specific line number from a file that contains a string\n\n5.  find and replace through multiple files simultaneously\n\nAnd much, much more!\n\n## Quick example\n\n`grep` and `grepl` are base R functions that return the index of a match and the logical value of a match respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext = c(\"Wealth, fame, power. Gold Roger, the King of the Pirates, attained\",\n         \"everything this world has to offer.\")\ntext\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Wealth, fame, power. Gold Roger, the King of the Pirates, attained\"\n[2] \"everything this world has to offer.\"                               \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrep(\"Pirate\", text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"Pirate\", text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE\n```\n:::\n:::\n\n\n. . .\n\nregular expressions are case-sensitive\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrep(\"pirate\", text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ninteger(0)\n```\n:::\n\n```{.r .cell-code}\ngrepl(\"pirate\", text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE\n```\n:::\n:::\n\n\n# stringr\n\n![](images/stringr.png){fig-align=\"center\"}\n\n## introducing stringr\n\n\n::: {.cell}\n\n:::\n\n\n`stringr` hosts a convenient set of tools to manipulate strings and extract regular expressions. All functions begin with the prefix `str`.\n\nThe best summary of `stringr` functions is [on this cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/master/strings.pdf)\n\nNotice below that the string comes first in these functions (in contrast with `grep`)\n\n### Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntxt = c(\"Luffy: 'I'm going to be king of the pirates! !'\", \n        \"The straw hat crew set sail.\", \n        \"Nami: 'I'm Going to be the world's greatest navigator!'\")\n```\n:::\n\n\n::: panel-tabset\n### str_detect()\n\n-   like `grepl`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(txt, \":\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE\n```\n:::\n:::\n\n\n### str_extract()\n\n-   return the match\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract(txt, \"\\\\s([A-Z]|[a-z])*ng\") # first instance\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \" going\" NA       \" Going\"\n```\n:::\n\n```{.r .cell-code}\nstr_extract_all(txt, \"\\\\s([A-Z]|[a-z])*ng\") %>% str()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 3\n $ : chr [1:2] \" going\" \" king\"\n $ : chr(0) \n $ : chr \" Going\"\n```\n:::\n:::\n\n\n### str_replace\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace(txt, \"Nami\", \"Zoro\") %>%\n  str_replace(\"navigator\", \"swordsman\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Luffy: 'I'm going to be king of the pirates! !'\"        \n[2] \"The straw hat crew set sail.\"                           \n[3] \"Zoro: 'I'm Going to be the world's greatest swordsman!'\"\n```\n:::\n:::\n\n:::\n\n## The power of `str_replace`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nno_bots = \"My number is one Two tHree 456 fOuR 3 2 1\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_to_lower(no_bots) %>%\n  str_replace_all(c(\"one\" = \"1\", \"two\" = \"2\", \n                    \"three\" = \"3\", \"four\" = \"4\")) %>%\n  str_extract_all(\"\\\\d\") %>% # simplify arg here could change pipeline\n  unlist() %>%\n  paste(collapse = \"\") # or use str_c(collapse = \"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1234564321\"\n```\n:::\n:::\n\n\n## Basic principles\n\n-   To match a string exactly, just write those characters.\n\n-   To match a single character from a set of possibilities, use square brackets, e.g. `[0123456789]` matches any digit.\n\n-   To group characters together into an expression, use parentheses, `()`\n\n. . .\n\n**Repeaters:** `*` , `+` and `{ }`: the preceding character is to be used for more than once\n\n-   `*` match zero or more occurrences of the preceding expression.\n\n-   `+` match one or more occurrences of the preceding expression.\n\n-   `{}` match the preceding expression for as many times as the value inside this bracket.\n\n. . .\n\nSome repeater examples:\\\n\\\n\n| regexp   | explanation                       |\n|----------|-----------------------------------|\n| `a*`     | match 0 or more occurences of \"a\" |\n|  `a+`        | match 1 more occurences of \"a\"                                 |\n|   `(abc)+`  | match 1 or more back-to-back occurence of the group \"abc\"                               |\n| `a{3}`   | match a 3 times                   |\n| `a{3,}`  | match a 3 or more times           |\n| `a{3,5}` | match \"a\" 3, 4 or 5 times         |\n\n\\small{citation: <https://www.geeksforgeeks.org/write-regular-expressions/>}\n\n## Symbols\n\n-   `.` symbol for wildcard. The dot symbol can take place of any other symbol.\n\n-   `?` symbol for optional character. The preceding character may or may not be present in the string to be matched. Example: `docx?` will match both `docx` and `doc`\n\n-   `$` symbol for position match end. Tells the computer that the match must occur at the end of the string or before `\\n` at the end of the line or string.\n\n-   `\\` symbol for escaping characters. If you want to match for the actual `+` or `.`, etc. add a backslash `\\` before that character.\n\n-   `|` symbol for \"or\". Match any one element separated by the vertical bar `|` character. Example: `th(e|is|at)` will match words \"the\", \"this\" and \"that\".\n\n-   `^` symbol has two meanings.\n\n    -   By itself, `^` sets the position of the match to the beginning of the string or line. Example: `^\\d{3}` says to match the first three digits at the beginning of the string and will return `919` from `919-123-4567`.\n\n    -   Together with brackets, `[^set_of_characters]` implies *exclusion*. Example: `[^abc]` will match any character except a, b, c.\n\n## Character classes\n\n**Character classes**: match a character by its class, for example: letter, digit, space, and symbols.\n\n-   `\\s` : matches any whitespace characters such as space and tab\n\n-   `\\S` : matches any non-whitespace characters\n\n-   `\\d` : matches any digit character\n\n-   `\\D` : matches any non-digit characters\n\n-   `\\w` : matches any word character (basically alpha-numeric)\n\n-   `\\W` : matches any non-word character\n\n-   `\\b` : matches any word boundary (this would include spaces, dashes, commas, semi-colons, etc)\n\n\\small{citation: <https://www.geeksforgeeks.org/write-regular-expressions/>}\n\n## A hierarchical view of character classes\n\n![](images/regex_char_classes.png){fig-align=\"center\" width=\"479\"}\n\n\\small{citation: [http://perso.ens-lyon.fr/lise.vaudor/strings-et-expressions-regulieres/]()}\n\n## Ranges\n\n`-` can be used to interpolate between first and last and grab consecutive values. Example: `[A-Z]` matches any capital letters from \"A\" to \"Z\". `[1-4]` matches any integer digit from 1 to 4.\n\nTo match an alphabetical character (upper or lower case \"A-Z\" or \"a-z\") but not numbers, you can use the regular expression `([A-Z]|[a-z])`\n\nTo match everything but capital \"F\" through \"N\", you can use the regular expression `[^F-N]`\n\n## Escapism\n\nWhen to escape?\n\n    . ^ $ * + ? { } [ ] \\ | ( )\n\nAre all special and perform as described on the previous slides by default. Therefore, these special characters must be escaped to match directly. You need to use *two* levels of escape to escape a special character. Example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntxt = \"To be, [or] not to be that is the question.\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(txt, \"[\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in stri_detect_regex(string, pattern, negate = negate, opts_regex = opts(pattern)): Missing closing bracket on a bracket expression. (U_REGEX_MISSING_CLOSE_BRACKET, context=`[`)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(txt, \"\\[\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: '\\[' is an unrecognized escape in character string starting \"\"\\[\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(txt, \"\\\\[\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Escape classes\n\nIn order to access the presumed functionality of character classes, you need to use a double escape as well. Example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntxt = c(\"A1\", \"B2\", \"CC\", \"DD\", \"EE2\")\n```\n:::\n\n\n-   Which strings end with a digit?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(txt, \"\\d$\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: '\\d' is an unrecognized escape in character string starting \"\"\\d\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(txt, \"\\\\d$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE FALSE  TRUE\n```\n:::\n:::\n\n\n-   Which strings contain 3 alphanumeric characters?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(txt, \"\\\\w{3}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE FALSE  TRUE\n```\n:::\n:::\n\n\n. . .\n\n::: callout-note\n## tl;dr\n\nto match a symbol or character class, use double escapes\n:::\n\n## Exercise 1\n\n\n::: {.cell}\n\n:::\n\n\nDownload the files `secret-message.txt` and `emails.txt` using the command below in the console:\n\n::: callout-important \n## WARNING\nDO NOT VIEW THE FILE -- YOUR CONTAINER MAY CRASH!\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload.file(\"https://sta323-sp23.github.io/data/secret-message.txt\", \n              destfile = \"secret-message.txt\")\n\ndownload.file(\"https://sta323-sp23.github.io/data/emails.txt\", \n              destfile = \"emails.txt\")\n```\n:::\n\n\n\n*Hint*: read in the file as a string with `read_lines()`\n\n### part 1\n\nIn `secret-message.txt`, find the secret message. It will be of the form `sta323{secret-message}` where `secret-message` is replaced by some other text.\n\n### part 2\n\nIn `emails.txt` extract the unique part of the email address (part before the \"\\@\") and count the number of each hosting domain, i.e. count how many emails are `Duke` emails and how many are `gmail`.\n\n## Examples\n\nIn the following example we will search through the text, line by line, and extract matches.\n\n    Luffy's phone number is 123 456 7890\n    Zoro doesn't have a phone number\n    Nami's number is 012-345-6789\n    Usopp's number is (919)000 0000\n    Sanji's telephone number is (919) 123 4567\n    0000000000 is Robin's number.\n    Chopper doesn't have a phone number, but his lucky number is 1.\n\n### regex extraction\n\n\n::: {.cell}\n\n:::\n\n\nYou can download the text file with\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload.file(\"https://sta323-sp23.github.io/data/pirate-phone.txt\",\ndestfile = \"pirate-phone.txt\")\n```\n:::\n\n\n::: panel-tabset\n### regex\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract(pirate_phone, \"123 456 7890\")\n```\n:::\n\n\n### output\n\n`123 456 7890`\n\n### principles\n\nexact match\n:::\n\n::: panel-tabset\n### regex\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract(pirate_phone, \"[0-9]{3}\\\\-[0-9]{3}\\\\-[0-9]{4}\")\n```\n:::\n\n\n### output\n\n`012-345-6789`\n\n### principles\n\nmatching xxx-xxx-xxxx using ranges, repeaters, escaped characters\n:::\n\n## Examples\n\n    Luffy's phone number is 123 456 7890\n    Zoro doesn't have a phone number\n    Nami's number is 012-345-6789\n    Usopp's number is (919)000 0000\n    Sanji's telephone number is (919) 123 4567\n    0000000000 is Robin's number.\n    Chopper doesn't have a phone number, but his lucky number is 1.\n\n### regex extraction\n\n::: panel-tabset\n### regex\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract_all(pirate_phone, \"\\\\(\\\\d{3}\\\\)\\\\d{3}\\\\s\\\\d{4}\")\n```\n:::\n\n\n### output\n\n`(919)000 0000`\n\n### principles\n\nmatching (xxx)xxx xxxx using character classes (`\\d` for digit, `\\s` for whitespace) and repeaters\n:::\n\n::: panel-tabset\n### regex\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract_all(pirate_phone, \"\\\\(\\\\d{3}\\\\).?\\\\d{3}\\\\s[0-9]{4}\")\n```\n:::\n\n\n### output\n\n    (919)000 0000\n    (919) 123 4567\n\n### principles\n\nmatching (xxx)\\*xxx xxxx using character classes, wildcard (`.`) and optional chracter (`?`)\n:::\n\n. . .\n\n::: panel-tabset\n### regex\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# hidden exercise, code here!\n```\n:::\n\n\n### output\n\n    123 456 7890\n    012-345-6789\n    (919)000 0000\n    (919) 123 4567\n    0000000000\n\n### principles\n\nMultiple optional matching\n:::\n\n## Greedy vs ungreedy matching\n\nWhat went wrong here?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext = \"<div class='main'> <div> <a href='here.pdf'>Here!</a> </div> </div>\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract(text, \"<div>.*</div>\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"<div> <a href='here.pdf'>Here!</a> </div> </div>\"\n```\n:::\n:::\n\n\n. . .\n\nIf you add `?` after a repeater, the matching will be non-greedy (find the shortest possible match, not the longest).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract(text, \"<div>.*?</div>\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"<div> <a href='here.pdf'>Here!</a> </div>\"\n```\n:::\n:::\n\n\n# Appendix\n\n## base R string toolkit\n\nThe base language provides a number helper functions for additional manipulation of string objects:\n\n-   `paste()`, `paste0()` - concatenate strings\n-   `substr()`, `substring()` - extract or replace substrings\n-   `sprintf()` - C-like string construction\n-   `nchar()` - counts characters\n-   `strsplit()` - split a string into substrings\n-   `tolower()` - make string all lowercase\n-   `toupper()` - make string all uppercase\n\n...many more.\n\nthe \"See Also\" section of the the above functions' documentation is a good place to discover additional functions.\n\n## On the commmand line (grep)\n\nThere are three fundamental tools on unix systems to process text patterns: grep, sed and awk.\n\nThe simplest is grep. grep looks by default for **lines** of **files** that match the regex.\n\nCheck out the documentation with\n\n    $ man grep\n\nThe basics are:\n\n    $ grep -option path/to/file(s)\n\nCommon options include:\\\n\n| grep option | what it does                                      |\n|-------------|---------------------------------------------------|\n| -c          | count lines with a match                          |\n| -i          | case insensitive search                           |\n| -l          | list only names of matching files                 |\n| -n          | each output is preceded by its line number        |\n| -o          | print only the matching parts of lines            |\n| -v          | invert; list only lines that do not match pattern |\n\n## Exercise 2\n\nThe power and ease of the terminal...\n\nUsing an appropriate regex and the terminal `grep`, find the secret message hidden in *some* of the files in the zip folder:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload.file(\"https://sta323-sp23.github.io/data/secret-messages.zip\", \n              destfile = \"secret-messages.zip\")\n\nunzip(\"secret-messages.zip\", exdir = \"secret-messages\")\n```\n:::\n\n\nAgain, look for `sta323{message-here}`.\n\n## base R regex\n\n-   `grep()`, `grepl()` - regular expression pattern matching, \"l\" for return logical\n-   `sub()`, `gsub()` - regular expression pattern replacement (replace first, replace all)\n-   `regmatches()` - extract or replace matched strings\n\n### Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntxt = c(\"Luffy: 'I'm going to be king of the pirates! !'\", \n        \"The straw hat crew set sail.\", \n        \"Nami: 'I'm Going to be the world's greatest navigator!'\")\n```\n:::\n\n\n::: panel-tabset\n### grep/grepl\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrep(\":\", txt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3\n```\n:::\n\n```{.r .cell-code}\ngrepl(\":\", txt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\ngrep(\":\", txt, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Luffy: 'I'm going to be king of the pirates! !'\"        \n[2] \"Nami: 'I'm Going to be the world's greatest navigator!'\"\n```\n:::\n:::\n\n\n### sub/gsub\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsub(\"!\", \"!!!\", txt) # first ! in a string, vectorized\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Luffy: 'I'm going to be king of the pirates!!! !'\"        \n[2] \"The straw hat crew set sail.\"                             \n[3] \"Nami: 'I'm Going to be the world's greatest navigator!!!'\"\n```\n:::\n\n```{.r .cell-code}\ngsub(\"!\", \"!!!\", txt) # all !, vectorized\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Luffy: 'I'm going to be king of the pirates!!! !!!'\"      \n[2] \"The straw hat crew set sail.\"                             \n[3] \"Nami: 'I'm Going to be the world's greatest navigator!!!'\"\n```\n:::\n:::\n\n\n### regmatches\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregmatches(txt, regexpr(\".*:\", txt))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Luffy:\" \"Nami:\" \n```\n:::\n\n```{.r .cell-code}\nregmatches(txt, regexpr(\"\\\\s[a-z]*ng\", txt))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \" going\"\n```\n:::\n\n```{.r .cell-code}\nregmatches(txt, regexpr(\"\\\\s[A-Z\\\\|a-z]*ng\", txt))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \" going\" \" Going\"\n```\n:::\n:::\n\n:::\n\n## basic unix toolkit\n\nA \"folder\" aka a \"directory\" is a container. A \"file\\* is an element of a container, e.g. `lab-1.qmd` is a file contained in a `lab-1-username` directory.\n\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| command                          | action                                                                                                                         |\n+==================================+================================================================================================================================+\n| `$ ls`                           | list files in current directory                                                                                                |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ pwd`                          | print working directory                                                                                                        |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ cd`                           | change directory\\                                                                                                              |\n|                                  | example: `$ cd ..` to go to parent directory                                                                                   |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ mkdir dname`                  | make directory \"dname\"                                                                                                         |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ mkdir s{1..5}`                | overpowered file creation                                                                                                      |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ rm /path/to/file`             | remove a file                                                                                                                  |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ rm -rf dname`                 | recursively remove a directory and its contents                                                                                |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ rm core*`                     | remove all objects in the current working directory that begin with \"core\"                                                     |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ wc -l`                        | show \\# lines in a file                                                                                                        |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ y > x.txt`                    | pass printed output from command \"y\" on the left to file \"x.txt\" on the right\\                                                 |\n|                                  | example: `$ head -N file1.txt > file2.txt` creates a new file called \"file2\" that is a replica of the first N lines of file 1\\ |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ echo 'text here' >> filename` | add text to the end of a file                                                                                                  |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ man x`                        | pull up documentation for command x, example: `$ man ls`                                                                       |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}