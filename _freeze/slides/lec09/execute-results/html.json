{
  "hash": "06751391370b5bc920124b18c1dfc538",
  "result": {
    "markdown": "---\ntitle: \"Regular expressions; unix toolkit\"\nauthor: \"Dr. Alexander Fisher\"\nexecute:\n  warning: true\nformat: \n    revealjs:\n      smaller: true\n---\n\n\n# Regular expressions\n\n## What is a regular expression?\n\nA regular expression (aka regex or regexp) is a custom defined string matching pattern. A regular expression lets you:\n\n1.  extract *only* the phone number from this string: \"My phone number is (123) 456-7890, not to be confused with my birth month which is 0\"\n\n2.  search and replace multiple spellings of the word gray (grey, 6R3Y) in a document simultaneously\n\n3.  search through all files in a directory for the one that contains a specific string\n\n4.  find the specific line number from a file that contains a string\n\n5.  find and replace through multiple files simultaneously\n\nAnd much, much more!\n\n## Basic principles I\n\n-   To match a string exactly, just write those characters.\n\n-   To match a single character from a set of possibilities, use square brackets, e.g. `[0123456789]` matches any digit.\n\n-   To group characters together into an expression, use parentheses, `()`\n\n. . .\n\n**Repeaters:** `*` , `+` and `{ }`: the preceding character is to be used for more than once\n\n-   `*` match zero or more occurrences of the preceding expression.\n\n-   `+` match one or more occurrences of the preceding expression.\n\n-   `{}` match the preceding expression for as many times as the value inside this bracket.\n\n. . .\n\n**Symbols**\n\n-   `.` symbol for wildcard. The dot symbol can take place of any other symbol.\n\n-   `?` symbol for optional character. The preceding character may or may not be present in the string to be matched. Example: `docx?`\n\n-   `$` symbol for position match end. Tells the computer that the match must occur at the end of the string or before `\\n` at the end of the line or string.\n\n-   `\\` symbol for escaping characters. If you want to match for the actual `+` or `.`, etc. add a backslash `\\` before that character.\n\n\\small{citation: <https://www.geeksforgeeks.org/write-regular-expressions/>}\n\n## Basic principles II\n\n**Symbols cont.**\n\n-   `|` symbol for \"or\". Match any one element separated by the vertical bar `|` character. Example: `th(e|is|at)` will match words \"the\", \"this\" and \"that\".\n\n-   `^` symbol has two meanings.\n\n    -   By itself, `^` sets the position of the match to the beginning of the string or line. Example: `^\\d{3}` says to match the first three digits at the beginning of the string and will return `919` from `919-123-4567`.\n\n    -   Together with brackets, `[^set_of_characters]` implies *exclusion*. Example: `[^abc]` will match any character except a, b, c.\n\n. . .\n\n**Character classes**: match a character by its class, for example: letter, digit, space, and symbols.\n\n-   `\\s` : matches any whitespace characters such as space and tab\n\n-   `\\S` : matches any non-whitespace characters\n\n-   `\\d` : matches any digit character\n\n-   `\\D` : matches any non-digit characters\n\n-   `\\w` : matches any word character (basically alpha-numeric)\n\n-   `\\W` : matches any non-word character\n\n-   `\\b` : matches any word boundary (this would include spaces, dashes, commas, semi-colons, etc)\n\n\\small{citation: <https://www.geeksforgeeks.org/write-regular-expressions/>}\n\n## Basic principles III\n\n**Interpolation**\n\n`-` can be used to interpolate between first and last and grab consecutive values. Example: `[A-Z]` matches any capital letters from \"A\" to \"Z\". `[1-4]` matches any integer digit from 1 to 4.\n\n\\small{citation: <https://www.geeksforgeeks.org/write-regular-expressions/>}\n\n. . . \n\n**Escapism**\n\nYou have to \"escape\" with a `\\` quite a lot. More on this in the cheatsheet later. The short version is:\n\n```\n. ^ $ * + ? { } [ ] \\ | ( )\n```\n\nmust be escaped to match directly. Since regexps live on top of character escapes i.e. has special classes like `\\d`, `\\s` etc., you need to use *two* levels of escapes on special characters. E.g.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntxt = \"To be, [or] not to be that is the question.\"\ngrepl(\"[\", txt)\ngrepl(\"\\[\", txt)\ngrepl(\"\\\\[\", txt)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: '\\[' is an unrecognized escape in character string starting \"\"\\[\"\n```\n:::\n:::\n\n\n\n\n## Examples\n\nIn the following example we will search through the text file, line by line, and extract matches.\n\n    Luffy's phone number is 123 456 7890\n    Zoro doesn't have a phone number\n    Nami's number is 012-345-6789\n    Usopp's number is (919)000 0000\n    Sanji's telephone number is (919) 123 4567\n    0000000000 is Robin's number.\n    Chopper doesn't have a phone number, but his lucky number is 1.\n\n### regex extraction\n\nTest these regular expressions with `$ grep -o \"insert regex\" file.txt`.\n\n::: panel-tabset\n### regex\n\n`\"123 456 7890\"`\n\n### output\n\n`123 456 7890`\n\n### principles\n\nexact match\n:::\n\n::: panel-tabset\n### regex\n\n`\"[0-9]\\{3\\}\\-[0-9]\\{3\\}\\-[0-9]\\{4\\}\"`\n\n### output\n\n`012-345-6789`\n\n### principles\n\nmatching xxx-xxx-xxxx using interpolation, repeaters, escaped characters\n:::\n\n## Examples\n\n    Luffy's phone number is 123 456 7890\n    Zoro doesn't have a phone number\n    Nami's number is 012-345-6789\n    Usopp's number is (919)000 0000\n    Sanji's telephone number is (919) 123 4567\n    0000000000 is Robin's number.\n    Chopper doesn't have a phone number, but his lucky number is 1.\n\n### regex extraction\n\nTest these regular expressions with `$ grep -o \"insert regex\" file.txt`.\n\n::: panel-tabset\n### regex\n\n`\"(\\d\\{3\\})\\.*\\d\\{3\\}\\s\\d\\{4\\}\"`\n\n### output\n\n`(919)000 0000`\n\n### principles\n\nmatching (xxx)xxx xxxx using character classes (`\\d` for digit, `\\s` for whitespace) and repeaters\n:::\n\n::: panel-tabset\n### regex\n\n`\"(\\d\\{3\\}).\\?\\d\\{3\\}\\s[0-9]\\{4\\}\"`\n\n### output\n\n    (919)000 0000\n    (919) 123 4567\n\n### principles\n\nmatching (xxx)\\*xxx xxxx using character classes, wildcard (`.`) and optional chracter (`?`)\n:::\n\n::: panel-tabset\n### regex\n\n`\"(\\?\\d\\{3\\})\\?.\\?\\d\\{3\\}.\\?[0-9]\\{4\\}\"`\n\n### output\n\n    123 456 7890\n    012-345-6789\n    (919)000 0000\n    (919) 123 4567\n    0000000000\n\n### principles\n\nMultiple optional matching\n:::\n\n## On the commmand line (grep)\n\nThere are three fundamental tools on unix systems to process text patterns: grep, sed and awk.\n\nThe simplest is grep. grep looks by default for **lines** of **files** that match the regex.\n\nCheck out the documentation with\n\n    $ man grep\n\nThe basics are:\n\n    $ grep -option path/to/file(s)\n\nCommon options include:\\\n\n| grep option | what it does                                      |\n|-------------|---------------------------------------------------|\n| -c          | count lines with a match                          |\n| -i          | case insensitive search                           |\n| -l          | list only names of matching files                 |\n| -n          | each output is preceded by its line number        |\n| -o          | print only the matching parts of lines            |\n| -v          | invert; list only lines that do not match pattern |\n\n## base R regex\n\n- `grep()`, `grepl()` - regular expression pattern matching, \"l\" for return logical\n- `sub()`, `gsub()` - regular expression pattern replacement (replace first, replace all)\n- `regmatches()` - extract or replace matched strings\n\n\n\n### Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntxt = c(\"Luffy: 'I'm going to be king of the pirates! !'\", \n        \"The straw hat crew set sail.\", \n        \"Nami: 'I'm Going to be the world's greatest navigator!'\")\n```\n:::\n\n\n\n::: panel-tabset\n\n### grep/grepl\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrep(\":\", txt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3\n```\n:::\n\n```{.r .cell-code}\ngrepl(\":\", txt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\ngrep(\":\", txt, value = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Luffy: 'I'm going to be king of the pirates! !'\"        \n[2] \"Nami: 'I'm Going to be the world's greatest navigator!'\"\n```\n:::\n:::\n\n\n### sub/gsub\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsub(\"!\", \"!!!\", txt) # first ! in a string, vectorized\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Luffy: 'I'm going to be king of the pirates!!! !'\"        \n[2] \"The straw hat crew set sail.\"                             \n[3] \"Nami: 'I'm Going to be the world's greatest navigator!!!'\"\n```\n:::\n\n```{.r .cell-code}\ngsub(\"!\", \"!!!\", txt) # all !, vectorized\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Luffy: 'I'm going to be king of the pirates!!! !!!'\"      \n[2] \"The straw hat crew set sail.\"                             \n[3] \"Nami: 'I'm Going to be the world's greatest navigator!!!'\"\n```\n:::\n:::\n\n\n\n### regmatches\n\n\n::: {.cell}\n\n```{.r .cell-code}\nregmatches(txt, regexpr(\".*:\", txt))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Luffy:\" \"Nami:\" \n```\n:::\n\n```{.r .cell-code}\nregmatches(txt, regexpr(\"\\\\s[a-z]*ng\", txt))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \" going\"\n```\n:::\n\n```{.r .cell-code}\nregmatches(txt, regexpr(\"\\\\s[A-Z\\\\|a-z]*ng\", txt))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \" going\" \" Going\"\n```\n:::\n:::\n\n\n\n:::\n\n\n## stringr\n\n\n::: {.cell}\n\n:::\n\n\n\n`stringr` hosts a convenient set of tools to manipulate strings and extract regular expressions. All functions begin with the prefix `str`.\n\nThe best summary of `stringr` functions is [on this cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/master/strings.pdf)\n\nNotice below that the string comes first in these functions (in contrast with `grep`/`sub`)\n\n### Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntxt = c(\"Luffy: 'I'm going to be king of the pirates! !'\", \n        \"The straw hat crew set sail.\", \n        \"Nami: 'I'm Going to be the world's greatest navigator!'\")\n```\n:::\n\n\n\n::: panel-tabset\n\n### str_detect()\n\n- like `grepl`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(txt, \":\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE\n```\n:::\n:::\n\n\n### str_extract()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract(txt, \"\\\\s[A-Z\\\\|a-z]*ng\") # first instance\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \" going\" NA       \" Going\"\n```\n:::\n\n```{.r .cell-code}\nstr_extract_all(txt, \"\\\\s[A-Z\\\\|a-z]*ng\") %>% str()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 3\n $ : chr [1:2] \" going\" \" king\"\n $ : chr(0) \n $ : chr \" Going\"\n```\n:::\n:::\n\n### str_replace\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_replace(txt, \"Nami\", \"Zoro\") %>%\n  str_replace(\"navigator\", \"swordsman\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Luffy: 'I'm going to be king of the pirates! !'\"        \n[2] \"The straw hat crew set sail.\"                           \n[3] \"Zoro: 'I'm Going to be the world's greatest swordsman!'\"\n```\n:::\n:::\n\n\n\n:::\n\n## The power of `str_replace`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nno_bots = \"My number is one Two tHree 456 fOuR 3 2 1\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_to_lower(no_bots) %>%\n  str_replace_all(c(\"one\" = \"1\", \"two\" = \"2\", \n                    \"three\" = \"3\", \"four\" = \"4\")) %>%\n  str_extract_all(\"\\\\d\") %>%\n  unlist() %>%\n  paste(collapse = \"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1234564321\"\n```\n:::\n:::\n\n\n\n\n\n\n\n\n## Exercise 1\n\nDownload the files `secret-message.txt` and `emails.txt` using the command below in the console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload.file()\n```\n:::\n\n\nIn `secret-message.txt`, find the secret message. It will be of the form `sta323{secret-message}` where `secret-message` is replaced by some other text.\n\n# String toolkit appendix\n\n## Additional string functions in base R\n\nThe base language provides a number helper functions for additional manipulation of string objects:\n\n- `paste()`, `paste0()` - concatenate strings\n- `substr()`, `substring()` - extract or replace substrings\n- `sprintf()` - C-like string construction\n- `nchar()` - counts characters\n- `strsplit()` - split a string into substrings\n- `tolower()` - make string all lowercase\n- `toupper()` - make string all uppercase\n\n...many more.\n\nthe \"See Also\" section of the the above functions' documentation is a good place to discover additional functions.\n\n# Unix toolkit\n\n## file and folder interactions\n\nA \"folder\" aka a \"directory\" is a container. A \"file\\* is an element of a container, e.g. `lab-1.qmd` is a file contained in a `lab-1-username` directory.\n\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| command                          | action                                                                                                                         |\n+==================================+================================================================================================================================+\n| `$ ls`                           | list files in current directory                                                                                                |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ pwd`                          | print working directory                                                                                                        |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ mkdir dname`                  | make directory \"dname\"                                                                                                         |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ mkdir s{1..5}`                | overpowered file creation                                                                                                      |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ rm /path/to/file`             | remove a file                                                                                                                  |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ rm -rf dname`                 | recursively remove a directory and its contents                                                                                |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ rm core*`                     | remove all objects in the current working directory that begin with \"core\"                                                     |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ wc -l`                        | show \\# lines in a file                                                                                                        |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ y > x.txt`                    | pass printed output from command \"y\" on the left to file \"x.txt\" on the right                                                  |\n|                                  |                                                                                                                                |\n|                                  | example: `$ head -N file1.txt > file2.txt` creates a new file called \"file2\" that is a replica of the first N lines of file 1\\ |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ echo 'text here' >> filename` | add text to the end of a file                                                                                                  |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n| `$ man x`                        | pull up documentation for command x, example: `$ man ls`                                                                       |\n+----------------------------------+--------------------------------------------------------------------------------------------------------------------------------+\n\n## paths\n\n## pathfinding\n\n### absolute paths\n\n### relative paths\n\n## Exercise 2\n\n\n# Miscellaneous tools\n\n## word count\n\n## pdfcrop\n\n## combine pdfs or pngs\n\n## awk\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}