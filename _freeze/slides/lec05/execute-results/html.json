{
  "hash": "e08bed236f341e331b38333bd4aa6d63",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidyverse\"\nauthor: \"Dr. Alexander Fisher\"\nexecute:\n  warning: true\nformat: \n    revealjs:\n      smaller: true\n---\n\n\n\n# \n\n![](images/tidyverse/hex-tidyverse.png){fig-align=\"center\"}\n\n## Tidy data\n\n![](images/tidyverse/tidy-data.png)\n\nfrom [R4DS tidy data](https://r4ds.had.co.nz/tidy-data.html)\\\n\\\n\n## Tidy vs untidy\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 3\n $ :List of 8\n  ..$ name      : chr \"Luke Skywalker\"\n  ..$ height    : chr \"172\"\n  ..$ mass      : chr \"77\"\n  ..$ hair_color: chr \"blond\"\n  ..$ skin_color: chr \"fair\"\n  ..$ eye_color : chr \"blue\"\n  ..$ birth_year: chr \"19BBY\"\n  ..$ gender    : chr \"male\"\n $ :List of 8\n  ..$ name      : chr \"C-3PO\"\n  ..$ height    : chr \"167\"\n  ..$ mass      : chr \"75\"\n  ..$ hair_color: chr \"n/a\"\n  ..$ skin_color: chr \"gold\"\n  ..$ eye_color : chr \"yellow\"\n  ..$ birth_year: chr \"112BBY\"\n  ..$ gender    : chr \"n/a\"\n $ :List of 8\n  ..$ name      : chr \"R2-D2\"\n  ..$ height    : chr \"96\"\n  ..$ mass      : chr \"32\"\n  ..$ hair_color: chr \"n/a\"\n  ..$ skin_color: chr \"white, blue\"\n  ..$ eye_color : chr \"red\"\n  ..$ birth_year: chr \"33BBY\"\n  ..$ gender    : chr \"n/a\"\n```\n\n\n:::\n:::\n\n\n\n. . .\n\nuntidy!\n\n## Tidy vs untidy\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 317 × 7\n   artist         track                   date.entered   wk1   wk2   wk3   wk4\n   <chr>          <chr>                   <date>       <dbl> <dbl> <dbl> <dbl>\n 1 2 Pac          Baby Don't Cry (Keep... 2000-02-26      87    82    72    77\n 2 2Ge+her        The Hardest Part Of ... 2000-09-02      91    87    92    NA\n 3 3 Doors Down   Kryptonite              2000-04-08      81    70    68    67\n 4 3 Doors Down   Loser                   2000-10-21      76    76    72    69\n 5 504 Boyz       Wobble Wobble           2000-04-15      57    34    25    17\n 6 98^0           Give Me Just One Nig... 2000-08-19      51    39    34    26\n 7 A*Teens        Dancing Queen           2000-07-08      97    97    96    95\n 8 Aaliyah        I Don't Wanna           2000-01-29      84    62    51    41\n 9 Aaliyah        Try Again               2000-03-18      59    53    38    28\n10 Adams, Yolanda Open My Heart           2000-08-26      76    76    74    69\n# ℹ 307 more rows\n```\n\n\n:::\n:::\n\n\n\n. . .\n\nBasically tidy, but we have repeated measures.\n\n# Reshape the data\n\n## Pivot longer\n\n\n\n::: {.cell}\n\n:::\n\n\n\n![](images/tidyr_gather-01.png){width=\"729\" fig-align=\"center\"}\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\ntable4a |>\n  pivot_longer(2:3, names_to = \"year\", values_to = \"cases\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  country     year   cases\n  <chr>       <chr>  <dbl>\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n```\n\n\n:::\n:::\n\n\n\nFrom [data import cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf)\n\n## Pivot wider\n\n\n\n::: {.cell}\n\n:::\n\n\n\n<!--comment out below -->\n\n\n\n::: {.cell}\n\n:::\n\n\n\n![](images/tidyverse/pivot_wider.png){width=\"640\" fig-align=\"center\"}\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\ntable2 |>\n  pivot_wider(names_from = type, values_from = count)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n\n\n:::\n:::\n\n\n\nFrom [data import cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf)\n\n## Exercise 1\n\nReshape the `billboard` data set from the package `tidyr` so that song/week pairs make a single observation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidyr::billboard |>\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 79\n   artist     track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n   <chr>      <chr> <date>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 2 Pac      Baby… 2000-02-26      87    82    72    77    87    94    99    NA\n 2 2Ge+her    The … 2000-09-02      91    87    92    NA    NA    NA    NA    NA\n 3 3 Doors D… Kryp… 2000-04-08      81    70    68    67    66    57    54    53\n 4 3 Doors D… Loser 2000-10-21      76    76    72    69    67    65    55    59\n 5 504 Boyz   Wobb… 2000-04-15      57    34    25    17    17    31    36    49\n 6 98^0       Give… 2000-08-19      51    39    34    26    26    19     2     2\n 7 A*Teens    Danc… 2000-07-08      97    97    96    95   100    NA    NA    NA\n 8 Aaliyah    I Do… 2000-01-29      84    62    51    41    38    35    35    38\n 9 Aaliyah    Try … 2000-03-18      59    53    38    28    21    18    16    14\n10 Adams, Yo… Open… 2000-08-26      76    76    74    69    68    67    61    58\n# ℹ 68 more variables: wk9 <dbl>, wk10 <dbl>, wk11 <dbl>, wk12 <dbl>,\n#   wk13 <dbl>, wk14 <dbl>, wk15 <dbl>, wk16 <dbl>, wk17 <dbl>, wk18 <dbl>,\n#   wk19 <dbl>, wk20 <dbl>, wk21 <dbl>, wk22 <dbl>, wk23 <dbl>, wk24 <dbl>,\n#   wk25 <dbl>, wk26 <dbl>, wk27 <dbl>, wk28 <dbl>, wk29 <dbl>, wk30 <dbl>,\n#   wk31 <dbl>, wk32 <dbl>, wk33 <dbl>, wk34 <dbl>, wk35 <dbl>, wk36 <dbl>,\n#   wk37 <dbl>, wk38 <dbl>, wk39 <dbl>, wk40 <dbl>, wk41 <dbl>, wk42 <dbl>,\n#   wk43 <dbl>, wk44 <dbl>, wk45 <dbl>, wk46 <dbl>, wk47 <dbl>, wk48 <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n# Pipes\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/tidyverse/MagrittePipe.png){width=\"640\" fig-align=\"center\"}\n:::\n\n::: {.column width=\"50%\"}\n![](images/tidyverse/magrittr_hex.png){width=\"350\" fig-align=\"center\"}\n:::\n:::\n\n## A quick note on pipes\n\nIn the previous examples, you saw the base R pipe `|>`.\n\nThe pipe links functions and arguments together in an easy to read way.\n\nSpecifically, the pipe takes what comes before and makes it an argument to what comes after.\n\n### Example\n\n-   nested functions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npark(drive(start_car(find(\"keys\")), to = \"campus\"))\n```\n:::\n\n\n\n-   pipeline\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfind(\"keys\") %>%\n    start_car() %>%\n    drive(to = \"campus\") %>%\n    park()\n```\n:::\n\n\n\n## Base r vs magrittr\n\nThere are two pipes we'll encounter in R:\n\n-   the base R pipe `|>` added in R v4.1.0\n-   the `magrittr` pipe `%>%`\n\n. . .\n\nThe main differences are:\n\n-   the base pipe doesn't require loading the package `magrittr` (contained in the `tidyverse`)\n-   the base pipe is negligibly faster in some cases\n-   the base pipe doesn't use `.` argument passing, but uses `_` instead\n. . .\n\n### Example\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = c(1, 3, NA)\n\nTRUE %>%\n  mean(x, na.rm = .)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRUE |>\n  mean(x, na.rm = _)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n# dplyr\n\n## dplyr verbs\n\n`dplyr` names functions as verbs that manipulate data frames\n\nQuick summary of key dplyr function from [dplyr vignette](https://dplyr.tidyverse.org/articles/dplyr.html):\n\n::: columns\n::: {.column width=\"50%\"}\n**Rows:**\n\n-   `filter()`:chooses rows based on column values. See [logical operations](https://sta323-sp23.github.io/slides/01-welcome.html#/logical-operations)\n-   `slice()`: chooses rows based on location.\n-   `arrange()`: changes the order of the rows\n-   `distinct()`: filter for unique rows (`.keep_all = TRUE` is useful)\n-   `sample_n()`: take a random subset of the rows\n:::\n\n::: {.column width=\"50%\"}\n**Columns:**\n\n-   `select()`: changes whether or not a column is included.\n-   `rename()`: changes the name of columns.\n-   `mutate()`: changes the values of columns and creates new columns.\n-   `pull()`: grab column as a vector\n-   `relocate()`: change column order\n:::\n:::\n\n**Groups of rows:**\n\n-   `summarise()`: collapses a group into a single row.\n-   `count()`: count unique values of one or more variables.\n-   `group_by()`/`ungroup()`: modify other verbs to act on subsets\n\n... and more\n\n## dplyr rules\n\n1.  First argument is always a data frame\n\n2.  Subsequent arguments say what to do with that data frame\n\n3.  Always return a data frame\n\n4.  Don't modify in place\n\n5.  Lazy evaluation magic\n\n## NYC flights\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nycflights13)\nglimpse(flights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 336,776\nColumns: 19\n$ year           <int> 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       <int> 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time <int> 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      <dbl> 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       <int> 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time <int> 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      <dbl> 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        <chr> \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         <int> 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        <chr> \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         <chr> \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           <chr> \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       <dbl> 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       <dbl> 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           <dbl> 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         <dbl> 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      <dttm> 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…\n```\n\n\n:::\n:::\n\n\n\n# Examples\n\n## distinct()\n\nHow many flights are in the data set?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%\n  distinct(tailnum) %>%\n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4044\n```\n\n\n:::\n:::\n\n\n\n. . .\n\nHow many distinct routes?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%\n  select(origin, dest) %>%\n  distinct() %>%\n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 224\n```\n\n\n:::\n:::\n\n\n\n## select() two columns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(flights, arr_delay, dest)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 2\n   arr_delay dest \n       <dbl> <chr>\n 1        11 IAH  \n 2        20 IAH  \n 3        33 MIA  \n 4       -18 BQN  \n 5       -25 ATL  \n 6        12 ORD  \n 7        19 FLL  \n 8       -14 IAD  \n 9        -8 MCO  \n10         8 ORD  \n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n## select() columns that contain information about departures or arrivals\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  select(contains(\"dep_\"), contains(\"arr_\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 6\n   dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay\n      <int>          <int>     <dbl>    <int>          <int>     <dbl>\n 1      517            515         2      830            819        11\n 2      533            529         4      850            830        20\n 3      542            540         2      923            850        33\n 4      544            545        -1     1004           1022       -18\n 5      554            600        -6      812            837       -25\n 6      554            558        -4      740            728        12\n 7      555            600        -5      913            854        19\n 8      557            600        -3      709            723       -14\n 9      557            600        -3      838            846        -8\n10      558            600        -2      753            745         8\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n## select() the numeric (or not numeric) columns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  select(where(is.numeric)) %>%\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 14\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n# ℹ 6 more variables: arr_delay <dbl>, flight <int>, air_time <dbl>,\n#   distance <dbl>, hour <dbl>, minute <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  select(where(function(x) !is.numeric(x))) %>%\n  head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 5\n  carrier tailnum origin dest  time_hour          \n  <chr>   <chr>   <chr>  <chr> <dttm>             \n1 UA      N14228  EWR    IAH   2013-01-01 05:00:00\n2 UA      N24211  LGA    IAH   2013-01-01 05:00:00\n3 AA      N619AA  JFK    MIA   2013-01-01 05:00:00\n4 B6      N804JB  JFK    BQN   2013-01-01 05:00:00\n5 DL      N668DN  LGA    ATL   2013-01-01 06:00:00\n```\n\n\n:::\n:::\n\n\n\n## exclude with select()\n\nselect() all but the first 10 columns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%\n  select(-1:10)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in x:y: numerical expression has 18 elements: only the first used\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 9\n   month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1     1     1      517            515         2      830            819\n 2     1     1      533            529         4      850            830\n 3     1     1      542            540         2      923            850\n 4     1     1      544            545        -1     1004           1022\n 5     1     1      554            600        -6      812            837\n 6     1     1      554            558        -4      740            728\n 7     1     1      555            600        -5      913            854\n 8     1     1      557            600        -3      709            723\n 9     1     1      557            600        -3      838            846\n10     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 2 more variables: arr_delay <dbl>, carrier <chr>\n```\n\n\n:::\n:::\n\n\n\n## relocate()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  relocate(carrier, origin, dest) %>% # to the front\n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"carrier\"        \"origin\"         \"dest\"           \"year\"          \n [5] \"month\"          \"day\"            \"dep_time\"       \"sched_dep_time\"\n [9] \"dep_delay\"      \"arr_time\"       \"sched_arr_time\" \"arr_delay\"     \n[13] \"flight\"         \"tailnum\"        \"air_time\"       \"distance\"      \n[17] \"hour\"           \"minute\"         \"time_hour\"     \n```\n\n\n:::\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%\n  relocate(year, month, day, .after = last_col()) %>% # to the end\n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"dep_time\"       \"sched_dep_time\" \"dep_delay\"      \"arr_time\"      \n [5] \"sched_arr_time\" \"arr_delay\"      \"carrier\"        \"flight\"        \n [9] \"tailnum\"        \"origin\"         \"dest\"           \"air_time\"      \n[13] \"distance\"       \"hour\"           \"minute\"         \"time_hour\"     \n[17] \"year\"           \"month\"          \"day\"           \n```\n\n\n:::\n:::\n\n\n\n## rename()\n\nchange the column names\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  relocate(tailnum) %>% \n  rename(tail_number = tailnum)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n   tail_number  year month   day dep_time sched_dep_time dep_delay arr_time\n   <chr>       <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1 N14228       2013     1     1      517            515         2      830\n 2 N24211       2013     1     1      533            529         4      850\n 3 N619AA       2013     1     1      542            540         2      923\n 4 N804JB       2013     1     1      544            545        -1     1004\n 5 N668DN       2013     1     1      554            600        -6      812\n 6 N39463       2013     1     1      554            558        -4      740\n 7 N516JB       2013     1     1      555            600        -5      913\n 8 N829AS       2013     1     1      557            600        -3      709\n 9 N593JB       2013     1     1      557            600        -3      838\n10 N3ALAA       2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 11 more variables: sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n## re-name with select()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  select(tail_number = tailnum)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 1\n   tail_number\n   <chr>      \n 1 N14228     \n 2 N24211     \n 3 N619AA     \n 4 N804JB     \n 5 N668DN     \n 6 N39463     \n 7 N516JB     \n 8 N829AS     \n 9 N593JB     \n10 N3ALAA     \n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n## arrange()\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(10)\nflights %>% \n  slice_sample(n = 3) %>% \n  select(tailnum, day) %>% \n  arrange(day)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  tailnum   day\n  <chr>   <int>\n1 N258JB     17\n2 N3CPAA     20\n3 N515MJ     31\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(10)\nflights %>% \n  slice_sample(n = 3) %>% \n  select(tailnum, day) %>% \n  arrange(desc(day))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  tailnum   day\n  <chr>   <int>\n1 N515MJ     31\n2 N3CPAA     20\n3 N258JB     17\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n. . .\n\n- `arrange()` defaults to ascending order. Use `desc()` for descending order.\n\n- you can arrange by multiple columns\n\n## group_by()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  group_by(origin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n# Groups:   origin [3]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n\n\n## summarize() with group_by()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  group_by(origin) %>%\n  summarize(\n    n = n(), \n    min_dep_delay = min(dep_delay, na.rm = TRUE), \n    max_dep_delay = max(dep_delay, na.rm = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  origin      n min_dep_delay max_dep_delay\n  <chr>   <int>         <dbl>         <dbl>\n1 EWR    120835           -25          1126\n2 JFK    111279           -43          1301\n3 LGA    104662           -33           911\n```\n\n\n:::\n:::\n\n\n\n\n## Groups after summarize\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  group_by(origin) %>%\n  summarize(\n    n = n(), \n    min_dep_delay = min(dep_delay, na.rm = TRUE), \n    max_dep_delay = max(dep_delay, na.rm = TRUE),\n    .groups = \"drop_last\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  origin      n min_dep_delay max_dep_delay\n  <chr>   <int>         <dbl>         <dbl>\n1 EWR    120835           -25          1126\n2 JFK    111279           -43          1301\n3 LGA    104662           -33           911\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  group_by(origin) %>%\n  summarize(\n    n = n(), \n    min_dep_delay = min(dep_delay, na.rm = TRUE), \n    max_dep_delay = max(dep_delay, na.rm = TRUE),\n    .groups = \"keep\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n# Groups:   origin [3]\n  origin      n min_dep_delay max_dep_delay\n  <chr>   <int>         <dbl>         <dbl>\n1 EWR    120835           -25          1126\n2 JFK    111279           -43          1301\n3 LGA    104662           -33           911\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n## count()\n\n`count()` is a quick `group_by()` and `summarize()`\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  group_by(origin, carrier) %>%\n  summarize(n = n(), .groups = \"drop\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35 × 3\n   origin carrier     n\n   <chr>  <chr>   <int>\n 1 EWR    9E       1268\n 2 EWR    AA       3487\n 3 EWR    AS        714\n 4 EWR    B6       6557\n 5 EWR    DL       4342\n 6 EWR    EV      43939\n 7 EWR    MQ       2276\n 8 EWR    OO          6\n 9 EWR    UA      46087\n10 EWR    US       4405\n# ℹ 25 more rows\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%\n  count(origin, carrier)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 35 × 3\n   origin carrier     n\n   <chr>  <chr>   <int>\n 1 EWR    9E       1268\n 2 EWR    AA       3487\n 3 EWR    AS        714\n 4 EWR    B6       6557\n 5 EWR    DL       4342\n 6 EWR    EV      43939\n 7 EWR    MQ       2276\n 8 EWR    OO          6\n 9 EWR    UA      46087\n10 EWR    US       4405\n# ℹ 25 more rows\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n## mutate() with group_by()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% group_by(origin) %>%\n  mutate(\n    n = n(), \n  ) %>%\n  select(origin, n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 2\n# Groups:   origin [3]\n   origin      n\n   <chr>   <int>\n 1 EWR    120835\n 2 LGA    104662\n 3 JFK    111279\n 4 JFK    111279\n 5 LGA    104662\n 6 EWR    120835\n 7 EWR    120835\n 8 LGA    104662\n 9 JFK    111279\n10 LGA    104662\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## combined example\n\nWhat's the average speed in miles per hour of flights traveling to Raleigh-Durham, Atlanta and Orlando airports?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  filter(dest %in% c(\"RDU\", \"ATL\", \"MCO\")) %>%\n  mutate(time_hours = air_time / 60) %>%\n  mutate(mph = distance / time_hours) %>%\n  group_by(dest) %>%\n  summarize(mean_speed = mean(mph, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  dest  mean_speed\n  <chr>      <dbl>\n1 ATL         405.\n2 MCO         422.\n3 RDU         364.\n```\n\n\n:::\n:::\n\n\n\n. . .\n\nTake the flights data frame and then filter for destination airports: (RDU, ATL, MCO).\n\nNext mutate a new column `time_hours` that reports air time of the flight in hours.\n\nMutate a column `mph` that reports miles per hour.\n\nGroup by destination and then summarize the mean flight speed towards each destination.\n\n## Exercise 2\n\nUsing the `flights` data frame within the `nycflights13` package:\n\n- Which plane (check the tail number) flew out of each New York airport the most?\n\n- Which day of the year should you fly on if you want to have the lowest possible average departure delay? What about arrival delay?\n\n- What was the shortest flight out of each airport in terms of distance?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}