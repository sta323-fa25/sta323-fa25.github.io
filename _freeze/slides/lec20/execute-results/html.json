{
  "hash": "20daa74f5629ef374ca07954ad495143",
  "result": {
    "markdown": "---\ntitle: \"APIs\"\nauthor: \"Dr. Alexander Fisher\"\nexecute:\n  warning: true\nformat: \n    revealjs:\n      smaller: true\n---\n\n\n# Announcements\n\nReminder:\n\n-   Lab 7 due today at 5:00pm.\n-   Final project presentations during lab Tuesday, April 25.\n\n# Application Programming Interfaces (APIs)\n\n## What *is* an API?\n\nAn API is a messenger that takes requests and returns responses. It allows for interaction between applications, databases, and devices.\n\n. . .\n\nIf you want to\n\n-   embed a map on your website, you'll probably use Google's API\n\n-   embed a tweet on your website, you'll use Twitter's API\n\n-   trade stocks in Python or R, you'll probably use your broker's API\n\n-   pull genetic sequence data from GenBank, you'll use GenBank's API\n\n-   create 54 repositories named lab07-\\[github_team_name\\], you'll probably use GitHub's API\n\n## Client-server framework with an API\n\n![](images/api-illustration.png)\n\n## Protocols\n\nA computer protocol is a set of rules that govern how multiple computers communicate.\n\n-   IP: Internet Protocol\n\n-   FTP: File Transfer Protocol\n\n-   HTTP: Hyper Text Transfer Protocol The key protocol that governs data transfer over the internet Allows HTML, CSS, JS to be transferred from a server to your browser\n\n-   HTTPS: Hyper Text Transfer Protocol Secure\n\n. . .\n\nWhy do we care?\n\nWeb APIs are built on HTTP. Since so much of what we do is built over the web it is natural for web APIs to follow this protocol.\n\n## URLs   \n\n![](images/url-structure.png)\n\n## Query strings\n\nProvides named parameter(s) and value(s) that modify the behavior of the resulting page.\n\nFormat generally follows:\n\n```\nfield1=value1&field2=value2&field3=value3\n```\n\n- note the `=` and `&`\n\n. . .\n\nSome quick examples,\n\n- http://lmgtfy.com/?q=hello%20world\n\n- http://maps.googleapis.com/maps/api/geocode/json?sensor=false&address=1600+Amphitheatre+Parkway\n\n- https://nomnom-prod-api.dennys.com/mapbox/geocoding/v5/mapbox.places/raleigh,%20nc.json?types=country,region,postcode,place&country=us,pr,vi,gu,mp,ca\n\n## URL encoding\n\nThis is will often be handled automatically by your web browser or other tool, but it is useful to know a bit about what is happening\n\n- Spaces will encoded as '+' or '%20'\n\n- Certain characters are reserved and will be replaced with the percent-encoded version within a URL\n\n| !   | #   | $   | &   | '   | (   | )   |\n|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n| %21 | %23 | %24 | %26 | %27 | %28 | %29 |\n| *   | +   | ,   | /   | :   | ;   | =   |\n| %2A | %2B | %2C | %2F | %3A | %3B | %3D |\n| ?   | @   | [   | ]   |\n| %3F | %40 | %5B | %5D |\n\n- Characters that cannot be converted to the correct charset are replaced with HTML numeric character references (e.g. a $\\Sigma$ would be encoded as &#931; )\n\n## REST APIs\n\n**Re**presentational **S**tate **T**ransfer \n\n- describes an architectural style for web services (not a standard)\n  \n- all communication via http requests\n\n- a REST API should specify what it can provide and how to use it, details such as query parameters, response format, request limitations, public use/API keys, method (GET/POST/PUT/DELETE), language support, etc.\n\n## HTTP methods / verbs\n\n- *GET*: fetch a resource\n  - most common, literally request info.\n- *POST*: create a new resource\n  - example: create new GitHub repositories. In general, any data you send to the website.\n- *PUT*: update a resource\n- *DELETE*: delete a resource\n\nLess common verbs: *HEAD*, *TRACE*, *OPTIONS*\n\n## Status codes\n\n- 1xx: informational messages\n\n- 2xx: successful\n\n- 3xx: redirection\n\n- 4xx: client error\n\n- 5xx: server error\n\n## Example\n\n### [https://anapioficeandfire.com/](https://anapioficeandfire.com/)\n\n## Code from the in-class example\n\nBelow you can download the example we built in-class 04/05.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload.file(\"https://sta323-sp23.github.io/scripts/BetaBinomialShinyApp.R\",\ndestfile = \"BetaBinomialShinyApp.R\")\n```\n:::\n\n\nBelow you can download the example we built in-class 04/07.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload.file(\"https://sta323-sp23.github.io/scripts/ABCShinyApp.R\",\ndestfile = \"ABCShinyApp.R\")\n```\n:::\n\n\n## Further reading\n\n\n\n- An Introduction to APIs. (2023). [https://zapier.com/learn/apis/](https://zapier.com/learn/apis/)\n\n- Podila, P. (2022). HTTP: The Protocol Every Web Developer Must Know - Part 1. [https://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-1--net-31177](https://code.tutsplus.com/tutorials/http-the-protocol-every-web-developer-must-know-part-1--net-31177)\n\n- Tools for Working with URLs and HTTP. [https://httr.r-lib.org////index.html](https://httr.r-lib.org////index.html)\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}