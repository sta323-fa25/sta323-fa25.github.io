{
  "hash": "e8a875918c0484bcbccc52db769d3f29",
  "result": {
    "markdown": "---\ntitle: \"Shiny I\"\nauthor: \"Dr. Alexander Fisher\"\nexecute:\n  warning: true\nformat: \n    revealjs:\n      smaller: true\n---\n\n\n# Announcements\n\nReminder:\n\n-   Project tips next Wednesday, April 12.\n-   Final project presentations during lab Tuesday, April 25.\n\n# Shiny notes\n\n## Overview of shiny\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load package shiny\nlibrary(shiny)\n# Define UI for application\nui <- fluidPage(\n)\n# Define server logic\nserver <- function(input, output) {\n}\n# Build and run the application\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n-   `fluidPage()` creates a dynamic HTML user interface you see when you look at an RShiny app. Convention is to save this as an object named `ui`.\n\n-   `server()` is user-defined and contains R commands your computer or external server need to run the app.\n\n-   `shinyApp()` builds the app based on the user interface and server pair of code.\n\n## Examples\n\nEnter any of the following in your console to see the shiny app in action along with the code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrunExample(\"01_hello\")        # a histogram\nrunExample(\"02_text\")         # tables and data frames\nrunExample(\"03_reactivity\")   # a reactive expression\nrunExample(\"04_mpg\")          # global variables\nrunExample(\"05_sliders\")      # slider bars\nrunExample(\"06_tabsets\")      # tabbed panels\nrunExample(\"07_widgets\")      # help text and submit buttons\nrunExample(\"08_html\")         # Shiny app built from HTML\nrunExample(\"09_upload\")       # file upload wizard\nrunExample(\"10_download\")     # file download wizard\nrunExample(\"11_timer\")        # an automated timer\n```\n:::\n\n\n## UI input (widgets)\n\n![](images/controlWidgets.png){fig-align=\"center\"}\n\n## UI input code\n\nInputs are added with `*Input`. Scroll through the code below to grab what you need or check it out from the tutorial [here](https://shiny.rstudio.com/tutorial/written-tutorial/lesson3/)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\n\n# Define UI ----\nui <- fluidPage(\n  titlePanel(\"Basic widgets\"),\n  \n  fluidRow(\n    \n    column(3,\n           h3(\"Buttons\"),\n           actionButton(\"action\", \"Action\"),\n           br(),\n           br(), \n           submitButton(\"Submit\")),\n    \n    column(3,\n           h3(\"Single checkbox\"),\n           checkboxInput(\"checkbox\", \"Choice A\", value = TRUE)),\n    \n    column(3, \n           checkboxGroupInput(\"checkGroup\", \n                              h3(\"Checkbox group\"), \n                              choices = list(\"Choice 1\" = 1, \n                                             \"Choice 2\" = 2, \n                                             \"Choice 3\" = 3),\n                              selected = 1)),\n    \n    column(3, \n           dateInput(\"date\", \n                     h3(\"Date input\"), \n                     value = \"2014-01-01\"))   \n  ),\n  \n  fluidRow(\n    \n    column(3,\n           dateRangeInput(\"dates\", h3(\"Date range\"))),\n    \n    column(3,\n           fileInput(\"file\", h3(\"File input\"))),\n    \n    column(3, \n           h3(\"Help text\"),\n           helpText(\"Note: help text isn't a true widget,\", \n                    \"but it provides an easy way to add text to\",\n                    \"accompany other widgets.\")),\n    \n    column(3, \n           numericInput(\"num\", \n                        h3(\"Numeric input\"), \n                        value = 1))   \n  ),\n  \n  fluidRow(\n    \n    column(3,\n           radioButtons(\"radio\", h3(\"Radio buttons\"),\n                        choices = list(\"Choice 1\" = 1, \"Choice 2\" = 2,\n                                       \"Choice 3\" = 3),selected = 1)),\n    \n    column(3,\n           selectInput(\"select\", h3(\"Select box\"), \n                       choices = list(\"Choice 1\" = 1, \"Choice 2\" = 2,\n                                      \"Choice 3\" = 3), selected = 1)),\n    \n    column(3, \n           sliderInput(\"slider1\", h3(\"Sliders\"),\n                       min = 0, max = 100, value = 50),\n           sliderInput(\"slider2\", \"\",\n                       min = 0, max = 100, value = c(25, 75))\n    ),\n    \n    column(3, \n           textInput(\"text\", h3(\"Text input\"), \n                     value = \"Enter text...\"))   \n  )\n  \n)\n\n# Define server logic ----\nserver <- function(input, output) {\n  \n}\n\n# Run the app ----\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n## UI input notes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsliderInput(inputId = \"bins\", label = \"Number of bins:\", \n            min = 1, max = 50, value = 30)\n```\n:::\n\n\nEach widget contains an `inputId` and a `label`.\n\n-   `inputId` is how you identify the user input on the back-end\n\n-   `label` is what the user sees.\n\n## UI output\n\nOutputs are added with `*Output()`.\\\n\n| Output function      | Creates    |\n|----------------------|------------|\n| `dataTableOutput`    | data table |\n| `htmlOutput`         | raw html   |\n| `imageOutput`        | image      |\n| `plotOutput`         | plot       |\n| `tableOutput`        | table      |\n| `textOutput`         | text       |\n| `uiOutput`           | raw html   |\n| `verbatimTextOutput` | text       |\n\n## UI render an output   \n\n![](images/renderOutput.png){fig-align=\"center\"}\n\nThe first argument for each output function is `outputId`. This argument is where you specify a name for the output not seen by the user. This name will serve as reference for code in function `server()`.\n\n# Shiny demo\n\n<!-- ## Example code -->\n\n<!-- ```{r} -->\n\n<!-- #| eval: false -->\n\n<!-- download.file(\"https://sta323-sp23.github.io/scripts/shinyAppBetaBinomial.R\", -->\n\n<!-- destfile = \"shinyAppBetaBinomial.R\") -->\n\n<!-- ``` -->\n\n## Further reading\n\n-   [shiny.rstudio.com](http://shiny.rstudio.com/)\n-   [widget gallery](http://shiny.rstudio.com/gallery/widget-gallery.html)\n-   [mastering shiny](https://mastering-shiny.org/) book\n-   [shiny cheatsheet](https://shiny.rstudio.com/images/shiny-cheatsheet.pdf)\n",
    "supporting": [
      "lec18_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}