{
  "hash": "ea7f34bcf8f18adbb979f16936900c56",
  "result": {
    "markdown": "---\ntitle: \"MM Algorithm Principles\"\nauthor: \"Dr. Alexander Fisher\"\nexecute:\n  warning: true\nformat: \n    revealjs:\n      smaller: true\n---\n\n\n# Overview\n\n## Definition\n\n\n::: {.cell}\n\n:::\n\n\n\n- MM stands for \"majorize-minimize\" and \"minorize-maximize\".\n\n- Key idea: it's easier to optimize a **surrogate** function than the true objective.\n\n. . .\n\nLet $f(\\theta)$ be a function we wish to maximize. $g(\\theta | \\theta_n)$ is a surrogate function for $f$, anchored at current iterate $\\theta_n$, if\n\n- $g$ \"minorizes\" $f$: $g(\\theta | \\theta_n) \\leq f(\\theta) \\ \\  \\forall \\ \\theta$ \n\n- $g(\\theta_n | \\theta_n) = f(\\theta_n)$ (\"tangency\").\n\n. . . \n\nEquivalently, if we wish to minimize $f(\\theta)$, $g(\\theta | \\theta_n)$ is a surrogate function for $f$, anchored at current iterate $\\theta_n$, if\n\n- $g$ \"majorizes\" $f$: $g(\\theta | \\theta_n) \\geq f(\\theta) \\ \\  \\forall \\ \\theta$ \n\n- $g(\\theta_n | \\theta_n) = f(\\theta_n)$ (\"tangency\").\n\n## Toy (conceptual) example\n\nWe wish to minimize $f(x) = cos(x)$.\n\n. . .\n\nWe need a surrogate $g$ that **majorizes** $f$.\n\n. . .\n\n\n$$\ng(x | x_n) = cos(x_n) - sin(x_n)(x - x_n) + \n\\frac{1}{2}(x - x_n)^2\n$$\n\n. . . \n\nWe can minimize $g$ easily, $\\frac{d}{dx}g(x | x_n) = -sin(x_n) + (x - x_n)$. \n\nNext, set equal to zero and set $x_{n+1} = x$, $x_{n+1} = x_n + sin(x_n)$.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lec13_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=864}\n:::\n:::\n\n\n## How did we find $g$?\n\nFinding $g$ is an art. Still, there are widely applicable and powerful tools everyone should have in their toolkit.\n\n# Toolkit\n\n## Quadratic upper bound principle\n\nObjective function: $f(x)$\n\n. . .\n\nsecond order Taylor expansion of $f$ around $x_n$:\n\n\n$$\nf(x) = f(x_n) + f'(x_n) (x-x_n) + \\frac{1}{2} f''(y) (x - x_n)^2\n$$\n\n\nHere, $y$ lies between $x$ and $x_n$. If $f''(y) \\leq B$ where $B$ is a positive constant, then\n\n\n$$\ng(x|x_n) = f(x_n) + f'(x_n) (x - x_n) + \\frac{1}{2} B (x - x_n)^2\n$$\n\n\nThis is the \"quadratic upper bound\".\n\n. . .\n\n#### Check your understanding\n\n::: panel-tabset\n\n## Questions\n\n- does $g$ satisfy the tangency condition?\n- does $g$ majorize or minorize $f$?\n- what is $B$ in the previous ($f = cos(x)$) example?\n- what is the general update $x_{n+1} =$ to under the quadratic upper bound principle?\n\n## Answers\n\n- yes\n- majorize\n- 1\n- $x_{n+1} = x_n - f'(x_n) / B$\n:::\n\n## Convex functions\n\n- A twice-differentiable function is **convex** iff $f''(x) \\geq 0$. Common examples include $f(x) = x^2$, $f(x) = e^x$ and $f(x) = -\\ln(x)$.\n\n. . . \n\nEquivalently, a function is convex if its epigraph (the points in the region above the graph of the function) form a [convex set](https://en.wikipedia.org/wiki/Convex_set). For example, $f(x) = |x|$ is convex by the epigraph test.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lec13_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n. . . \n\nA function is concave iff its negative is convex.\n\n## Supporting line minorization\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lec13_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=672}\n:::\n:::\n\n. . . \n\n$f(x) \\geq f(x_n) + f'(x_n) (x - x_n)$ because $f''(x_n) \\geq 0$\n\n. . .\n\n#### Check your understanding\n\n- Write the equation of the line in this example\n\n## Jensen's inequality\n\nFor a convex function $f$, Jensen's inequality states\n\n\n$$\nf(\\alpha x + (1 - \\alpha) y) \\leq \\alpha f(x) + (1-\\alpha) f(y), \\ \\  \\alpha \\in [0, 1]\n$$\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lec13_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n. . .\n\n- Big use: majorizing functions of the form $f(u(x) + v(x))$ where $u$ and $v$ are positive functions of parameter $x$.\n\n\n$$\nf(u + v) \\leq \\frac{u_n}{u_n + v_n} f\\left(\\frac{u_n + v_n}{u_n} u\\right) +\n\\frac{v_n}{u_n + v_n} f\\left(\\frac{u_n + v_n}{v_n}v\\right)\n$$\n\n\n## Exercise \n\n### part 1\n\n- Using $f(x) = -\\ln(x)$ show that Jensen's inequality let's us derive a minorization that splits the log of a sum.\n\n- Note: this minorization will be useful in maximum likelihood estimation under a mixture model\n\n### part 2\n\nTo see why this will be useful, recall: in a mixture model we have a convex combination of density functions:\n\n\n$$\nh(x | \\mathbf{w}, \\boldsymbol{\\theta}) = \\sum_{i = 1}^n w_i~f_i(x | \\theta_i).\n$$\n\n\nwhere $w_i > 0$ and  $\\sum_i w_i = 1$.\n\n- Assume you observe $\\{x_1, \\ldots x_m\\}$ where each $X_i$ is iid from $h(\\mathbf{x})$. Write down the log-likelihood of the data.\n\n## Acknowledgements\n\nContent of this lecture based on chapter 1 of Dr. Ken Lange's *MM Optimization Algorithms*.\n\n> Lange, Kenneth. MM Optimization Algorithms. Society for Industrial and Applied Mathematics, 2016.",
    "supporting": [
      "lec13_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}