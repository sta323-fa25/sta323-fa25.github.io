{
  "hash": "43f5b0a71b5b947bffc961f533dca7bb",
  "result": {
    "markdown": "---\ntitle: \"MM Algorithm\"\nauthor: \"Dr. Alexander Fisher\"\nexecute:\n  warning: true\nformat: \n    revealjs:\n      smaller: true\n---\n\n\n# Overview\n\n## Definition\n\n\n::: {.cell}\n\n:::\n\n\n\n- MM stands for \"majorize-minimization\" and \"minorize-maximization\".\n\n- Key idea: it's easier to optimize a **surrogate** function than the true objective.\n\n. . .\n\nLet $f(\\theta)$ be a function we wish to maximize. $g(\\theta | \\theta_n)$ is a surrogate function that \"minorizes\" $f$ if it satisfies:\n\n- $g(\\theta | \\theta_n) \\leq f(\\theta) \\ \\  \\forall \\ \\theta$ (minorization)\n\n- $g(\\theta_n | \\theta_n) = f(\\theta_n)$ (equality at an anchor point)\n\n. . . \n\nunivariate example:\n\n- $f(\\theta) = sin(\\theta)$ \n- $g(\\theta | \\theta_n) = 2$\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  xlim(0, 2*pi) +\n  geom_function(fun = sin) +\n  labs(x = expression(theta), y = \"f\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](lec13_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "lec13_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}