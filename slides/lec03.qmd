---
title: "NAs, lists, NULL and attributes"
author: "Dr. Alexander Fisher"
execute:
  warning: true
format: 
    revealjs:
      smaller: true
---

# NAs (missing values)

## Missing values

R uses `NA` to represent missing values in its data structures.`NA` is a logical type. What may not be obvious is that `NA` may be treated as a different type thanks to coercion.

::: columns
::: {.column width="50%"}
```{r}
typeof(NA)
```

```{r}
typeof(NA + 1)
```

```{r}
typeof(NA + 1L)
```

```{r}
typeof(c(NA, ""))
```
:::

::: {.column width="50%"}
::: fragment
```{r}
typeof(NA_character_)
```

```{r}
typeof(NA_real_)
```

```{r}
typeof(NA_integer_)
```

```{r}
typeof(NA_complex_)
```
:::
:::

\
:::

## `NA` stickiness

Because NAs represent missing values it makes sense that any calculation using them should also be missing.

::: columns
::: {.column width="50%"}
```{r}
1 + NA
```

```{r}
1 / NA
```

```{r}
NA * 5
```
:::

::: {.column width="50%"}
```{r}
sqrt(NA)
```

```{r}
3 ^ NA
```

```{r}
sum(c(1, 2, 3, NA))
```
:::
:::

. . .

Summarizing functions (e.g. sum(), mean(), sd(), etc.) will often have a na.rm argument which will allow you to drop missing values.

```{r}
mean(c(1, 2, NA), na.rm = TRUE)
```

```{r}
sum(c(1, 2, NA), na.rm = TRUE)
```

## NAs are not always sticky

A useful mental model for NAs is to consider them as a unknown value that could take any of the possible values for that type.

For numbers or characters this isn't very helpful, but for a logical value we know that the value must either be TRUE or FALSE and we can use that when deciding what value to return.

If the value of `NA` *affects* the logical outcome, it is indeterminate and the operation will return `NA`. If the value of `NA` *does not affect* the logical outcome, the operation will return the outcome.

::: panel-tabset
### Code

```{r}
#| eval: false

TRUE & NA


FALSE & NA


TRUE | NA


FALSE | NA
```

### Output

```{r}
#| echo: false
TRUE & NA

FALSE & NA

TRUE | NA

FALSE | NA
```
:::

## Testing for `NA`

Because `NA` could take any value, the result of, for example, `2 != NA` or `1 == NA` is inconclusive and returns `NA`.

### Examples

```{r}
2 != NA
```

```{r}
1 == NA
```

::: {.fragment}

Who's to say two missing values are equal?

```{r}
NA == NA
```
:::

::: {.fragment}

We should instead:

```{r}
!is.na(2)
```

```{r}
is.na(NA)
```

:::

## Other Special values (double)

These are defined as part of the IEEE floating point standard (not unique to R)

-   `NaN` - Not a number
-   `Inf` - Positive infinity
-   `-Inf` - Negative infinity

::: callout-note
**IEEE** (Institute of Electrical and Electronics Engineers) develops global standards for a broad range of industries including floating-point arithmetic. Read more about the IEEE 754 (the standard for floating-point arithmetic) [here](https://en.wikipedia.org/wiki/IEEE_754)
:::


::: columns
::: {.column width="50%"}
```{r}
pi / 0
```

```{r}
0 / 0
```

```{r}
1 /0 + 1/0
```
:::

::: {.column width="50%"}
```{r}
1/0 - 1/0
```

```{r}
NaN / NA
```

```{r}
Inf - Inf
```
:::


:::

## Testing for `Inf` and `NaN`

::: columns
::: {.column width="50%"}
```{r}
is.finite(Inf)
```

```{r}
is.infinite(-Inf)
```

```{r}
is.nan(Inf)
```

```{r}
Inf > 1
```

```{r}
-Inf > 1
```
:::

::: {.column width="50%"}
```{r}
is.finite(NaN)
```

```{r}
is.infinite(NaN)
```

```{r}
is.nan(NaN)
```

```{r}
is.finite(NA)
```

```{r}
is.nan(NA)
```
:::
:::

## Forced coercion

::: columns
::: {.column width="50%"}
You can coerce one type to another with `as.()`

```{r}
is.integer(2.0)
```

```{r}
as.integer("2.0")
```

```{r}
is.integer(as.integer(2.0))
```

```{r}
is.integer(Inf)
```
:::

::: {.column width="50%"}
::: fragment
`Inf` and `NaN` are doubles, however their coercion behavior is not the same as for other doubles.

```{r}
is.double(Inf)
is.double(NaN)
```

```{r}
is.integer(as.integer(Inf))
```

```{r}
is.integer(as.integer(NaN))
```
:::
:::
:::

## Exercise 1

Write a function that takes vector input `x` and returns the smallest and largest non-infinite value. Test your function on 

```{r}
x = c(1, Inf, 100, 10, -Inf)
```



# Lists

## Generic vectors (lists)

Two types of vectors in R. Atomic vectors (elements are all the same type) and generic vectors, aka **lists** (heterogeneous collection of elements). For example, a list can contain atomic vectors, functions, other lists, etc.

```{r}
list("A", (1:4)/2, list(TRUE, 1), function(x) x^2)
```

## List structure

We can view the contents of a list and a brief description of the contents compactly with the structure function `str()`

```{r}
str(list("A", (1:4)/2, list(TRUE, 1), function(x) x^2))
```

```{r}
str(1:100)
```

```{r}
str(list(c(1,2), c(TRUE, FALSE)))
```

## Recursive lists

```{r}
str(list(list(list(list())))) # recursive list
```

```{r}
str(list(1, list(2), list(3, 2))) # recursive list
```

Because of this, lists become the most natural way of representing tree-like structures within R

## List coercion

By default a vector will be coerced to a list (as a list is more general) if needed

```{r}
str( c(1, list(4, list(6, 7))) )
```

We can coerce a list into an atomic vector using `unlist` - the usual type coercion rules then apply to determine the final type.

```{r}
unlist(list(1:3, list(4:5, 6)))
```

```{r}
unlist( list(1, list(2, list(3, "Hello"))) )
```

`as.integer` and similar functions can be used, but only if the list is flat (i.e. no lists inside your base list)

## Named lists

Because of their more complex structure we often want to name the elements of a list (we can also do this with atomic vectors).

This can make accessing list elements more straight forward.

```{r}
str(list(A = 1, B = list(C = 2, D = 3)))
```

More complex names need to be quoted,

```{r}
list("knock knock" = "who's there?")
```

## Exercise 2

Represent the following JSON (JavaScript Object Notation) data as a list in R.

```{r}
#| eval: false
{
  "firstName": "John",
  "lastName": "Smith",
  "age": 25,
  "address": 
  {
    "streetAddress": "21 2nd Street",
    "city": "New York",
    "state": "NY",
    "postalCode": 10021
  },
  "phoneNumber": 
  [
    {
      "type": "home",
      "number": "212 555-1239"
    },
    {
      "type": "fax",
      "number": "646 555-4567"
    }
  ]
}
```

# `NULL` values

## The `NULL` type

`NULL` is a special value within R that represents nothing - it always has length zero and type "NULL" and cannot have any attributes.

::: columns
::: {.column width="50%"}
```{r}
NULL

typeof(NULL)

length(NULL)
```
:::

::: {.column width="50%"}
```{r}
c()

c(NULL)

c(1, NULL, 2)

c(NULL, TRUE, "A")
```
:::
:::

When combined in a vector, it disappears.

## 0-length coercion

Previously we saw that in multi-vector operations, short vectors get re-used until the length of the long vector is matched.

0-length length coercion is a special case of length coercion when one of the arguments has length 0. In this case the longer vector's length is not used and result will have length 0.

::: columns
::: {.column width="50%"}
```{r}
integer() + 1
log(numeric())
logical() | TRUE
character() > "M"
```
:::

::: {.column width="50%"}
::: fragment
```{r}
#| error: true
NULL + 1
log(NULL)
NULL | TRUE
NULL > "M"
```
:::
:::
:::

::: fragment
As a NULL values always have length 0, this coercion rule will apply (note type coercion is also occurring here)
:::

## `NULL` and comparison

Given the previous issue, comparisons and conditional with `NULL`s can be problematic.

```{r}
#| error: true
x = NULL

if (x > 0)
  print("Hello")

if (!is.null(x) & (x > 0))
  print("Hello")
```

. . .

```{r}
if (!is.null(x) && (x > 0))
  print("Hello")
```

This is due to short circuit evaluation which occurs with `&&` and `||` but not `&` or `|`.

# Attributes

## Attributes

Attributes are named lists that can be attached to objects in R. Attributes contain metadata about an object, e.g. the object's `names`, `dim`, `class`, `levels` etc.

<!-- | Data structure | Built on              | Attribute(s)              | Quick creation               | -->
<!-- |----------------|-----------------------|---------------------------|------------------------------| -->
<!-- | Matrix, Array  | atomic vector         | `dim`                     | `matrix()`, `array()`        | -->
<!-- | Factor         | atomic integer vector | `class, levels`           | `factor()`, `ordered()`      | -->
<!-- | Date           | atomic double vector  | `class`                   | `as.Date()`                  | -->
<!-- | Date-times     | atomic double vector  | `class`                   | `as.POSIXct()`, `as.POSIXlt` | -->
<!-- | Data frame     | list                  | `class, names, row.names` | `data.frame()`               | -->

Attributes can be interacted with via `attr` and `attributes` functions.

```{r}
(x = c(L=1,M=2,N=3))

attributes(x)

str(attributes(x))
```

. . . 

```{r}
attr(x, "names")
```

. . .

```{r}
attr(x, "something")
```

## Assigning attributes

```{r}
x = c(1, 2, 3)
x
```


```{r}
names(x) = c("Z","Y","X") # helper function
x
```


```{r}
names(x)
attr(x, "names") = c("A","B","C")
x
names(x)
```

## Factors

Factor objects are how R represents categorical data (e.g. a variable where there are a fixed \# of possible outcomes).

```{r}
(x = factor(c("Sunny", "Cloudy", "Rainy", "Cloudy", "Cloudy")))
```

. . .

```{r}
str(x)
```

. . .

```{r}
typeof(x)
```

What's really going on?

. . . 

```{r}
attributes(x)
```

A factor is just an integer vector with two attributes: `class` and `levels`.

## Building objects

We can build our own factor from scratch using,

```{r}
y = c(3L, 1L, 2L, 1L, 1L)
attr(y, "levels") = c("Cloudy", "Rainy", "Sunny")
attr(y, "class") = "factor"
y
```

. . .

The approach we just used is a bit clunky - generally the preferred method for construction an object with attributes from scratch is to use the structure function.

```{r}
y = structure(
  c(3L, 1L, 2L, 1L, 1L), # data
  levels = c("Cloudy", "Rainy", "Sunny"),
  class = "factor"
)
y
```

::: columns
::: {.column width="50%"}

```{r}
class(y)
```

:::

::: {.column width="50%"}
```{r}
is.factor(y)
```
:::
:::

## Knowing factors are stored as integers help explain some of their more interesting behaviors:

```{r}
x
x+1
is.integer(x)
as.integer(x)
as.character(x)
as.logical(x)
```

## Exercise 3

Create a factor vector based on the vector of airport codes below.

```{r}
airports = c("RDU", "ABE", "DTW", "GRR", "RDU", "GRR", "GNV",
             "JFK", "JFK", "SFO", "DTW")
```

All of the possible levels are

```{r}
#| eval: false
c("RDU", "ABE", "DTW", "GRR", "GNV", "JFK", "SFO")
```

