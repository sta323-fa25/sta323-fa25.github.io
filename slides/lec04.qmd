---
title: "Object oriented programming"
author: "Dr. Alexander Fisher"
execute:
  warning: true
format: 
    revealjs:
      smaller: true
---

# Review of types

## R's type hierarchy

-   from most to least complex: class $\rightarrow$ mode $\rightarrow$ type

```{r}
#| echo: false
f = function(x) x^2
x = factor("A")
l = list(1, "A")
```

| value             | `typeof()`       | `mode()`       | `class()`       |
|:------------------|:-----------------|:---------------|:----------------|
| `TRUE`            | `r typeof(TRUE)` | `r mode(TRUE)` | `r class(TRUE)` |
| `1`               | `r typeof(1)`    | `r mode(1)`    | `r class(1)`    |
| `1L`              | `r typeof(1L)`   | `r mode(1L)`   | `r class(1L)`   |
| `"A"`             | `r typeof("A")`  | `r mode("A")`  | `r class("A")`  |
| `NULL`            | `r typeof(NULL)` | `r mode(NULL)` | `r class(NULL)` |
| `list(1, "A")`    | `r typeof(l)`    | `r mode(l)`    | `r class(l)`    |
| `factor("A")`     | `r typeof(x)`    | `r mode(x)`    | `r class(x)`    |
| `function(x) x^2` | `r typeof(f)`    | `r mode(f)`    | `r class(f)`    |
| `\+`              | builtin          | function       | function        |
| `\[`              | special          | function       | function        |

. . .

objects have `class` even if no formal `class` attribute (seen with `attributes()`)

# S3 Object System

## What is S3?

-   S3 is R's core object oriented implementation

-   S3 is the only OO system used in the base and stats packages, and it's the most commonly used system in CRAN packages.

-   S3 is more flexible (read also: easier to break) than traditional object oriented programming you may have seen before (e.g. Java).

. . .

Working model: S3 is a system where we attach metadata to an object via the `class` attribute.

. . .

One of the most compelling reasons to use object oriented programming (OOP) is **polymorphism**. Polymorphism means that a developer can consider a function's interface separately from its implementation. 

## S3 class specialization

```{r}
x = c("A","B","A","C")
```

. . .

```{r}
print( x )
```

. . .

```{r}
print( factor(x) )
```

. . .

```{r}
print( unclass( factor(x) ) ) # unclass strips the class attribute
```

. . .

```{r}
print.default( factor(x) )
```

. . .

## Other examples

::: columns
::: {.column width="50%"}
```{r}
mean
```
:::

::: {.column width="50%"}
```{r}
t.test
```
:::
:::

. . .

Not all base functions use this approach,

```{r}
sum
```

. . .

::: callout-note
The `...` (dot-dot-dot) argument means the function can take any number of additional arguments. This is called a "variable argument" and it is commonly used so you pass variables to additional nested functions. For example:

```{r}
#| eval: false
f1 =  function(y = 0, z = 0) {
  return(y + z)
}

f2 <- function(x, ...) {
  return(x + f1(...))
}

f2(x = 1, y = 2, z = 3)
```
:::

## Generics (what's going on!?)

-   An S3 object behaves differently from its underlying base type whenever it's passed to a **generic** function

The easiest way to tell if a function is a generic is to use `sloop::ftype()` and look for "generic" in the output, e.g.

```{r}
library(sloop)
ftype(print)
```

. . .

Fundamentally, the generic function dispatches to a specialized version of the function depending on the class of its input. `UseMethod()` tells a generic to look for the specialized version.

The syntax for specialized functions is: `<generic>.<class>`

. . .

### Examples

We can see all the specialized versions of the generic using the `methods()` function.

```{r}
methods("plot") |>
  head(n = 15)
```

## Methods of print

```{r}
methods("print")
```

## Find the documentation

Write the name of the function to see its definition.

```{r}
print.factor
```

## Missing print functions?

There is no method to print integers specifically:

```{r}
#| error: true
print.integer
```

. . .

-   When a method for a specific class is not found, the default will be called:

```{r}
print.default
```

## What methods are specialized for a class?

```{r}
methods(class = "factor")
```

## Make your own class and class-specific methods

### Create an object of a new class

```{r}
cloud = structure(c(1, 2, 3), # object called cloud with some values
              class = "first_class") # new class type
cloud
```

. . .

### Create a new method for `first_class` objects

```{r}
print.first_class = function(x) {
  cat("Soldier, first class.\n")
  print.default(unclass(x))
}
```

```{r}
print(cloud)
```

. . .

```{r}
class(cloud) = "double"
print(cloud)
```

## Exercise 1

Create a class called "accounting". If a numeric vector has this class, function `print()` should print the vector with a $ in front of each number and display values up to two decimals. Create a method for this class and test it on the accounting object `expenses` below

```{r}
expenses = structure(
  c(500.5, 750, 200.3, 305.11),
  class = "accounting")

print(expenses)
```

::: callout-hint
- Use `format(500, digits = 2, nsmall = 2)` as a template to round to specific significant digits.
- Use `paste` or `paste0` to piece strings together.
:::

## Defining a new S3 Generic

```{r}
shuffle = function(x) {
  UseMethod("shuffle")
}
```

. . .

```{r}
shuffle.default = function(x) {
  stop("Class ", class(x), " is not supported by shuffle. \n", call. = FALSE)
}
```

. . .

```{r}
shuffle.factor = function(f) {
  factor( sample(as.character(f)), levels = sample(levels(f)) )
}
shuffle.integer = function(x) {
  sample(x)
}
```

. . .

::: columns
::: {.column width="50%"}
```{r}
#| error: true
shuffle( 1:10 )
shuffle( factor(c("A","B","C","A")) )
```

:::

::: {.column width="50%"}
```{r}
#| error: true
shuffle( c(1, 2, 3, 4, 5) )
shuffle( letters[1:5] )
```

:::
:::

## Exercise 2

Below is an S3 method called `report`, it is designed to return a message about the type/mode/class of an object passed to it.

```{r}
report = function(x) {
  UseMethod("report")
}
report.default = function(x) {
  "This class does not have a method defined."
}
```

Create an implementation for classes `integer`, `double` and `numeric`. The functions should print to the screen "I'm an integer", "I'm a double", and "I'm a numeric" respectively.

Next,

- run `report(1)` and `report(1L)`.
- run `rm("report.integer")` and re-run the functions. What has changed?
- look at `class(1)`, `mode(1)`, `typeof(1)`. Does this surprise you?

. . . 

- Integers and doubles violate the typical `class` searching rule.

# Some classes

## `Date` class


Date vectors are built on top of double vectors. They have class "Date" and no other attributes:

```{r}
today = Sys.Date()

typeof(today)

attributes(today)
```

. . . 

### The dawn of time

The date is measured in [unix time](https://en.wikipedia.org/wiki/Unix_time), that is, the number of days that have passed since January 1st, 1970. Seconds are counted similarly, startin from the beginning of time, `1970 00:00:00 UTC`.

. . . 

### Examples

::: columns
::: {.column width="50%"}

```{r}
as.double(today)
unclass(today)
```
:::

::: {.column width="50%"}
```{r}
date = as.Date("1970-01-11")

unclass(date)
```
:::
:::

## Date-times

R offers two ways to store date-time info. `POSIXct`, and `POSIXlt`

- POSIX stands for "Portable Operating Systems Interface" X ("across") platforms

  - `ct`: calendar time
  - `lt`: local time

`ct` is the simplest, is built on top of an atomic vector, and is most appropriate for use in data frames. 

## Exercise 3

- what class is `today`?
- how can you find all the different functions that take the class of `today`?
- how many days until the end of class? Note: the last day of class is April 26. Use `difftime`


## Matrices

R supports the creation of 2d data structures (rows and columns) of atomic vector types. Generally these are formed via a call to matrix().

::: columns
::: {.column width="50%"}
```{r}
matrix(1:4, nrow=2, ncol=2)
```

:::

::: {.column width="50%"}
```{r}
matrix(LETTERS[1:6], 2)
```

:::
:::

. . .

Matrices in R use column major ordering (data is sorted in column order not row order).

::: columns
::: {.column width="50%"}
```{r}
(m = matrix(1:6, nrow=2, ncol=3))
c(m)
```

:::

::: {.column width="50%"}
```{r}
(n = matrix(1:6, nrow=3,
            ncol=2, byrow=TRUE))
c(n)
```

:::
:::

## Matrix structure

Matrices (and arrays) are just atomic vectors with a dim attribute attached (they do not have a class attribute, but they do have a class).

```{r}
m = matrix(1:4, ncol=2, nrow=2)
```

::: columns
::: {.column width="50%"}
```{r}
typeof(m)
mode(m)
```

:::

::: {.column width="50%"}
```{r}
class(m)
attributes(m)
```

:::
:::

```{r}
n = letters[1:6]
dim(n) = c(2L, 3L)
n

class(n)
```

## Arrays

Arrays are just an $n$-dimensional extension of matrices and are defined by adding the appropriate dimension sizes.

::: columns
::: {.column width="50%"}
```{r}
array(1:8, dim = c(2,2,2))
```

:::

::: {.column width="50%"}
```{r}
array(letters[1:6], dim = c(2,1,3))
```

:::
:::



## Data frames

Data frames are built on top of lists with attributes: names, row.names, and class. Here the class is `data.frame`.

```{r}
typeof(cars)
attributes(cars)
str(unclass(cars))
```

. . . 

A data frame is how R handles heterogeneous tabular data (i.e. rows and columns) and is one of the most commonly used data structure in R.

## Build your own data frame

```{r}
df = list(x = 1:3, y = c("a", "b", "c"), z = c(TRUE, TRUE, TRUE))

attr(df,"class") = "data.frame"
attr(df,"row.names") = 1:3
df

str(df)

is.data.frame(df)
```


